{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This module provides a Python interface to interact with the MIDAS Civil NX API using HTTP requests. It includes functionality to manage the MAPI key required for authentication and to send API requests using various HTTP methods.</p>"},{"location":"#installation","title":"Installation","text":"<p>Make sure you have Python 3 installed. Install the MIDAS Python interface via Pip command.</p> <pre><code>pip install midas-civil\n</code></pre> <p>If already installed, upgrade the package to latest version. </p><pre><code>pip install midas-civil --upgrade\n</code></pre><p></p> <p>Additional libraries required by the modules are</p> <ul> <li>Numpy</li> <li>Polars</li> <li>xlsxwriter</li> <li>Requests </li> <li>SciPy</li> </ul> <p>To import the package use the import *</p> <pre><code>from midas_civil import *\n</code></pre>"},{"location":"#video-guide","title":"Video Guide","text":""},{"location":"#functions-available","title":"Functions available","text":""},{"location":"#mapi_key","title":"MAPI_KEY","text":"<p>Handles and stores the MIDAS API key used for authenticating requests.</p> <pre><code>#Importing the midas-civil package\nfrom midas_civil import * \n\n#Sets the MAPI Key for Python interface\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO.252a81571d')\n</code></pre> <p></p> <p>NOTE :</p> <ul> <li>Ensure your MIDAS Civil NX application is open and connected.</li> <li>The MAPI key used in your Python script must match the key in the Civil NX application.</li> </ul>"},{"location":"#mapi_baseurl","title":"MAPI_BASEURL","text":"<p>Handles and stores the MIDAS API Base URL used for sending requests.</p> <pre><code>#Importing the midas-civil package\nfrom midas_civil import * \n\n#Sets the Base URL for Python interface\nMAPI_BASEURL('https://moa-engineers.midasit.com:443/civil')\n</code></pre>"},{"location":"#mapi_country","title":"MAPI_COUNTRY","text":"<p>The <code>MAPI_COUNTRY</code>function allows users to define the country of CIVIL NX version, which in turn automatically retrieves and sets the appropriate MAPI Key and Base URL from the system registry. </p> <pre><code>#Importing the midas-civil package\nfrom midas_civil import * \n\n\nMAPI_COUNTRY('CN') # For Chinese version\nMAPI_COUNTRY('KR') # For Korean version\nMAPI_COUNTRY('US') # For US / English version\n</code></pre> <p>NOTE :</p> <ul> <li>If retriving Base URL and MAPI-Key from registry fails, then :   a.   Define Base URL using MAPI_BASEURL( )  b.   Define MAPI Key using MAPI_KEY( )</li> </ul>"},{"location":"#midasapi","title":"MidasAPI","text":"<p>Send requests to MIDAS Civil NX.</p>"},{"location":"#parameters","title":"Parameters :","text":"<ul> <li><code>method (str)</code>: HTTP method (\"GET\", \"POST\", \"PUT\", \"DELETE\")</li> <li><code>command (str)</code>: API endpoint (e.g., \"/db/NODE\")</li> <li><code>body (dict)</code>: Request payload (JSON format). Optional for \"GET\" and \"DELETE\"</li> </ul>"},{"location":"#returns","title":"Returns :","text":"<ul> <li>A dict representing the JSON response from the API.</li> </ul>"},{"location":"#example","title":"Example :","text":"<pre><code>from midas_civil import*\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJw\") #Paste your Mapi Key\n\n# Create a node\nMidasAPI(\"PUT\",\"/db/NODE\",{\"Assign\": {\"1\": {\"X\": -1,\"Y\": -1,\"Z\": -1}}})\n</code></pre>"},{"location":"#getid","title":"getID","text":"<p>Return ID of objects(Node,Element,Section,Material)</p>"},{"location":"#parameters_1","title":"Parameters :","text":"<ul> <li> <p><code>*objects (list)</code>: Objects or List of Objects of type Node, Element, Section and Material</p> <p>\u2b50 Supports nested list</p> </li> </ul>"},{"location":"#returns_1","title":"Returns :","text":"<ul> <li>An array with ID of inputted objects</li> </ul>"},{"location":"#example_1","title":"Example :","text":"<pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d')\n\nNode(0,0,0,id=1)    # Create Node at 0,0,0 with ID = 1\nNode(1,1,1,id=2)    # Create Node at 1,1,1 with ID = 2\nNode(2,2,2,id=3)    # Create Node at 2,2,2 with ID = 3\n\nbeam_1 = Element.Beam(1,2)  # Create Beam connecting Node 1 and Node 2 (default ID = 1)\nbeam_2 = Element.Beam(2,3)  # Create Beam connecting Node 2 and Node 3 (default ID = 2)\n\n\nprint(getID(beam_1))\nprint(getID(beam_2))\nprint(getID(beam_1,beam_2))\n\n#   Output :\n#   [1]\n#   [2]\n#   [1, 2]\n</code></pre>"},{"location":"#getnodeid","title":"getNodeID","text":"<p>Return Node ID of Element objects </p>"},{"location":"#parameters_2","title":"Parameters :","text":"<ul> <li> <p><code>*objects (list)</code>: Objects or List of Objects of type Element(Beam, Truss...)</p> <p>\u2b50 Supports nested list</p> </li> </ul>"},{"location":"#returns_2","title":"Returns :","text":"<ul> <li>An array with Node IDs of inputted objects</li> </ul>"},{"location":"#example_2","title":"Example :","text":"<pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d')\n\nNode(0,0,0,id=1)    # Create Node at 0,0,0 with ID = 1\nNode(1,1,1,id=2)    # Create Node at 1,1,1 with ID = 2\nNode(2,2,2,id=3)    # Create Node at 2,2,2 with ID = 3\n\nbeam_1 = Element.Beam(1,2)  # Create Beam connecting Node 1 and Node 2 (default ID = 1)\nbeam_2 = Element.Beam(2,3)  # Create Beam connecting Node 2 and Node 3 (default ID = 2)\n\n\nprint(getNodeID(beam_1))\nprint(getNodeID(beam_2))\nprint(getNodeID(beam_1,beam_2))\n\n#   Output :\n#   [[1, 2]]\n#   [[2, 3]]\n#   [[1, 2], [2, 3]]\n</code></pre>"},{"location":"model/","title":"Model","text":""},{"location":"model/#model","title":"Model","text":"<p>This manual provides detailed documentation of the Model class methods used for managing structural analysis models via Midas API.</p>"},{"location":"model/#methods","title":"Methods","text":""},{"location":"model/#modelnew","title":"Model.new","text":"<p>Creates a new model file. </p><pre><code>Model.new()\n</code></pre><p></p>"},{"location":"model/#modelopen","title":"Model.open","text":"<p>Opens an existing model file.</p> <pre><code>Model.open(\"D://model.mcb\")\n</code></pre>"},{"location":"model/#modelsave","title":"Model.save","text":"<p>Saves the current model. For first-time saves, provide a path.</p> <p>NOTE</p> <p>If path is not provided for the first time GUI prompt will appear</p> <pre><code>Model.save()\nModel.save(\"D://model.mcb\")\n</code></pre>"},{"location":"model/#modelsaveas","title":"Model.saveAs","text":"<p>Saves the model to the specified file path. </p><pre><code>Model.saveAs(\"D://model.mcb\")\n</code></pre><p></p>"},{"location":"model/#modelimportmct","title":"Model.importMCT","text":"<p>Imports MCT data file in MIDAS CIVIL NX.</p> <pre><code>Model.importMCT('D:\\\\model.mct')\n</code></pre>"},{"location":"model/#modelimportjson","title":"Model.importJSON","text":"<p>Imports JSON data file in MIDAS CIVIL NX.</p> <pre><code>Model.importJSON('D:\\\\model.json')\n</code></pre>"},{"location":"model/#modelexportmct","title":"Model.exportMCT","text":"<p>Exports MIDAS CIVIL NX model as MCT file.</p> <pre><code>Model.exportMCT('D:\\\\model.mct')\n</code></pre>"},{"location":"model/#modelexportjson","title":"Model.exportJSON","text":"<p>Exports MIDAS CIVIL NX model as JSON file.</p> <pre><code>Model.exportJSON('D:\\\\model.json')\n</code></pre>"},{"location":"model/#modelinfo","title":"Model.info","text":"<p>Sets the project information. <code>info(project_name=\"\", revision=\"\", user=\"\", title=\"\")</code> </p> <p></p><pre><code>Model.info(project_name=\"Bridge Project\", revision=\"v1\", user=\"Sumit Shekhar\", title=\"Steel Bridge\")\n</code></pre> <p></p>"},{"location":"model/#modelunits","title":"Model.units","text":"<p>Sets the model's working units. <code>Model.units(force=\"KN\", length=\"M\", heat=\"BTU\", temp=\"C\")</code> </p>"},{"location":"model/#parameters","title":"Parameters","text":"<ul> <li><code>force</code>: KN, N, KGF, TONF, LBF, KIPS</li> <li><code>length</code>: M, CM, MM, FT, IN</li> <li><code>heat</code>: CAL, KCAL, J, KJ, BTU</li> <li><code>temp</code>: C, F</li> </ul> <pre><code>Model.units() # Set the SI unit system\nModel.units(force='TONF') # Set the Force unit to Tonf\n</code></pre> <p>NOTE :</p> <p>Make sure the units are in all caps</p>"},{"location":"model/#modeltype","title":"Model.type","text":"<p>Sets structure and mass type information for the model. <code>Model.type(strc_type=0, mass_type=1, gravity=0, mass_dir=1)</code> </p>"},{"location":"model/#parameters_1","title":"Parameters","text":"<ul> <li><code>strc_type</code>: \u00a0\u00a00 : 3D \u00a0\u00a0|\u00a0\u00a0  1 : X-Z \u00a0\u00a0|\u00a0\u00a0  2 : Y-Z  \u00a0\u00a0|\u00a0\u00a0  3 : X-Y  \u00a0\u00a0|\u00a0\u00a0  4 : RZ constraint  </li> <li><code>mass_type</code>: \u00a0\u00a01 : Lumped \u00a0\u00a0|\u00a0\u00a0 2 : Consistent  </li> <li><code>gravity</code>: \u00a0\u00a0 \u00a0\u00a0Gravity acceleration (l/t\u00b2)</li> <li><code>mass_dir</code>: \u00a0\u00a01 : Convert to XYZ \u00a0\u00a0|\u00a0\u00a0  2 : Convert to XY \u00a0\u00a0|\u00a0\u00a0  3 : Convert to Z only</li> </ul> <pre><code>Model.type()\n</code></pre>"},{"location":"model/#modelcreate","title":"Model.create","text":"<p>Creates all model components: materials, sections, nodes, elements, groups, and boundaries.  </p> <p>Equivalent to executing all the create commands individually </p><pre><code>Model.create()\n</code></pre><p></p>"},{"location":"model/#modelclear","title":"Model.clear","text":"<p>Clears all components in the model, including nodes, elements, materials, groups, loads, and boundaries.  </p> <p>Equivalent to executing all the delete commands individually </p><pre><code>Model.clear()\n</code></pre><p></p> <p>NOTE</p> <p>To save time, use individual delete commands eg. Node.delete() ; Element.delete()</p>"},{"location":"model/#modelanalyse","title":"Model.analyse","text":"<p>Checks whether a model has been analyzed. If not, saves it and then analysis.</p> <pre><code>Model.analyse()\n</code></pre>"},{"location":"model/#modelselect","title":"Model.select","text":"<p>Selects nodes and elements based on geometric criteria or material/section properties.</p> <p><code>Model.select(crit_1, crit_2, crit_3, st='a', en='a', tolerance=0)</code> </p>"},{"location":"model/#parameters_2","title":"Parameters","text":"<ul> <li><code>crit_1</code>: X, Y, Z, XY, YZ, ZX, USM (coordinate/system type)  </li> <li><code>crit_2</code>: Coordinate or Material ID  </li> <li><code>crit_3</code>: Coordinate or Section ID  </li> <li><code>st, en</code>: Start and end range  </li> <li><code>tolerance</code>: Tolerance for selection  </li> </ul>"},{"location":"model/#returns","title":"Returns","text":"<p>Dictionary with selected <code>'NODE'</code> and <code>'ELEM'</code> IDs.</p> <pre><code>nodes = Model.select('X',0,0)['NODE']\n</code></pre>"},{"location":"node/","title":"Node","text":""},{"location":"node/#node","title":"Node","text":"<p>Represents a 3D point in space with ID. It facilitates node creation, synchronization, and deletion.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d')\n</code></pre>"},{"location":"node/#constructor","title":"Constructor","text":"<p>Node(<code>x , y , z , id = 0 , group = '' , merge = 1</code>)</p>"},{"location":"node/#parameters","title":"Parameters","text":"<ul> <li><code>x, y, z</code>: Coordinates of the node.</li> <li><code>id (default=0)</code>: Manually assign an ID.   If 0, ID will be auto-assigned.</li> <li><code>group (default='')</code>: Structure group of the node (can be str or list eg. 'SG' or ['SG1','SG2'])</li> <li><code>merge (default=1)</code>: If enabled, checks for existing nodes and return their IDs.  No additional/duplicate node will be created.</li> </ul>"},{"location":"node/#object-attributes","title":"Object Attributes","text":"<p><code>X, Y, Z</code>: Coordinates of the node. <code>ID</code>: Unique identifier.</p>"},{"location":"node/#retrieve-node-by-id","title":"Retrieve Node by ID","text":"<p><code>nodeByID(id:int)</code> : Returns <code>NODE</code> object with given ID.</p>"},{"location":"node/#class-attributes","title":"Class Attributes","text":"<p>Node.nodes -&gt; List of all nodes.</p> <pre><code>n1 = Node(0,1,2,10)    # Create Node at 0,1,2 with ID = 10\nn2 = Node(0,3,4,20)    # Create Node at 0,3,4 with ID = 20\n\nfor n in Node.nodes:\n    print(f' NODE ID = {n.ID} | X = {n.X} , Y = {n.Y} , Z = {n.Z}')\n\n# Output :\n# NODE ID = 10 | X = 0 , Y = 1 , Z = 2\n# NODE ID = 20 | X = 0 , Y = 3 , Z = 4\n</code></pre>"},{"location":"node/#methods","title":"Methods","text":""},{"location":"node/#nodejson","title":"Node.json","text":"<p>Returns a JSON representation of all Nodes defined in python.</p> <pre><code>n1 = Node(0,1,2,10)    # Create Node at 0,1,2 with ID = 10\nn2 = Node(0,3,4,20)    # Create Node at 0,3,4 with ID = 20\n\nprint(Node.json())\n\n# Output :\n# {'Assign': {10: {'X': 0, 'Y': 1, 'Z': 2}, 20: {'X': 0, 'Y': 3, 'Z': 4}}}\n</code></pre>"},{"location":"node/#nodecreate","title":"Node.create","text":"<p>Sends the current node list to the Civil NX using a PUT request. New nodes are created and existing nodes(same ID) in Civil NX will be updated.</p> <pre><code>n1 = Node(0,1,2,10)    # Create Node at 0,1,2 with ID = 10\nn2 = Node(0,3,4,20)    # Create Node at 0,3,4 with ID = 20\n\nNode.create()\n</code></pre>"},{"location":"node/#nodeget","title":"Node.get","text":"<p>Fetches nodes from the Civil NX and return the JSON representation. -Here, Civil model had 2 nodes </p><pre><code>print(Node.get())\n# Output\n# {'NODE': {'1': {'X': 1, 'Y': 2, 'Z': 3}, '2': {'X': 1, 'Y': 3, 'Z': 2}}}\n</code></pre><p></p>"},{"location":"node/#nodesync","title":"Node.sync","text":"<p>Retrieves Node data from the Civil NX and rebuilds the internal node list. -Here, Civil model had 2 nodes </p><pre><code>Node.sync()\nfor n in Node.nodes:\n    print(f' NODE ID = {n.ID} | X = {n.X} , Y = {n.Y} , Z = {n.Z}')\n\n# Output\n# NODE ID = 1 | X = 1 , Y = 2 , Z = 3\n# NODE ID = 2 | X = 1 , Y = 3 , Z = 2\n</code></pre><p></p>"},{"location":"node/#nodedelete","title":"Node.delete","text":"<p>Deletes all node data from both Python and Civil NX.</p> <pre><code>Node.delete()\n</code></pre>"},{"location":"node/#examples","title":"Examples","text":""},{"location":"node/#1-sine-grid","title":"1. Sine Grid","text":"<pre><code>import math\nn=50\nfor j in range(n):\n    for i in range(n):\n        Node(i,j,2*(math.sin(i/5)+math.sin(j/5)),100*i+j+1)\n\nNode.create()\n</code></pre>"},{"location":"node/#2-sphere-nodes","title":"2. Sphere Nodes","text":"<pre><code>import math\nn=50\nR=5\nphi=0\nfor j in range(40):\n    for i in range(n):\n        theta = i*2*math.pi/n\n        Node(R*math.sin(theta)*math.cos(phi),R*math.cos(theta),R*math.sin(theta)*math.sin(phi))\n\n    phi+=math.pi/16\n\nNode.create()\n</code></pre>"},{"location":"node/#3-rotating-nodes","title":"3. Rotating Nodes","text":"<pre><code>import math\nn=50\nR=5\nphi=0\nfor j in range(40):\n    for i in range(n):\n        theta = i*2*math.pi/n\n        Node(R*math.sin(theta)*math.cos(phi),R*math.cos(theta),R*math.sin(theta)*math.sin(phi),i+1)\n\n    phi+=math.pi/16\n    Node.create()\n</code></pre>"},{"location":"AnalysisControl/","title":"Analysis Control","text":""},{"location":"AnalysisControl/#analysiscontrol","title":"AnalysisControl","text":"<p>The AnalysisControl class provides a unified interface to create different types of analysis control settings and includes nested classes for specific analysis control types.</p>"},{"location":"AnalysisControl/#nested-classes","title":"Nested Classes","text":"<ul> <li>MainControlData: Main control data for analysis settings</li> <li>PDelta: P-Delta analysis control for geometric nonlinear analysis</li> <li>Buckling: Buckling analysis control for eigenvalue buckling analysis</li> <li>EigenValue: Eigen vector analysis control for dynamic analysis</li> <li>Settlement: Settlement analysis control for settlement analysis</li> </ul>"},{"location":"AnalysisControl/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import*\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\") #Paste your Mapi Key\n\n# Create nodes and elements for the model\nfor j in range(6):\n    for i in range(2):\n        Node(i*10,j*2,0)\n        Node.create()\n\nj = 0\nfor k in range(6):   \n    for i in range(1,2):\n        Element.Beam(i +j,i+1 +j)\n        Element.create()\n    j = j + 2\n\n# Load Cases\nLoad_Case(\"D\",\"DL\")\nLoad_Case(\"L\",\"LL\") \n\nLoad_Case.create()\n\n# Main Control Data - Basic analysis control settings\nAnalysisControl.MainControlData(\n    ardc=True,\n    anrc=True,\n    iter=30,\n    tol=0.0005,\n    csecf=False,\n    trs=True,\n    crbar=False,\n    bmstress=True,\n    clats=False\n)\n\n# P-Delta Analysis Control\nAnalysisControl.PDelta(\n    iter=5,\n    tol=0.00001,\n    load_case_data=[[\"DL\", 1.0], [\"LL\", 0.5]]\n)\n\n# Buckling Analysis Control\nAnalysisControl.Buckling(\n    mode_num=8,\n    opt_positive=False,\n    load_factor_from=-2.0,\n    load_factor_to=5.0,\n    opt_consider_axial_only=True,\n    load_case_data=[[\"DL\", 1.0, 1], [\"LL\", 1.0, 0]]\n)\n\n# Eigen Value Analysis Control - LANCZOS method\nAnalysisControl.EigenValue(\n    analysis_type=\"LANCZOS\",\n    ifreq=15,\n    frequency_range=[0, 1600],\n    bstrum=True\n)\n\n# Settlement Analysis Control\nAnalysisControl.Settlement(\n    concurrent_calc=True,\n    concurrent_link=False\n)\n</code></pre>"},{"location":"AnalysisControl/01MainControlData/","title":"\u200e \u200e \u200e Main Control Data","text":""},{"location":"AnalysisControl/01MainControlData/#main-control-data","title":"Main Control Data","text":"<p>A nested class within AnalysisControl used to create main control data for analysis settings.</p>"},{"location":"AnalysisControl/01MainControlData/#constructor","title":"Constructor","text":"<p><code>AnalysisControl.MainControlData(ardc = True, anrc = True, iter = 20, tol = 0.001, csecf = False, trs = True, crbar = False, bmstress = False, clats = False)</code></p> <p>Creates main control data for analysis control settings.</p>"},{"location":"AnalysisControl/01MainControlData/#parameters","title":"Parameters","text":"<ul> <li><code>ardc (default=True)</code>: Auto Rotational DOF Constraint for Truss/Plane Stress/Solid Elements</li> <li><code>anrc (default=True)</code>: Auto Normal Rotation Constraint for Plate Elements  </li> <li><code>iter (default=20)</code>: Number of Iterations/Load Case (required)</li> <li><code>tol (default=0.001)</code>: Convergence Tolerance (required)</li> <li><code>csecf (default=False)</code>: Consider Section Stiffness Scale Factor for Stress Calculation</li> <li><code>trs (default=True)</code>: Transfer Reactions of Slave Node to the Master Node</li> <li><code>crbar (default=False)</code>: Consider Reinforcement for Section Stiffness Calculation</li> <li><code>bmstress (default=False)</code>: Calculate Equivalent Beam Stresses (Von-Mises and Max-Shear)</li> <li><code>clats (default=False)</code>: Change Local Axis of Tapered Section for Force/Stress Calculation</li> </ul>"},{"location":"AnalysisControl/01MainControlData/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the main control data entry (always 1).</li> <li><code>ARDC</code> (bool): Auto Rotational DOF Constraint setting.</li> <li><code>ANRC</code> (bool): Auto Normal Rotation Constraint setting.</li> <li><code>ITER</code> (int): Number of iterations per load case.</li> <li><code>TOL</code> (float): Convergence tolerance value.</li> <li><code>CSECF</code> (bool): Section stiffness scale factor consideration.</li> <li><code>TRS</code> (bool): Transfer reactions setting.</li> <li><code>CRBAR</code> (bool): Reinforcement consideration setting.</li> <li><code>BMSTRESS</code> (bool): Equivalent beam stresses calculation setting.</li> <li><code>CLATS</code> (bool): Local axis change for tapered sections setting.</li> </ul>"},{"location":"AnalysisControl/01MainControlData/#examples","title":"Examples","text":"<pre><code># Basic control data with default parameters\nAnalysisControl.MainControlData(iter=20, tol=0.001)\n\n# Control data with multiple options enabled\nAnalysisControl.MainControlData(\n    ardc=True,\n    anrc=True, \n    iter=30,\n    tol=0.0005,\n    csecf=True,\n    trs=True,\n    crbar=True,\n    bmstress=True,\n    clats=False\n)\n\n# High precision analysis settings\nAnalysisControl.MainControlData(\n    iter=50,\n    tol=0.00001,\n    bmstress=True\n)\n</code></pre>"},{"location":"AnalysisControl/02Pdelta/","title":"\u200e \u200e \u200e PDelta","text":""},{"location":"AnalysisControl/02Pdelta/#p-delta-analysis-control","title":"P-Delta Analysis Control","text":"<p>A nested class within AnalysisControl used to create P-Delta analysis control for geometric nonlinear analysis.</p>"},{"location":"AnalysisControl/02Pdelta/#constructor","title":"Constructor","text":"<p><code>AnalysisControl.PDelta(iter = 5, tol = 0.00001, load_case_data = None)</code></p> <p>Creates P-Delta analysis control settings for geometric nonlinear analysis.</p>"},{"location":"AnalysisControl/02Pdelta/#parameters","title":"Parameters","text":"<ul> <li><code>iter (default=5)</code>: Number of Iterations (required)</li> <li><code>tol (default=0.00001)</code>: Convergence Tolerance (required)</li> <li><code>load_case_data</code>: Load Cases with Scale Factors (required)</li> <li>List of load cases and their corresponding scale factors for P-Delta analysis</li> <li>Format: <code>[[\"LC1\", factor1], [\"LC2\", factor2], ...]</code></li> </ul>"},{"location":"AnalysisControl/02Pdelta/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the P-Delta control entry (always 1).</li> <li><code>ITER</code> (int): Number of iterations for P-Delta analysis.</li> <li><code>TOL</code> (float): Convergence tolerance for P-Delta analysis.</li> <li><code>LOAD_CASE_DATA</code> (list): Load cases with their scale factors.</li> </ul>"},{"location":"AnalysisControl/02Pdelta/#examples","title":"Examples","text":"<pre><code># Basic P-Delta analysis with single load case\nAnalysisControl.PDelta(\n    iter=5,\n    tol=0.00001,\n    load_case_data=[[\"DL\", 1.0]]\n)\n\n# P-Delta analysis with multiple load cases\n\nAnalysisControl.PDelta(\n    iter=15,\n    tol=0.0000001,\n    load_case_data=[\n        [\"DL\", 1.0],\n        [\"LL\", 0.75]\n    ]\n)\n</code></pre>"},{"location":"AnalysisControl/03Buckling/","title":"\u200e \u200e \u200e Buckling","text":""},{"location":"AnalysisControl/03Buckling/#buckling-analysis-control","title":"Buckling Analysis Control","text":"<p>A nested class within AnalysisControl used to create buckling analysis control for eigenvalue buckling analysis.</p>"},{"location":"AnalysisControl/03Buckling/#constructor","title":"Constructor","text":"<p><code>AnalysisControl.Buckling(mode_num = None, opt_positive = True, load_factor_from = 0, load_factor_to = 0, opt_sturm_seq = False, opt_consider_axial_only = False, load_case_data = None)</code></p> <p>Creates buckling analysis control settings for eigenvalue buckling analysis.</p>"},{"location":"AnalysisControl/03Buckling/#parameters","title":"Parameters","text":"<ul> <li><code>mode_num</code>: Number of Modes (required)</li> <li><code>opt_positive (default=True)</code>: Load Factor Range Type</li> <li><code>load_factor_from (default=0)</code>: Search From - Lower bound for load factor search range (only used when opt_positive is False)</li> <li><code>load_factor_to (default=0)</code>: Search To - Upper bound for load factor search range (only used when opt_positive is False)</li> <li><code>opt_sturm_seq (default=False)</code>: Check Sturm Sequence</li> <li><code>opt_consider_axial_only (default=False)</code>: Frame Geometric Stiffness Option</li> <li><code>load_case_data</code>: Load Cases with Scale Factors and Types (required)</li> <li>List of load cases with their scale factors and load types</li> <li>Format: <code>[[\"LC1\", factor1, load_type1], [\"LC2\", factor2, load_type2], ...]</code></li> <li>Load Type: <code>0</code>=Variable, <code>1</code>=Constant</li> </ul>"},{"location":"AnalysisControl/03Buckling/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the buckling control entry (always 1).</li> <li><code>MODE_NUM</code> (int): Number of modes to calculate.</li> <li><code>OPT_POSITIVE</code> (bool): Load factor range type setting.</li> <li><code>LOAD_FACTOR_FROM</code> (float): Lower bound for load factor search.</li> <li><code>LOAD_FACTOR_TO</code> (float): Upper bound for load factor search.</li> <li><code>OPT_STURM_SEQ</code> (bool): Sturm sequence check setting.</li> <li><code>OPT_CONSIDER_AXIAL_ONLY</code> (bool): Frame geometric stiffness option.</li> <li><code>LOAD_CASE_DATA</code> (list): Load cases with scale factors and types.</li> </ul>"},{"location":"AnalysisControl/03Buckling/#examples","title":"Examples","text":"<pre><code># Basic buckling analysis\nAnalysisControl.Buckling(\n    mode_num=5,\n    load_case_data=[[\"DL\", 1.0, 1]]\n)\n\n# Advanced buckling analysis with search range\nAnalysisControl.Buckling(\n    mode_num=8,\n    opt_positive=False,\n    load_factor_from=-2.0,\n    load_factor_to=5.0,\n    opt_consider_axial_only=True,\n    load_case_data=[\n        [\"DL\", 1.0, 1],\n        [\"LL\", 1.0, 0]\n    ]\n)\n</code></pre>"},{"location":"AnalysisControl/04EigenValue/","title":"\u200e \u200e \u200e EigenValue","text":""},{"location":"AnalysisControl/04EigenValue/#eigen-vector-analysis-control","title":"Eigen Vector Analysis Control","text":"<p>A nested class within AnalysisControl used to create eigen vector analysis control for dynamic analysis.</p>"},{"location":"AnalysisControl/04EigenValue/#constructor","title":"Constructor","text":"<p><code>AnalysisControl.EigenValue(analysis_type = None, ifreq = 1, iiter = 20, idim = 1, tol = 0, frequency_range = None, bstrum = False, bminmax = None, frmin = None, frmax = None, bincnl = False, ignum = None, load_vector = None, vritz = None)</code></p> <p>Creates eigen vector analysis control settings for dynamic analysis.</p>"},{"location":"AnalysisControl/04EigenValue/#parameters","title":"Parameters","text":"<ul> <li><code>analysis_type</code>: Type of Analysis (required)</li> <li><code>\"EIGEN\"</code>: Subspace Iteration</li> <li><code>\"LANCZOS\"</code>: Lanczos</li> <li><code>\"RITZ\"</code>: Ritz Vectors</li> </ul>"},{"location":"AnalysisControl/04EigenValue/#for-eigen","title":"For EIGEN:","text":"<ul> <li><code>ifreq (default=1)</code>: Number of Frequencies (required for EIGEN)</li> <li><code>iiter (default=20)</code>: Number of Iterations (required for EIGEN)</li> <li><code>idim (default=1)</code>: Subspace Dimension (optional for EIGEN)</li> <li><code>tol (default=0)</code>: Convergence Tolerance (optional for EIGEN)</li> </ul>"},{"location":"AnalysisControl/04EigenValue/#for-lanczos","title":"For LANCZOS:","text":"<ul> <li><code>frequency_range</code>: Frequency Range [frmin, frmax] (optional for LANCZOS)</li> <li>If provided, automatically sets bMINMAX=True</li> <li>Format: <code>[min_freq, max_freq]</code></li> <li><code>bstrum (default=False)</code>: Sturm Sequence Check (optional for LANCZOS)</li> </ul>"},{"location":"AnalysisControl/04EigenValue/#for-ritz","title":"For RITZ:","text":"<ul> <li><code>bincnl (default=False)</code>: Include GL-link Force Vectors (optional for RITZ)</li> <li><code>ignum</code>: Number of Generations for Each GL-link Force (required for RITZ)</li> <li><code>load_vector</code>: Load Cases in simple format (required for RITZ)</li> <li>Format: <code>[[\"case_or_acc\", nog], ...]</code></li> <li>For ground acceleration: <code>[\"ACCX\"/\"ACCY\"/\"ACCZ\", nog]</code></li> <li>For load case: <code>[\"case_name\", nog]</code></li> </ul>"},{"location":"AnalysisControl/04EigenValue/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the eigen value control entry (always 1).</li> <li><code>TYPE</code> (str): Type of analysis (\"EIGEN\", \"LANCZOS\", or \"RITZ\").</li> <li><code>iFREQ</code> (int): Number of frequencies.</li> <li><code>iITER</code> (int): Number of iterations.</li> <li><code>iDIM</code> (int): Subspace dimension.</li> <li><code>TOL</code> (float): Convergence tolerance.</li> <li><code>bMINMAX</code> (bool): Frequency range flag.</li> <li><code>FRMIN</code> (float): Minimum frequency.</li> <li><code>FRMAX</code> (float): Maximum frequency.</li> <li><code>bSTRUM</code> (bool): Sturm sequence check flag.</li> <li><code>bINCNL</code> (bool): Include GL-link force vectors flag.</li> <li><code>iGNUM</code> (int): Number of generations.</li> <li><code>vRITZ</code> (list): Ritz vector load cases.</li> </ul>"},{"location":"AnalysisControl/04EigenValue/#examples","title":"Examples","text":"<pre><code># EIGEN analysis - Subspace Iteration\nAnalysisControl.EigenValue(\n    analysis_type=\"EIGEN\",\n    ifreq=10,\n    iiter=20,\n    idim=1,\n    tol=1e-10\n)\n\n# LANCZOS analysis with frequency range\nAnalysisControl.EigenValue(\n    analysis_type=\"LANCZOS\",\n    ifreq=15,\n    frequency_range=[0, 1600],\n    bstrum=True\n)\n\n# LANCZOS analysis without frequency range\nAnalysisControl.EigenValue(\n    analysis_type=\"LANCZOS\",\n    ifreq=12,\n    bstrum=False\n)\n\n# RITZ analysis with load cases and ground acceleration\nAnalysisControl.EigenValue(\n    analysis_type=\"RITZ\",\n    bincnl=False,\n    ignum=1,\n    load_vector=[\n        [\"DL\", 1], \n        [\"ACCX\", 1],\n        [\"ACCY\", 1]\n    ]\n)\n</code></pre>"},{"location":"AnalysisControl/05Settlement/","title":"\u200e \u200e \u200e Settlement","text":""},{"location":"AnalysisControl/05Settlement/#settlement-analysis-control","title":"Settlement Analysis Control","text":"<p>A nested class within AnalysisControl used to create settlement analysis control for settlement analysis.</p>"},{"location":"AnalysisControl/05Settlement/#constructor","title":"Constructor","text":"<p><code>AnalysisControl.Settlement(concurrent_calc = True, concurrent_link = True)</code></p> <p>Creates settlement analysis control settings for settlement analysis.</p>"},{"location":"AnalysisControl/05Settlement/#parameters","title":"Parameters","text":"<ul> <li><code>concurrent_calc (default=True)</code>: Plate Concurrent Force (optional)</li> <li><code>True</code>: Active</li> <li><code>False</code>: Inactive</li> <li><code>concurrent_link (default=True)</code>: Elastic / General Links Concurrent Force (optional)</li> <li><code>True</code>: Active  </li> <li><code>False</code>: Inactive</li> </ul>"},{"location":"AnalysisControl/05Settlement/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the settlement control entry (always 1).</li> <li><code>CONCURRENT_CALC</code> (bool): Plate concurrent force setting.</li> <li><code>CONCURRENT_LINK</code> (bool): Elastic/General links concurrent force setting.</li> </ul>"},{"location":"AnalysisControl/05Settlement/#examples","title":"Examples","text":"<pre><code># Basic settlement analysis with default settings\nAnalysisControl.Settlement()\n\n\n# Settlement analysis with plate concurrent force only\nAnalysisControl.Settlement(\n    concurrent_calc=True,\n    concurrent_link=False\n)\n</code></pre>"},{"location":"AnalysisControl/BoundaryChangeAssignment/","title":"Boundary Change Assignment","text":""},{"location":"AnalysisControl/BoundaryChangeAssignment/#boundary-change-assignment","title":"Boundary Change Assignment","text":"<p>A class for managing Boundary Change Assignment.</p>"},{"location":"AnalysisControl/BoundaryChangeAssignment/#constructor","title":"Constructor","text":"<p><code>BoundaryChangeAssignment(bSPT = False, bSPR = False, bGSPR = False, bCGLINK = False, bSSSF = False, bPSSF = False, bRLS = False, bWSSF = False, bESSF = False, bCDOF = False, vBOUNDARY = None, ST_load_assignments = None, MV = None, SM = None, THRSEV = None, PO = None, THNS = None, ULAT = None)</code></p> <p>Creates a boundary change assignment for managing boundary conditions and load analysis settings. Command: <code>/db/bcct</code></p>"},{"location":"AnalysisControl/BoundaryChangeAssignment/#parameters","title":"Parameters","text":""},{"location":"AnalysisControl/BoundaryChangeAssignment/#support-options","title":"Support Options","text":"<ul> <li><code>bSPT (default=False)</code>: Support</li> <li><code>bSPR (default=False)</code>: Point Spring Support  </li> <li><code>bGSPR (default=False)</code>: General Spring Support</li> <li><code>bCGLINK (default=False)</code>: Change General Link Property</li> <li><code>bSSSF (default=False)</code>: Section Stiffness Scale Factor</li> <li><code>bPSSF (default=False)</code>: Plate Stiffness Scale Factor</li> <li><code>bRLS (default=False)</code>: Beam End Release</li> <li><code>bWSSF (default=False)</code>: Wall Stiffness Scale Factor</li> <li><code>bESSF (default=False)</code>: Element Stiffness Scale Factor</li> <li><code>bCDOF (default=False)</code>: Constrain DOF associated with specified displacements/Settlements by boundary group combinations</li> </ul>"},{"location":"AnalysisControl/BoundaryChangeAssignment/#boundary-settings","title":"Boundary Settings","text":"<ul> <li><code>vBOUNDARY (default=None)</code>: List of boundary assignments in format <code>[[\"L1\", \"BG2\"], [\"L2\", \"BG1\"]]</code></li> </ul>"},{"location":"AnalysisControl/BoundaryChangeAssignment/#load-analysis-settings","title":"Load Analysis Settings","text":"<ul> <li><code>ST_load_assignments (default=None)</code>: List of ST type load cases with BGCNAME assignments in format <code>[[\"Self-weight\", \"L1\"], [\"SIDL\", \"UNCHANGED\"]]</code></li> </ul>"},{"location":"AnalysisControl/BoundaryChangeAssignment/#load-analysis-settings-for-other-types","title":"Load Analysis Settings for Other Types","text":"<ul> <li><code>MV (default=None)</code>: Boundary group name for Moving Load analysis</li> <li><code>SM (default=None)</code>: Boundary group name for Settlement analysis  </li> <li><code>THRSEV (default=None)</code>: Boundary group name for Time History Response Spectrum Envelope analysis</li> <li><code>PO (default=None)</code>: Boundary group name for Pushover analysis</li> <li><code>THNS (default=None)</code>: Boundary group name for Time History Nonlinear Static analysis</li> <li><code>ULAT (default=None)</code>: Boundary group name for User Defined Load analysis</li> </ul>"},{"location":"AnalysisControl/BoundaryChangeAssignment/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the boundary change assignment (always 1).</li> <li><code>bSPT</code> (bool): Support setting.</li> <li><code>bSPR</code> (bool): Point Spring Support setting.</li> <li><code>bGSPR</code> (bool): General Spring Support setting.</li> <li><code>bCGLINK</code> (bool): Change General Link Property setting.</li> <li><code>bSSSF</code> (bool): Section Stiffness Scale Factor setting.</li> <li><code>bPSSF</code> (bool): Plate Stiffness Scale Factor setting.</li> <li><code>bRLS</code> (bool): Beam End Release setting.</li> <li><code>bWSSF</code> (bool): Wall Stiffness Scale Factor setting.</li> <li><code>bESSF</code> (bool): Element Stiffness Scale Factor setting.</li> <li><code>bCDOF</code> (bool): Constrain DOF setting.</li> <li><code>vBOUNDARY</code> (list): Processed boundary data in JSON structure format.</li> <li><code>vLOADANAL</code> (list): Processed load analysis data combining user input with system load cases.</li> </ul>"},{"location":"AnalysisControl/BoundaryChangeAssignment/#class-attributes","title":"Class Attributes","text":"<ul> <li><code>data</code> (list): Static list containing all BoundaryChangeAssignment instances.</li> </ul>"},{"location":"AnalysisControl/BoundaryChangeAssignment/#examples","title":"Examples","text":"<pre><code># Basic boundary change assignment\nBoundaryChangeAssignment(\n    bSPT=True,\n    bCDOF=True,\n    vBOUNDARY=[[\"L1\", \"BG2\"], [\"L2\", \"BG1\"]],\n    ST_load_assignments=[[\"Self-weight\", \"L1\"]],\n    MV=\"L1\"\n)\n\n# Complex assignment with multiple load types\nBoundaryChangeAssignment(\n    bSPT=True,\n    bSPR=False,\n    bGSPR=False,\n    vBOUNDARY=[[\"L1\", \"BG2\"], [\"L2\", \"BG1\"]],\n    ST_load_assignments=[[\"Self-weight\", \"L1\"], [\"SIDL\", \"L2\"]],\n    MV=\"L1\",\n    SM=\"L2\",\n    THRSEV=\"L1\"\n)\n\n# Assignment with multiple support options\nBoundaryChangeAssignment(\n    bSPT=True,\n    bSPR=True,\n    bGSPR=True,\n    bCDOF=True,\n    vBOUNDARY=[[\"Construction1\", \"BoundaryGroup1\"], [\"Construction2\", \"BoundaryGroup2\"]],\n    ST_load_assignments=[[\"Dead Load\", \"Construction1\"], [\"Live Load\", \"Construction2\"]],\n    MV=\"Construction1\",\n    SM=\"UNCHANGED\",\n    PO=\"Construction2\"\n)\n</code></pre>"},{"location":"Boundary/","title":"Boundary","text":""},{"location":"Boundary/#boundary","title":"Boundary","text":"<p>The module provides functionality to create, manage, and synchronize boundary conditions including supports, elastic links, and rigid links in the model.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicmciO252k81571d')\n</code></pre>"},{"location":"Boundary/#methods","title":"Methods","text":""},{"location":"Boundary/#boundarycreate","title":"Boundary.create","text":"<p>Creates all defined boundary conditions (Supports, Elastic Links, Rigid Links, Points springs and Multi-Linear functions) in Civil NX.</p> <pre><code>Boundary.create()\n</code></pre>"},{"location":"Boundary/#boundarydelete","title":"Boundary.delete","text":"<p>Deletes all boundary conditions (Supports, Elastic Links, Rigid Links, Points springs and Multi-Linear functions) from both Python and Civil NX.</p> <pre><code>Boundary.delete()\n</code></pre>"},{"location":"Boundary/#boundarysync","title":"Boundary.sync","text":"<p>Synchronizes all boundary conditions (Supports, Elastic Links, Rigid Links, Points springs and Multi-Linear functions) from Civil NX to Python.</p> <pre><code>Boundary.sync()\n</code></pre>"},{"location":"Boundary/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import *\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\") # Paste your MAPI Key\n\n#Create Beam and Node\nfor j in range(6):\n    for i in range(2):\n        Node(i*10,j*2,0)\n        Node.create()\n\nfor j in range(6):\n    for i in range(2):\n        Node(i*10,j*2,-3)\n        Node.create()\n\nj = 0\nfor k in range(6):   \n    for i in range(1,2):\n        Element.Beam(i +j,i+1 +j)\n        Element.create()\n    j = j + 2\n\n#Support\n\nBoundary.Support(13,\"fix\")\nBoundary.Support(14,\"1111111\")\n\nBoundary.Support(15,\"fix\")\nBoundary.Support(16,\"1111000\")\n\nBoundary.Support(17,\"pin\")\nBoundary.Support(18,\"roller\")\n\nBoundary.Support(19,\"1110000\")\nBoundary.Support(20,\"1111000\")\n\nBoundary.Support(21,\"free\")\nBoundary.Support(22,\"roller\")\n\nBoundary.Support(23,\"1110101\")\nBoundary.Support(24,\"0101011\")\n\nBoundary.Support.create()\n\n#Elastic Link\n\n#Create General Elastic Link    \nBoundary.ElasticLink(1, 13, \"\", 1, \"GEN\", 1000, 1000, 1000, 100, 100, 100)\nBoundary.ElasticLink(2, 14, \"\", 2, \"GEN\", 1000, 1000, 1000, 100, 100, 100)\n\n#Rigid Link\n\nBoundary.ElasticLink(3, 15, \"\", 3, \"RIGID\")\n\n#Create Saddle type Link    \n\nBoundary.ElasticLink(4, 16, \"\", 4, \"SADDLE\")\n\n#Tension-Onl &amp; Compression-Only Link    \nBoundary.ElasticLink(5, 17, \"\", 5, \"TENS\",500)\nBoundary.ElasticLink(6, 18, \"\", 6, \"COMP\",600)\n\n\n\n# Rail track interaction link\nBoundary.ElasticLink(7, 19, \"\", 7, \"RAIL INTERACT\", dir=\"Dy\", func_id=1)\n\n#Multi-linear link\nBoundary.ElasticLink(8, 20, \"\", 8, \"MULTI LINEAR\", dir=\"Dy\", func_id=1)\n# Note: Before running this code, the Rail Interaction &amp; Force-Deformation function must be created in Civil NX to avoid any errors.\n\n#Create all the Elastic link\nBoundary.ElasticLink.create()\n\n\n#Rigid Link\n\nBoundary.RigidLink(9,[21],\"\",1,111111)\nBoundary.RigidLink(10,[22,24],\"\",2,111111)\n\nBoundary.RigidLink.create()\n\n\nprint(\"All boundary conditions created successfully!\")\n</code></pre>"},{"location":"Boundary/01supports/","title":"\u200e \u200e \u200e Supports","text":""},{"location":"Boundary/01supports/#support","title":"Support","text":"<p>A nested class within Boundary used to create nodal supports with various constraint conditions.</p>"},{"location":"Boundary/01supports/#constructor","title":"Constructor","text":"<p><code>Boundary.Support(node, constraint, group = \"\")</code></p> <p>Creates support conditions at specified nodes with defined constraints.</p>"},{"location":"Boundary/01supports/#parameters","title":"Parameters","text":"<ul> <li><code>node</code>: Node ID where support is applied</li> <li><code>constraint</code>: Constraint definition (string of 1s and 0s, or predefined keywords)</li> <li><code>group (default=\"\")</code>: Boundary group name</li> </ul>"},{"location":"Boundary/01supports/#constraint-options","title":"Constraint Options","text":"<ul> <li>String format: \"1110000\" (7 characters for DOF: DX, DY, DZ, RX, RY, RZ, WARP)</li> <li>Predefined keywords:</li> <li><code>\"pin\"</code>: Pinned support (translational constraints only)</li> <li><code>\"fix\"</code>: Fixed support (all DOF constrained)</li> <li><code>\"roller\"</code>: Roller support (vertical constraint only)</li> </ul>"},{"location":"Boundary/01supports/#class-attributes","title":"Class Attributes","text":"<p>Boundary.Support.sups -&gt; List of all support instances.</p>"},{"location":"Boundary/01supports/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NODE</code> (int): The node number where the support is applied.</li> <li><code>CONST</code> (str): A 7-character string representing the constraint conditions (Dx, Dy, Dz, Rx, Ry, Rz, Rw). '1' for fixed, '0' for free.</li> <li><code>GROUP</code> (str): The name of the boundary group.</li> <li><code>ID</code> (int): The ID of the support entry.</li> </ul>"},{"location":"Boundary/01supports/#methods","title":"Methods","text":""},{"location":"Boundary/01supports/#json","title":"json","text":"<p>Returns JSON representation of all supports.</p> <pre><code>sup1 = Boundary.Support(101, \"fix\")\nprint(Boundary.Support.json())\n</code></pre>"},{"location":"Boundary/01supports/#create","title":"create","text":"<p>Sends support data to Civil NX.</p> <pre><code>Boundary.Support.create()\n</code></pre>"},{"location":"Boundary/01supports/#get","title":"get","text":"<p>Fetches support data from Civil NX.</p> <pre><code>print(Boundary.Support.get())\n</code></pre>"},{"location":"Boundary/01supports/#sync","title":"sync","text":"<p>Synchronizes supports from Civil NX to Python.</p> <pre><code>Boundary.Support.sync()\n</code></pre>"},{"location":"Boundary/01supports/#delete","title":"delete","text":"<p>Deletes all supports from both Python and Civil NX.</p> <pre><code>Boundary.Support.delete()\n</code></pre>"},{"location":"Boundary/01supports/#examples","title":"Examples","text":"<pre><code>#Create Beam\nfor i in range(3):\n    Node(i*10,0,0)\n    Node.create()\n\nElement.Beam(1,2)\nElement.Beam(2,3)\nElement.create()\n\n#Apply Support\n\nBoundary.Support(1,\"1111111\",\"\") \nBoundary.Support(3,\"pin\",\"\") \n\n#create Support \nBoundary.Support.create()\n\n#Note: \"\" represents the absence of a boundary group. By default, it is set to \"\". \n# Therefore, the following two commands are equivalent:Boundary.Support(3, \"pin\") and Boundary.Support(3, \"pin\", \"\").\n</code></pre>"},{"location":"Boundary/02elink/","title":"\u200e \u200e \u200e Elastic Link","text":""},{"location":"Boundary/02elink/#elastic-link","title":"Elastic Link","text":"<p>A nested class within Boundary used to create elastic connections between nodes with various spring properties and link types.</p>"},{"location":"Boundary/02elink/#constructor","title":"Constructor","text":"<p><code>Boundary.ElasticLink(i_node, j_node, group = \"\", id = None, link_type = \"GEN\", sdx = 0, sdy = 0, sdz = 0, srx = 0, sry = 0, srz = 0, shear = False, dr_y = 0.5, dr_z = 0.5, beta_angle = 0, dir = \"Dy\", func_id = 1, distance_ratio = 0)</code></p> <p>Creates elastic links between two nodes with specified spring properties and behavior.</p>"},{"location":"Boundary/02elink/#parameters","title":"Parameters","text":"<ul> <li><code>i_node</code>: First node ID</li> <li><code>j_node</code>: Second node ID</li> <li><code>group (default=\"\")</code>: Boundary group name</li> <li><code>id (default=None)</code>: Manual ID assignment (auto-assigned if None)</li> <li><code>link_type (default=\"GEN\")</code>: Type of elastic link</li> <li><code>sdx, sdy, sdz (default=0)</code>: Translational spring stiffness in X, Y, Z directions</li> <li><code>srx, sry, srz (default=0)</code>: Rotational spring stiffness about X, Y, Z axes</li> <li><code>shear (default=False)</code>: Consider shear effects</li> <li><code>dr_y, dr_z (default=0.5)</code>: Distance ratios for Y and Z directions</li> <li><code>beta_angle (default=0)</code>: Rotation angle in degrees</li> <li><code>dir (default=\"Dy\")</code>: Direction for specialized link types</li> <li><code>func_id (default=1)</code>: Function ID for specialized link types</li> <li><code>distance_ratio (default=0)</code>: Distance ratio for specialized link types</li> </ul>"},{"location":"Boundary/02elink/#link-types","title":"Link Types","text":"<ul> <li>\"GEN\": General elastic link with full stiffness matrix</li> <li>\"RIGID\": Rigid connection (infinite stiffness)</li> <li>\"TENS\": Tension-only link (works only in tension)</li> <li>\"COMP\": Compression-only link (works only in compression)</li> <li>\"MULTI LINEAR\": Multi-linear behavior with function definition</li> <li>\"SADDLE\": Saddle-type connection</li> <li>\"RAIL INTERACT\": Rail track interaction link</li> </ul>"},{"location":"Boundary/02elink/#class-attributes","title":"Class Attributes","text":"<p>Boundary.ElasticLink.links -&gt; List of all elastic link instances.</p>"},{"location":"Boundary/02elink/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>I_NODE</code> (int): The first node ID of the link.</li> <li><code>J_NODE</code> (int): The second node ID of the link.</li> <li><code>GROUP_NAME</code> (str): The name of the boundary group.</li> <li><code>LINK_TYPE</code> (str): The type of elastic link (e.g., \"GEN\", \"RIGID\", \"TENS\").</li> <li><code>ANGLE</code> (float): The beta angle (rotation) in degrees.</li> <li><code>SDx</code> (float): Spring stiffness in the X direction.</li> <li><code>SDy</code> (float): Spring stiffness in the Y direction.</li> <li><code>SDz</code> (float): Spring stiffness in the Z direction.</li> <li><code>SRx</code> (float): Rotational stiffness about the X axis.</li> <li><code>SRy</code> (float): Rotational stiffness about the Y axis.</li> <li><code>SRz</code> (float): Rotational stiffness about the Z axis.</li> <li><code>bSHEAR</code> (bool): Flag to consider shear effects.</li> <li><code>DR_Y</code> (float): Distance ratio for shear effects in the Y direction.</li> <li><code>DR_Z</code> (float): Distance ratio for shear effects in the Z direction.</li> <li><code>Direction</code> (str): Direction for \"MULTI LINEAR\" or \"RAIL INTERACT\" links (e.g., \"Dy\").</li> <li><code>Function_ID</code> (int): Function ID for \"MULTI LINEAR\" or \"RAIL INTERACT\" links.</li> <li><code>Distance_ratio</code> (float): Distance ratio for \"MULTI LINEAR\" or \"RAIL INTERACT\" links.</li> <li><code>ID</code> (int): The ID of the elastic link.</li> </ul>"},{"location":"Boundary/02elink/#methods","title":"Methods","text":""},{"location":"Boundary/02elink/#json","title":"json","text":"<p>Returns JSON representation of all elastic links.</p> <pre><code>link1 = Boundary.ElasticLink(1, 2, \"Group1\", 1, \"GEN\", 1000, 1000, 1000)\nprint(Boundary.ElasticLink.json())\n</code></pre>"},{"location":"Boundary/02elink/#create","title":"create","text":"<p>Sends elastic link data to Civil NX.</p> <pre><code>Boundary.ElasticLink.create()\n</code></pre>"},{"location":"Boundary/02elink/#get","title":"get","text":"<p>Fetches elastic link data from Civil NX.</p> <pre><code>print(Boundary.ElasticLink.get())\n</code></pre>"},{"location":"Boundary/02elink/#sync","title":"sync","text":"<p>Synchronizes elastic links from Civil NX to Python.</p> <pre><code>Boundary.ElasticLink.sync()\n</code></pre>"},{"location":"Boundary/02elink/#delete","title":"delete","text":"<p>Deletes all elastic links from both Python and Civil NX.</p> <pre><code>Boundary.ElasticLink.delete()\n</code></pre>"},{"location":"Boundary/02elink/#examples","title":"Examples","text":""},{"location":"Boundary/02elink/#general-elastic-link","title":"General Elastic Link","text":"<pre><code>#General Elastic Link Example\n\n#Create Beam and Node\nfor j in range(2):\n    for i in range(2):\n        Node(i*10,0,-1*j)\n        Node.create()\nElement.Beam(1,2)\nElement.create()\n\n#Create General Elastic Link    \nBoundary.ElasticLink(1, 3, \"\", 1, \"GEN\", 1000, 1000, 1000, 100, 100, 100)\nBoundary.ElasticLink.create()\n</code></pre>"},{"location":"Boundary/02elink/#rigid-link","title":"Rigid Link","text":"<pre><code>#Rigid Link Example\n\n#Create Beam and Node\nfor j in range(2):\n    for i in range(2):\n        Node(i*10,0,-1*j)\n        Node.create()\nElement.Beam(1,2)\nElement.create()\n\n#Create Rigid Link    \nBoundary.ElasticLink(2, 4, \"\", 1, \"RIGID\")\nBoundary.ElasticLink.create()\n</code></pre>"},{"location":"Boundary/02elink/#tension-only-compression-only-link","title":"Tension-Only &amp; Compression-Only Link","text":"<pre><code>#Tension-Only &amp; Compression-Only Link Example\n\n#Create Beam and Node\nfor j in range(2):\n    for i in range(2):\n        Node(i*10,0,-1*j)\n        Node.create()\nElement.Beam(1,2)\nElement.create()\n\n#Tension-Onl &amp; Compression-Only Link    \nBoundary.ElasticLink(1, 3, \"\", 1, \"TENS\",500)\nBoundary.ElasticLink(2, 4, \"\", 2, \"COMP\",600)\nBoundary.ElasticLink.create()\n</code></pre>"},{"location":"Boundary/02elink/#saddle-type-link","title":"Saddle type Link","text":"<pre><code>#Saddle type Link Example\n\n#Create Beam and Node\nfor j in range(2):\n    for i in range(2):\n        Node(i*10,0,-1*j)\n        Node.create()\nElement.Beam(1,2)\nElement.create()\n\n\n#Create Saddle type Link    \nBoundary.ElasticLink(1, 3, \"\", 1, \"SADDLE\")\nBoundary.ElasticLink.create()\n</code></pre>"},{"location":"Boundary/02elink/#multi-linear-link","title":"Multi-Linear Link","text":"<pre><code>#Multi-linear link Example\n\n#Create Beam and Node\nfor j in range(2):\n    for i in range(2):\n        Node(i*10,0,-1*j)\n        Node.create()\nElement.Beam(1,2)\nElement.create()\n\n\n# Multi-linear link\nBoundary.ElasticLink(1, 3, \"\", 1, \"MULTI LINEAR\", dir=\"Dy\", func_id=1)\nBoundary.ElasticLink.create()\n\n#Note: Before running this code, the Force-Deformation function must be created in Civil NX to avoid any errors.\n</code></pre>"},{"location":"Boundary/02elink/#rail-interaction-link","title":"Rail Interaction Link","text":"<pre><code># Rail track interaction link Example\n\n#Create Beam and Node\nfor j in range(2):\n    for i in range(2):\n        Node(i*10,0,-1*j)\n        Node.create()\nElement.Beam(1,2)\nElement.create()\n\n\n# Rail track interaction link\nBoundary.ElasticLink(2, 4, \"\", 1, \"RAIL INTERACT\", dir=\"Dy\", func_id=1)\nBoundary.ElasticLink.create()\n\n#Note: Before running this code, the Rail Interaction function must be created in Civil NX to avoid any errors.\n</code></pre>"},{"location":"Boundary/03rlink/","title":"\u200e \u200e \u200e Rigid Link","text":""},{"location":"Boundary/03rlink/#rigid-link","title":"Rigid Link","text":"<p>A nested class within Boundary used to create rigid connections between a master node and multiple slave nodes.</p>"},{"location":"Boundary/03rlink/#constructor","title":"Constructor","text":"<p><code>Boundary.RigidLink(master_node, slave_nodes, group = \"\", id = None, dof = 111111)</code></p> <p>Creates rigid links connecting a master node to one or more slave nodes with specified degrees of freedom.</p>"},{"location":"Boundary/03rlink/#parameters","title":"Parameters","text":"<ul> <li><code>master_node</code>: Master node ID (controls the motion)</li> <li><code>slave_nodes</code>: List of slave node IDs (follow master node motion)</li> <li><code>group (default=\"\")</code>: Boundary group name</li> <li><code>id (default=None)</code>: Manual ID assignment (auto-assigned if None)</li> <li><code>dof (default=111111)</code>: Degrees of freedom constraint (6-digit integer)</li> </ul>"},{"location":"Boundary/03rlink/#dof-constraint-format","title":"DOF Constraint Format","text":"<ul> <li>6-digit format: DXDYDZ RXRYRZ (e.g., 111111 for all DOF, 111000 for translations only)</li> <li>1: Constrained (rigid connection)</li> <li>0: Free (no constraint)</li> </ul>"},{"location":"Boundary/03rlink/#class-attributes","title":"Class Attributes","text":"<p>Boundary.RigidLink.links -&gt; List of all rigid link instances.</p>"},{"location":"Boundary/03rlink/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>M_NODE</code> (int): The master node ID of the rigid link.</li> <li><code>S_NODE</code> (list): A list of slave node IDs.</li> <li><code>GROUP_NAME</code> (str): The name of the boundary group.</li> <li><code>DOF</code> (int): A 6-digit integer representing the degrees of freedom constrained (Dx, Dy, Dz, Rx, Ry, Rz). '1' for constrained.</li> <li><code>ID</code> (int): The ID of the rigid link.</li> </ul>"},{"location":"Boundary/03rlink/#methods","title":"Methods","text":""},{"location":"Boundary/03rlink/#json","title":"json","text":"<p>Returns JSON representation of all rigid links.</p> <pre><code>rlink1 = Boundary.RigidLink(1, [2, 3], \"Group1\", 1, 111111)\nprint(Boundary.RigidLink.json())\n</code></pre>"},{"location":"Boundary/03rlink/#create","title":"create","text":"<p>Sends rigid link data to Civil NX.</p> <pre><code>Boundary.RigidLink.create()\n</code></pre>"},{"location":"Boundary/03rlink/#get","title":"get","text":"<p>Fetches rigid link data from Civil NX.</p> <pre><code>print(Boundary.RigidLink.get())\n</code></pre>"},{"location":"Boundary/03rlink/#sync","title":"sync","text":"<p>Synchronizes rigid links from Civil NX to Python.</p> <pre><code>Boundary.RigidLink.sync()\n</code></pre>"},{"location":"Boundary/03rlink/#delete","title":"delete","text":"<p>Deletes all rigid links from both Python and Civil NX.</p> <pre><code>Boundary.RigidLink.delete()\n</code></pre>"},{"location":"Boundary/03rlink/#examples","title":"Examples","text":""},{"location":"Boundary/03rlink/#single-slave-node","title":"Single Slave Node","text":"<pre><code># Create nodes\nfor i in range(5):\n    Node(i*5, 0, 0)\nNode.create()\n\n# Rigid link between master and single slave\nrlink1 = Boundary.RigidLink(1, [2], \"\", 1, 111111)\nBoundary.RigidLink.create()\n</code></pre>"},{"location":"Boundary/03rlink/#multiple-slave-nodes","title":"Multiple Slave Nodes","text":"<pre><code># Create nodes\nfor i in range(5):\n    Node(i*5, 0, 0)\nNode.create()\n\n# Rigid link with multiple slave nodes\nrlink2 = Boundary.RigidLink(3, [4, 5], \"\", 2, 111111)\nBoundary.RigidLink.create()\n</code></pre>"},{"location":"Boundary/03rlink/#partial-dof-constraint","title":"Partial DOF Constraint","text":"<pre><code># Create nodes\nfor i in range(5):\n    Node(i*5, 0, 0)\nNode.create()\n\n# Rigid link with only translational constraints\nrlink3 = Boundary.RigidLink(1, [2, 3], \"\", 3, 111000)\nBoundary.RigidLink.create()\n</code></pre>"},{"location":"Boundary/04PointSpring/","title":"\u200e \u200e \u200e Point Spring","text":""},{"location":"Boundary/04PointSpring/#point-spring","title":"Point Spring","text":"<p>A nested class within Boundary used to create point springs at nodes with various spring properties and behaviors.</p>"},{"location":"Boundary/04PointSpring/#constructor","title":"Constructor","text":"<p><code>Boundary.PointSpring(node, spring_type = \"LINEAR\", group = \"\", id = None, stiffness = None, fixed_option = None, damping = None, direction = \"Dx+\", normal_vector = None, function_id = 1)</code></p> <p>Creates point springs at specified nodes with defined spring properties and behavior types.</p>"},{"location":"Boundary/04PointSpring/#parameters","title":"Parameters","text":"<ul> <li><code>node</code>: Node ID where spring is applied</li> <li><code>spring_type (default=\"LINEAR\")</code>: Type of spring behavior</li> <li><code>group (default=\"\")</code>: Boundary group name</li> <li><code>id (default=None)</code>: Manual ID assignment (auto-assigned if None)</li> <li><code>stiffness (default=None)</code>: Spring stiffness values or single value</li> <li><code>fixed_option (default=None)</code>: Fixed option array for LINEAR type</li> <li><code>damping (default=None)</code>: Damping values (enables damping if provided)</li> <li><code>direction (default=\"Dx+\")</code>: Direction string for spring action</li> <li><code>normal_vector (default=None)</code>: Normal vector [x, y, z] when direction is \"Vector\"</li> <li><code>function_id (default=1)</code>: Function ID for MULTI type springs</li> </ul>"},{"location":"Boundary/04PointSpring/#spring-types","title":"Spring Types","text":"<ul> <li>\"LINEAR\": Linear spring with full 6-DOF stiffness matrix</li> <li>\"COMP\": Compression-only spring </li> <li>\"TENS\": Tension-only spring </li> <li>\"MULTI\": Multi-linear behavior with function definition</li> </ul>"},{"location":"Boundary/04PointSpring/#direction-options","title":"Direction Options","text":"<ul> <li>\"Dx+\", \"Dx-\": Positive/Negative X direction</li> <li>\"Dy+\", \"Dy-\": Positive/Negative Y direction</li> <li>\"Dz+\", \"Dz-\": Positive/Negative Z direction</li> <li>\"Vector\": Custom vector direction (requires normal_vector)</li> </ul>"},{"location":"Boundary/04PointSpring/#class-attributes","title":"Class Attributes","text":"<p>Boundary.PointSpring.springs -&gt; List of all point spring instances.</p>"},{"location":"Boundary/04PointSpring/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NODE</code> (int): The node ID where the spring is applied.</li> <li><code>TYPE</code> (str): The type of spring (e.g., \"LINEAR\", \"COMP\", \"TENS\", \"MULTI\").</li> <li><code>GROUP_NAME</code> (str): The name of the boundary group.</li> <li><code>DIR</code> (int): Direction integer (converted from direction string).</li> <li><code>ID</code> (int): The ID of the point spring.</li> </ul> <p>For LINEAR type: </p> <ul> <li><code>SDR</code> (list): Spring stiffness values [SDx, SDy, SDz, SRx, SRy, SRz].    </li> <li><code>F_S</code> (list): Fixed option array [Boolean, 6].   </li> <li><code>DAMPING</code> (bool): Flag indicating if damping is enabled.    </li> <li><code>Cr</code> (list): Damping values [Cx, Cy, Cz, CRx, CRy, CRz].</li> </ul> <p>For COMP/TENS types: </p> <ul> <li><code>STIFF</code> (float): Spring stiffness value.   </li> <li><code>DV</code> (list): Normal vector [x, y, z].</li> </ul> <p>For MULTI type: </p> <ul> <li><code>DV</code> (list): Normal vector [x, y, z].   </li> <li><code>FUNCTION</code> (int): Function ID for multi-linear behavior.</li> </ul>"},{"location":"Boundary/04PointSpring/#methods","title":"Methods","text":""},{"location":"Boundary/04PointSpring/#json","title":"json","text":"<p>Returns JSON representation of all point springs.</p> <pre><code>spring1 = Boundary.PointSpring(1, \"LINEAR\", \"\", stiffness=[1000, 1000, 1000, 100, 100, 100])\nprint(Boundary.PointSpring.json())\n</code></pre>"},{"location":"Boundary/04PointSpring/#create","title":"create","text":"<p>Sends point spring data to Civil NX.</p> <pre><code>Boundary.PointSpring.create()\n</code></pre>"},{"location":"Boundary/04PointSpring/#get","title":"get","text":"<p>Fetches point spring data from Civil NX.</p> <pre><code>print(Boundary.PointSpring.get())\n</code></pre>"},{"location":"Boundary/04PointSpring/#sync","title":"sync","text":"<p>Synchronizes point springs from Civil NX to Python.</p> <pre><code>Boundary.PointSpring.sync()\n</code></pre>"},{"location":"Boundary/04PointSpring/#delete","title":"delete","text":"<p>Deletes all point springs from both Python and Civil NX.</p> <pre><code>Boundary.PointSpring.delete()\n</code></pre>"},{"location":"Boundary/04PointSpring/#examples","title":"Examples","text":""},{"location":"Boundary/04PointSpring/#linear-spring","title":"Linear Spring","text":"<pre><code># Linear Spring Example\n\n# Create Node\nNode(0, 0, 0)\nNode.create()\n\n# Create Linear Point Spring with full stiffness matrix\nBoundary.PointSpring(1, \"LINEAR\", \"\", stiffness=[1000, 1000, 1000, 100, 100, 100])\nBoundary.PointSpring.create()\n</code></pre>"},{"location":"Boundary/04PointSpring/#linear-spring-with-damping","title":"Linear Spring with Damping","text":"<pre><code># Linear Spring with Damping Example\n\n# Create Node\nNode(0, 0, 0)\nNode.create()\n\n# Create Linear Point Spring with damping\nBoundary.PointSpring(1, \"LINEAR\", \"\", \n                    stiffness=[1000, 1000, 1000, 100, 100, 100],\n                    damping=[10, 10, 10, 1, 1, 1])\nBoundary.PointSpring.create()\n</code></pre>"},{"location":"Boundary/04PointSpring/#compression-only-spring","title":"Compression-Only Spring","text":"<pre><code># Compression-Only Spring Example\n\n# Create Node\nNode(0, 0, 0)\nNode.create()\n\n# Create Compression-Only Spring in Z+ direction\nBoundary.PointSpring(1, \"COMP\", \"Group2\", stiffness=5000, direction=\"Dz+\")\nGroup.create()\nBoundary.PointSpring.create()\n</code></pre>"},{"location":"Boundary/04PointSpring/#tension-only-spring","title":"Tension-Only Spring","text":"<pre><code># Tension-Only Spring Example\n\n# Create Node\nNode(0, 0, 0)\nNode.create()\n\n# Create Tension-Only Spring in Y- direction\nBoundary.PointSpring(1, \"TENS\", \"\", stiffness=3000, direction=\"Dy-\")\nBoundary.PointSpring.create()\n</code></pre>"},{"location":"Boundary/04PointSpring/#spring-with-vector-direction","title":"Spring with Vector Direction","text":"<pre><code># Spring with Vector Direction Example\n\n# Create Node\nNode(0, 0, 0)\nNode.create()\n\n# Create Tension-Only Spring with custom vector direction\nBoundary.PointSpring(1, \"TENS\", \"\", \n                    stiffness=3000, \n                    direction=\"Vector\", \n                    normal_vector=[0, -1, -1])\nBoundary.PointSpring.create()\n</code></pre>"},{"location":"Boundary/04PointSpring/#multi-linear-spring","title":"Multi-Linear Spring","text":"<pre><code># Multi-Linear Spring Example\n\n# Create Node\nNode(0, 0, 0)\nNode.create()\n\n# Create Multi-Linear Spring (requires function definition)\nBoundary.PointSpring(1, \"MULTI\", \"\", \n                    direction=\"Dz+\", \n                    function_id=1)\nBoundary.PointSpring.create()\n\n# Note: Before running this code, the Force-Deformation function must be created in Civil NX to avoid any errors.\n</code></pre>"},{"location":"Boundary/05MLFC/","title":"\u200e \u200e \u200e Multi Linear Function","text":""},{"location":"Boundary/05MLFC/#multi-linear-function","title":"Multi Linear Function","text":"<p>A nested class within Boundary used to create Multi Linear functions for multi-linear behavior in elastic links and point springs.</p>"},{"location":"Boundary/05MLFC/#constructor","title":"Constructor","text":"<p><code>Boundary.MLFC(name, type = \"FORCE\", symm = True, data = [[0,0],[1,1]], id = None)</code></p> <p>Creates force-deformation functions that define non-linear relationships between force/moment and displacement/rotation.</p>"},{"location":"Boundary/05MLFC/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: The name for the Function</li> <li><code>type (default=\"FORCE\")</code>: Type of function - \"FORCE\" or \"MOMENT\"</li> <li><code>symm (default=True)</code>: Defines if the function is symmetric (True) or unsymmetric (False)</li> <li><code>data (default=[[0,0],[1,1]])</code>: List of [X, Y] coordinate pairs defining the function curve</li> <li><code>id (default=None)</code>: Manual ID assignment (auto-assigned if None)</li> </ul>"},{"location":"Boundary/05MLFC/#function-types","title":"Function Types","text":"<ul> <li>\"FORCE\": Force vs. displacement relationship</li> <li>X values represent displacement</li> <li>Y values represent force</li> <li>\"MOMENT\": Moment vs. rotation relationship</li> <li>X values represent rotation in radians</li> <li>Y values represent moment</li> </ul>"},{"location":"Boundary/05MLFC/#class-attributes","title":"Class Attributes","text":"<ul> <li>Boundary.MLFC.func -&gt; List of all MLFC function instances</li> </ul>"},{"location":"Boundary/05MLFC/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NAME</code> (str): The name of the force-deformation function.</li> <li><code>TYPE</code> (str): The type of function (\"FORCE\" or \"MOMENT\").</li> <li><code>SYMM</code> (bool): Whether the function is symmetric or unsymmetric.</li> <li><code>DATA</code> (list): List of [X, Y] coordinate pairs defining the function curve.</li> <li><code>X</code> (list): List of X coordinates (displacement or rotation).</li> <li><code>Y</code> (list): List of Y coordinates (force or moment).</li> <li><code>ID</code> (int): The unique ID of the function.</li> </ul>"},{"location":"Boundary/05MLFC/#methods","title":"Methods","text":""},{"location":"Boundary/05MLFC/#json","title":"json","text":"<p>Returns JSON representation of all MLFC functions.</p> <pre><code>func1 = Boundary.MLFC(\"MyFunction\", \"FORCE\", True, [[0,0], [0.1, 100], [0.2, 150]])\nprint(Boundary.MLFC.json())\n</code></pre>"},{"location":"Boundary/05MLFC/#create","title":"create","text":"<p>Sends MLFC function data to Civil NX.</p> <pre><code>Boundary.MLFC.create()\n</code></pre>"},{"location":"Boundary/05MLFC/#get","title":"get","text":"<p>Fetches MLFC function data from Civil NX.</p> <pre><code>print(Boundary.MLFC.get())\n</code></pre>"},{"location":"Boundary/05MLFC/#sync","title":"sync","text":"<p>Synchronizes MLFC functions from Civil NX to Python.</p> <pre><code>Boundary.MLFC.sync()\n</code></pre>"},{"location":"Boundary/05MLFC/#delete","title":"delete","text":"<p>Deletes all MLFC functions from both Python and Civil NX.</p> <pre><code>Boundary.MLFC.delete()\n</code></pre>"},{"location":"Boundary/05MLFC/#examples","title":"Examples","text":""},{"location":"Boundary/05MLFC/#basic-force-displacement-function","title":"Basic Force-Displacement Function","text":"<pre><code># Basic Force-Displacement Function Example\n\n# Create a symmetric force vs. displacement function\nBoundary.MLFC(name=\"LinearSpring\", \n              type=\"FORCE\", \n              symm=True, \n              data=[[0, 0], [0.01, 100], [0.02, 200], [0.03, 300]])\n\nBoundary.MLFC.create()\n</code></pre>"},{"location":"Boundary/05MLFC/#moment-rotation-function","title":"Moment-Rotation Function","text":"<pre><code># Moment-Rotation Function Example\n\n# Create a symmetric moment vs. rotation function\nBoundary.MLFC(name=\"RotationalSpring\", \n              type=\"MOMENT\", \n              symm=True, \n              data=[[0, 0], [0.01, 500], [0.02, 900], [0.03, 1200]])\n\nBoundary.MLFC.create()\n</code></pre>"},{"location":"Boundary/05MLFC/#unsymmetric-function","title":"Unsymmetric Function","text":"<pre><code># Unsymmetric Function Example\n\n# Create an unsymmetric function with different positive/negative behavior\nBoundary.MLFC(name=\"UnsymmetricSpring\", \n              type=\"FORCE\", \n              symm=False, \n              data=[[0, 0], [0.005, 50], [0.01, 150], [0.02, 200]])\n\nBoundary.MLFC.create()\n</code></pre>"},{"location":"Boundary/05MLFC/#multiple-functions-for-different-applications","title":"Multiple Functions for Different Applications","text":"<pre><code># Multiple Functions Example\n\n# Create multiple functions for different spring behaviors\n# Compression function\nBoundary.MLFC(name=\"CompressionSpring\", \n              type=\"FORCE\", \n              symm=False, \n              data=[[0, 0], [0.01, 500], [0.02, 800], [0.03, 1000]])\n\n# Tension function\nBoundary.MLFC(name=\"TensionSpring\", \n              type=\"FORCE\", \n              symm=False, \n              data=[[0, 0], [0.01, 300], [0.02, 550], [0.03, 750]])\n\n# Rotational function\nBoundary.MLFC(name=\"RotationalHinge\", \n              type=\"MOMENT\", \n              symm=True, \n              data=[[0, 0], [0.005, 200], [0.01, 350], [0.02, 500]])\n\nBoundary.MLFC.create()\n</code></pre>"},{"location":"CS/001stage/","title":"Define Construction Stage","text":""},{"location":"CS/001stage/#define-construction-stage","title":"Define Construction Stage","text":"<p>The module provides functionality to create, manage, and synchronize construction stages for staged construction analysis in the model. It handles activation and deactivation of structure groups, boundary groups, and load groups across different construction phases.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d')\n</code></pre>"},{"location":"CS/001stage/#constructor","title":"Constructor","text":"<p><code>CS.STAGE(name, duration=0, s_group=None, s_age=None, s_type=None, b_group=None, b_pos=None, b_type=None, l_group=None, l_day=None, l_type=None, id=None, sr_stage=True, ad_stage=False, load_in=False, nl=5, addstp=None)</code></p> <p>Creates a construction stage with specified parameters for structure, boundary, and load group management.</p>"},{"location":"CS/001stage/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: Name of the construction stage</li> <li><code>duration (default=0)</code>: Duration of construction stage in days</li> <li><code>s_group (default=None)</code>: Structure group name or list of group names</li> <li><code>s_age (default=None)</code>: Age of structure group in days (or redistribution % for deactivation)</li> <li><code>s_type (default=None)</code>: Structure activation type - \"A\" to activate, \"D\" to deactivate</li> <li><code>b_group (default=None)</code>: Boundary group name or list of group names</li> <li><code>b_pos (default=None)</code>: Boundary position type - \"ORIGINAL\" or \"DEFORMED\"</li> <li><code>b_type (default=None)</code>: Boundary activation type - \"A\" to activate, \"D\" to deactivate</li> <li><code>l_group (default=None)</code>: Load group name or list of group names</li> <li><code>l_day (default=None)</code>: Load activation day - \"FIRST\" or \"LAST\"</li> <li><code>l_type (default=None)</code>: Load activation type - \"A\" to activate, \"D\" to deactivate</li> <li><code>id (default=None)</code>: Manual construction stage ID assignment (auto-assigned if None)</li> <li><code>sv_result (default=True)</code>: Save results of this stage</li> <li><code>sv_step (default=False)</code>: Add additional step results</li> <li><code>load_in (default=False)</code>: Load incremental steps for material nonlinear analysis</li> <li><code>nl (default=5)</code>: Number of load incremental steps</li> <li><code>addstp (default=None)</code>: List of additional steps</li> </ul>"},{"location":"CS/001stage/#class-attributes","title":"Class Attributes","text":"<p>CS.STAGE.stages -&gt; List of all construction stages.</p>"},{"location":"CS/001stage/#methods","title":"Methods","text":""},{"location":"CS/001stage/#json","title":"json","text":"<p>Returns a JSON representation of all Construction Stages defined in python.</p> <pre><code>cs1 = CS.STAGE(\"Stage 1\", 7, \"Main Girder\", 7, \"A\")\ncs2 = CS.STAGE(\"Stage 2\", 14, \"Side Girder\", 14, \"A\")\n\nprint(CS.STAGE.json())\n\n# Output will show detailed JSON structure for all stages\n</code></pre>"},{"location":"CS/001stage/#create","title":"create","text":"<p>Sends the current construction stage list to Civil NX using a PUT request.</p> <pre><code>cs1 = CS.STAGE(\"Stage 1\", 7, \"Main Girder\", 7, \"A\")\ncs2 = CS.STAGE(\"Stage 2\", 14, \"Side Girder\", 14, \"A\")\n\nCS.STAGE.create()\n</code></pre>"},{"location":"CS/001stage/#get","title":"get","text":"<p>Fetches construction stages from Civil NX and returns the JSON representation.</p> <pre><code>print(CS.STAGE.get())\n# Output will show all construction stages from Civil NX database\n</code></pre>"},{"location":"CS/001stage/#sync","title":"sync","text":"<p>Retrieves Construction Stage data from Civil NX and rebuilds the internal stage list.</p> <pre><code>CS.STAGE.sync()\nfor stage in CS.STAGE.stages:\n    print(f'Stage: {stage.NAME} | Duration: {stage.DURATION} days')\n    print(f'  Active Structure Groups: {len(stage.act_structure_groups)}')\n    print(f'  Active Boundary Groups: {len(stage.act_boundary_groups)}')\n    print(f'  Active Load Groups: {len(stage.act_load_groups)}')\n</code></pre>"},{"location":"CS/001stage/#delete","title":"delete","text":"<p>Deletes all construction stage data from both Python and Civil NX.</p> <pre><code>CS.STAGE.delete()\n</code></pre>"},{"location":"CS/001stage/#examples","title":"Examples","text":""},{"location":"CS/001stage/#single-group-activation","title":"Single Group Activation","text":"<pre><code>#Create Node and Element\nfor j in range(6):\n    for i in range(2):\n        Node(i*10,j*2,0)\n        Node.create()\nj = 0\nfor k in range(6):   \n    for i in range(1,2):\n        Element.Beam(i +j,i+1 +j)\n        Element.create()\n    j = j + 2\n\n\n# Create structural groups\nGroup.Structure(\"CS1\", nlist=[1, 2], elist=[1])\nGroup.Structure(\"CS2\", nlist=[3, 4, 5,6], elist=[2, 3])\nGroup.Structure(\"CS3\", nlist=[7, 8, 9,10], elist=[4, 5,6])\n\n# Create boundary and load groups\nGroup.Boundary(\"BG1\")\nGroup.Boundary(\"BG2\")\nGroup.Load(\"Load group 1\")\nGroup.Load(\"Load group 2\")\n\nGroup.create()\n\n#Create Stage\nCS.STAGE(\"Stage 1\",7,\"CS1\",10,\"A\",\"BG1\",\"DEFORMED\",\"A\",\"Load Group 1\",\"FIRST\",\"A\")\nCS.STAGE.create()\n</code></pre>"},{"location":"CS/001stage/#multiple-group-activation","title":"Multiple Group Activation","text":"<pre><code>#Create Node and Element\nfor j in range(6):\n    for i in range(2):\n        Node(i*10,j*2,0)\n        Node.create()\nj = 0\nfor k in range(6):   \n    for i in range(1,2):\n        Element.Beam(i +j,i+1 +j)\n        Element.create()\n    j = j + 2\n\n\n# Create structural groups\nGroup.Structure(\"CS1\", nlist=[1, 2], elist=[1])\nGroup.Structure(\"CS2\", nlist=[3, 4, 5,6], elist=[2, 3])\nGroup.Structure(\"CS3\", nlist=[7, 8, 9,10], elist=[4, 5,6])\n\n# Create boundary and load groups\nGroup.Boundary(\"BG1\")\nGroup.Boundary(\"BG2\")\nGroup.Load(\"Load group 1\")\nGroup.Load(\"Load group 2\")\n\nGroup.create()\n\n#Create Stage\nCS.STAGE(\"Stage 1\",17,[\"CS1\",\"CS2\"],[10,7],\"A\",[\"BG1\",\"BG2\"],[\"DEFORMED\",\"ORIGINAL\"],\"A\",\"Load Group 1\",\"FIRST\",\"A\")\nCS.STAGE.create()\n</code></pre>"},{"location":"CS/001stage/#mixed-activation-and-deactivation","title":"Mixed Activation and Deactivation","text":"<pre><code>#Create Node and Element\nfor j in range(6):\n    for i in range(2):\n        Node(i*10,j*2,0)\n        Node.create()\nj = 0\nfor k in range(6):   \n    for i in range(1,2):\n        Element.Beam(i +j,i+1 +j)\n        Element.create()\n    j = j + 2\n\n\n# Create structural groups\nGroup.Structure(\"CS1\", nlist=[1, 2], elist=[1])\nGroup.Structure(\"CS2\", nlist=[3, 4, 5,6], elist=[2, 3])\nGroup.Structure(\"CS3\", nlist=[7, 8, 9,10], elist=[4, 5,6])\n\n# Create boundary and load groups\nGroup.Boundary(\"BG1\")\nGroup.Boundary(\"BG2\")\nGroup.Load(\"Load group 1\")\nGroup.Load(\"Load group 2\")\n\nGroup.create()\n\n#Create Stage\nCS.STAGE(\"Stage 1\",17,[\"CS1\",\"CS2\"],[10,7],\"A\",[\"BG1\",\"BG2\"],[\"DEFORMED\",\"ORIGINAL\"],\"A\",\"Load Group 1\",\"FIRST\",\"A\")\nCS.STAGE(\"Stage 2\",10,[\"CS2\",\"CS3\"],[7,7],[\"D\",\"A\"],[\"BG2\"],[\"ORIGINAL\"],\"D\")\nCS.STAGE.create()\n</code></pre>"},{"location":"CS/001stage/#advanced-options","title":"Advanced Options","text":"<pre><code>#Create Node and Element\nfor j in range(6):\n    for i in range(2):\n        Node(i*10,j*2,0)\n        Node.create()\nj = 0\nfor k in range(6):   \n    for i in range(1,2):\n        Element.Beam(i +j,i+1 +j)\n        Element.create()\n    j = j + 2\n\n\n# Create structural groups\nGroup.Structure(\"CS1\", nlist=[1, 2], elist=[1])\nGroup.Structure(\"CS2\", nlist=[3, 4, 5,6], elist=[2, 3])\nGroup.Structure(\"CS3\", nlist=[7, 8, 9,10], elist=[4, 5,6])\n\n# Create boundary and load groups\nGroup.Boundary(\"BG1\")\nGroup.Boundary(\"BG2\")\nGroup.Load(\"Load group 1\")\nGroup.Load(\"Load group 2\")\n\nGroup.create()\n\n#Create Stage\nCS.STAGE(\"Stage 1\",7,\"CS1\",10,\"A\",\"BG1\",\"DEFORMED\",\"A\",\"Load Group 1\",\"FIRST\",\"A\")\nCS.STAGE(\"Stage 2\",20,\"CS2\",10,\"A\",\"BG2\",\"DEFORMED\",\"A\",sr_stage=True, ad_stage=True, load_in=True, nl=6, addstp=[1, 2, 3])\nCS.STAGE.create\nCS.STAGE.create()\n</code></pre>"},{"location":"CS/001stage/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import *\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\")  # Paste your Mapi Key\n\n# =============================================================================\n# CREATE STRUCTURE ONCE - Base Model\n# =============================================================================\n\nprint(\"Creating Base Structure...\")\n\n# Create nodes\nfor j in range(6):\n    for i in range(2):\n        Node(i*10, j*2, 0)\n        Node.create()\n\n# Create elements\nj = 0\nfor k in range(6):   \n    for i in range(1, 2):\n        Element.Beam(i + j, i + 1 + j)\n        Element.create()\n    j = j + 2\n\nprint(\"Nodes and Elements Created\")\n\n# =============================================================================\n# CREATE GROUPS ONCE - Define All Components\n# =============================================================================\n\nprint(\"Creating Groups...\")\n\n# Create structural groups\nGroup.Structure(\"CS1\", nlist=[1, 2], elist=[1])\nGroup.Structure(\"CS2\", nlist=[3, 4, 5, 6], elist=[2, 3])\nGroup.Structure(\"CS3\", nlist=[7, 8, 9, 10], elist=[4, 5, 6])\n\n# Create boundary groups\nGroup.Boundary(\"BG1\")\nGroup.Boundary(\"BG2\")\nGroup.Boundary(\"BG3\")\n\n# Create load groups\nGroup.Load(\"Load Group 1\")\nGroup.Load(\"Load Group 2\")\nGroup.Load(\"Construction Load\")\n\nGroup.create()\nprint(\"All Groups Created\")\n\n# =============================================================================\n# CONSTRUCTION STAGING SEQUENCE - All Cases Implemented\n# =============================================================================\n\nprint(\"\\nCreating Construction Stages...\")\n\n# CASE 1: Single Group Activation\n# Stage 1: Activate only CS1 \nCS.STAGE(\"Stage 1 - Single Group\", \n   duration=7, \n   s_group=\"CS1\", \n   s_age=10, \n   s_type=\"A\", \n   b_group=\"BG1\", \n   b_pos=\"DEFORMED\", \n   b_type=\"A\", \n   l_group=\"Load Group 1\", \n   l_day=\"FIRST\", \n   l_type=\"A\")\n\nprint(\"Stage 1: Single Group Activation - CS1\")\n\n# CASE 2: Multiple Group Activation  \n# Stage 2: Activate multiple groups BG2 and BG3 simultaneously\nCS.STAGE(\"Stage 2 - Multiple Groups\", \n   duration=17, \n   s_group=\"CS2\", \n   s_age=10, \n   s_type=\"A\", \n   b_group=[\"BG2\", \"BG3\"], \n   b_pos=[\"DEFORMED\", \"ORIGINAL\"], \n   b_type=\"A\", \n   l_group=\"Load Group 2\", \n   l_day=\"FIRST\", \n   l_type=\"A\")\n\nprint(\"Stage 2: Multiple Group Activation - BG2 &amp; BG3\")\n\n# CASE 3: Mixed Activation and Deactivation\n# Stage 3: Deactivate CS2, Activate CS3 (mixed operations)\nCS.STAGE(\"Stage 3 - Mixed Operations\", \n   duration=10, \n   s_group=[\"CS2\", \"CS3\"], \n   s_age=[7, 7], \n   s_type=[\"D\", \"A\"], \n   b_group=[\"BG2\"], \n   b_pos=[\"ORIGINAL\"], \n   b_type=\"D\")\n\nprint(\"Stage 3: Mixed Operations - Deactivate CS2, Activate CS3\")\n\n# CASE 4: Advanced Options with Special Parameters\n# Stage 4: Advanced staging with additional control parameters\nCS.STAGE(\"Stage 4 - Advanced Options\", \n   duration=20,  \n   l_group=[\"Construction Load\"], \n   l_day=[\"FIRST\"], \n   l_type=[\"A\"],\n   ad_stage=True,      # Additional stage options\n   load_in=True,       # Incremental load application\n   nl=6,               # Number of load steps\n   addstp=[1, 2, 3])   # Additional step control\n\nprint(\"Stage 4: Advanced Options - Full parameter control\")\n\n# Create all construction stages\nCS.STAGE.create()\n</code></pre>"},{"location":"CS/002compsec/","title":"Composite Section for CS","text":""},{"location":"CS/002compsec/#composite-section-for-construction-stage","title":"Composite Section for Construction Stage","text":"<p>The module provides functionality to create, manage, and synchronize composite sections for composite construction analysis in the model. It handles the definition of composite sections with multiple parts, material assignments, and construction stage properties.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d')\n</code></pre>"},{"location":"CS/002compsec/#constructor","title":"Constructor","text":"<p><code>CS.CompSec(activation_stage, section_id, comp_type=\"GENERAL\", tapered_type=False, partinfo=None, id=None)</code></p> <p>Creates a composite section for Construction Stage with specified parameters for material composition, staging, and geometric properties.</p>"},{"location":"CS/002compsec/#parameters","title":"Parameters","text":"<ul> <li><code>activation_stage</code>: Active Stage name (required)</li> <li><code>section_id</code>: Section ID (required)</li> <li><code>comp_type (default=\"GENERAL\")</code>: Composite Type - \"GENERAL\" or \"USER\"</li> <li><code>tapered_type (default=False)</code>: Tapered Type - True or False</li> <li><code>partinfo</code>: List of part information lists (required)</li> <li><code>id (default=None)</code>: Manual composite section ID assignment (auto-assigned if None)</li> </ul>"},{"location":"CS/002compsec/#part-info-format","title":"Part Info Format","text":"<p>Each part should be a list with elements in order: <code>[part_number, material_type, material_id, composite_stage, age, height, volume_surface_ratio, module_exposed_surface, area, asy, asz, ixx, iyy, izz, warea, iw]</code></p>"},{"location":"CS/002compsec/#required-parameters","title":"Required Parameters:","text":"<ul> <li><code>part_number</code>: Integer - Part identification number</li> <li><code>material_type</code>: String - \"ELEM\" for element material or \"MATL\" for material property</li> <li><code>composite_stage</code>: String (default=\"\") - Construction stage for this part, blank uses active stage</li> </ul>"},{"location":"CS/002compsec/#optional-parameters-with-defaults","title":"Optional Parameters (with defaults):","text":"<ul> <li><code>material_id</code>: String (default=\"\") - Material ID reference, blank for ELEM type</li> <li><code>age</code>: Number (default=0) - Age of material in days</li> <li><code>height</code>: Number (default=\"AUTO\") - Part height dimension</li> <li><code>volume_surface_ratio</code>: Number (default=0) - Volume to surface area ratio</li> <li><code>module_exposed_surface</code>: Number (default=0) - Modulus of exposed surface</li> <li><code>area</code>: Number (default=1) - Cross-sectional area</li> <li><code>asy</code>: Number (default=1) - Shear area in Y direction</li> <li><code>asz</code>: Number (default=1) - Shear area in Z direction</li> <li><code>ixx</code>: Number (default=1) - Torsional moment of inertia</li> <li><code>iyy</code>: Number (default=1) - Moment of inertia about Y axis</li> <li><code>izz</code>: Number (default=1) - Moment of inertia about Z axis</li> <li><code>warea</code>: Number (default=1) - Warping area</li> <li><code>iw</code>: Number (default=1) - Warping constant</li> </ul>"},{"location":"CS/002compsec/#class-attributes","title":"Class Attributes","text":"<p>CS.CompSec.compsecs -&gt; List of all composite sections.</p>"},{"location":"CS/002compsec/#methods","title":"Methods","text":""},{"location":"CS/002compsec/#json","title":"json","text":"<p>Returns a JSON representation of all Composite Sections defined in python.</p> <pre><code>cs1 = CS.CompSec(\"CS1\", 1, \"GENERAL\", False, [\n    [1, \"ELEM\", \"\", \"\", 2, 1.5, 1.5, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [2, \"MATL\", \"3\", \"CS2\", 5, 0.245, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]\n])\n\nprint(CS.CompSec.json())\n\n# Output will show detailed JSON structure for all composite sections\n</code></pre>"},{"location":"CS/002compsec/#create","title":"create","text":"<p>Sends the current composite section list to Civil NX using a PUT request.</p> <pre><code>cs1 = CS.CompSec(\"CS1\", 1, \"GENERAL\", False, [\n    [1, \"ELEM\"],\n    [2, \"MATL\", \"2\", \"CS2\"]\n])\n\nCS.CompSec.create()\n</code></pre>"},{"location":"CS/002compsec/#get","title":"get","text":"<p>Fetches composite sections from Civil NX and returns the JSON representation.</p> <pre><code>print(CS.CompSec.get())\n# Output will show all composite sections from Civil NX database\n</code></pre>"},{"location":"CS/002compsec/#sync","title":"sync","text":"<p>Retrieves Composite Section data from Civil NX and rebuilds the internal composite section list.</p> <pre><code>CS.CompSec.sync()\nfor compsec in CS.CompSec.compsecs:\n    print(f'Section ID: {compsec.SEC} | Stage: {compsec.ASTAGE}')\n    print(f'  Type: {compsec.TYPE} | Tapered: {compsec.bTAP}')\n    print(f'  Number of Parts: {len(compsec.vPARTINFO)}')\n</code></pre>"},{"location":"CS/002compsec/#delete","title":"delete","text":"<p>Deletes all composite section data from both Python and Civil NX.</p> <pre><code>CS.CompSec.delete()\n</code></pre>"},{"location":"CS/002compsec/#examples","title":"Examples","text":""},{"location":"CS/002compsec/#basic-composite-section","title":"Basic Composite Section","text":"<pre><code># Create a basic composite section with minimal part information\nCS.CompSec(\"CS1\", 1, \"GENERAL\", False, [\n    [1, \"ELEM\"],\n    [2, \"MATL\", \"2\", \"CS2\"]\n])\n\nCS.CompSec.create()\n</code></pre>"},{"location":"CS/002compsec/#detailed-composite-section","title":"Detailed Composite Section","text":"<pre><code># Create a detailed composite section with full parameters\nCS.CompSec(\"CS1\", 2, \"GENERAL\", False, [\n    [1, \"ELEM\", \"\", \"\", 2, 1.5, 1.5, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [2, \"MATL\", \"3\", \"CS2\", 5, 0.245, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]\n])\n\nCS.CompSec.create()\n</code></pre>"},{"location":"CS/002compsec/#user-type-with-tapered-section","title":"User Type with Tapered Section","text":"<pre><code># Create a user-defined tapered composite section\nCS.CompSec(\"CS1\", 3, \"USER\", True, [\n    [1, \"ELEM\", \"\", \"\", 2, 1.5],\n    [2, \"MATL\", \"4\", \"CS3\", 10, 2.0]\n])\n\nCS.CompSec.create()\n</code></pre>"},{"location":"CS/002compsec/#multiple-composite-sections","title":"Multiple Composite Sections","text":"<pre><code># Create multiple composite sections for different stages\nCS.CompSec(\"Stage1\", 10, \"GENERAL\", False, [\n    [1, \"ELEM\"],\n    [2, \"MATL\", \"2\", \"Stage1\"]\n])\n\nCS.CompSec(\"Stage2\", 11, \"GENERAL\", False, [\n    [1, \"ELEM\"],\n    [2, \"MATL\", \"2\", \"Stage2\", 0, 0.5]\n])\n\nCS.CompSec(\"Stage3\", 12, \"USER\", True, [\n    [1, \"ELEM\", \"\", \"\", 7, 1.2, 0.8, 0.5],\n    [2, \"MATL\", \"2\", \"Stage3\", 14, 0.8, 0.6, 0.3]\n])\n\nCS.CompSec.create()\n</code></pre>"},{"location":"CS/003timeloads/","title":"TIme Loads for CS","text":""},{"location":"CS/003timeloads/#time-loads-for-construction-stage","title":"Time Loads for Construction Stage","text":"<p>The module provides functionality to create, manage, and synchronize time loads for construction stage analysis in the model. It handles the definition of time-dependent loads with element assignments, load groups, and timing parameters for staged construction analysis.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d')\n</code></pre>"},{"location":"CS/003timeloads/#constructor","title":"Constructor","text":"<p><code>CS.TimeLoad(element_id, day, group=\"\", id=None)</code></p> <p>Creates time loads for Construction Stage with specified parameters for element assignment, timing, and load grouping.</p>"},{"location":"CS/003timeloads/#parameters","title":"Parameters","text":"<ul> <li><code>element_id</code>: Element ID (required) - Integer specifying the target element</li> <li><code>day</code>: Time Loads in days (required) - Integer defining the load duration</li> <li><code>group (default=\"\")</code>: Load Group Name (optional) - String for load categorization</li> <li><code>id (default=None)</code>: Manual time loads ID assignment (auto-assigned if None)</li> </ul>"},{"location":"CS/003timeloads/#class-attributes","title":"Class Attributes","text":"<p>CS.TimeLoad.timeloads -&gt; List of all time loads defined.</p>"},{"location":"CS/003timeloads/#methods","title":"Methods","text":""},{"location":"CS/003timeloads/#json","title":"json","text":"<p>Returns a JSON representation of all Time Loads defined in python.</p> <pre><code>CS.TimeLoad(10, 35, \"DL\")\nCS.TimeLoad(11, 25, \"DL\")\n\nprint(CS.TimeLoad.json())\n\n# Output will show detailed JSON structure for all time loads\n</code></pre>"},{"location":"CS/003timeloads/#create","title":"create","text":"<p>Sends the current time loads list to Civil NX using a PUT request.</p> <pre><code>CS.TimeLoad(10, 35, \"DL\")\nCS.TimeLoad(11, 25, \"DL\")\n\nCS.TimeLoad.create()\n</code></pre>"},{"location":"CS/003timeloads/#get","title":"get","text":"<p>Fetches time loads from Civil NX and returns the JSON representation.</p> <pre><code>print(CS.TimeLoad.get())\n# Output will show all time loads from Civil NX database\n</code></pre>"},{"location":"CS/003timeloads/#sync","title":"sync","text":"<p>Retrieves Time Loads data from Civil NX and rebuilds the internal time loads list.</p> <pre><code>CS.TimeLoad.sync()\nfor timeload in CS.TimeLoad.timeloads:\n    print(f'Element ID: {timeload.ELEMENT_ID} | Days: {timeload.DAY}')\n    print(f'  Group: {timeload.GROUP_NAME} | ID: {timeload.ID}')\n</code></pre>"},{"location":"CS/003timeloads/#delete","title":"delete","text":"<p>Deletes all time loads data from both Python and Civil NX.</p> <pre><code>CS.TimeLoad.delete()\n</code></pre>"},{"location":"CS/003timeloads/#examples","title":"Examples","text":""},{"location":"CS/003timeloads/#basic-time-loads","title":"Basic Time Loads","text":"<pre><code># Create basic time loads without group name\nCS.TimeLoad(12, 30)\n\nCS.TimeLoad.create()\n</code></pre>"},{"location":"CS/003timeloads/#time-loads-with-group","title":"Time Loads with Group","text":"<pre><code># Create time loads with load group specification\nCS.TimeLoad(10, 35, \"DL\")\nCS.TimeLoad(11, 25, \"DL\")\n\nCS.TimeLoad.create()\n</code></pre>"},{"location":"CS/003timeloads/#time-loads-with-specific-id","title":"Time Loads with Specific ID","text":"<pre><code># Create time loads with manual ID assignment\nCS.TimeLoad(11, 25, \"DL\", id=2)\n\nCS.TimeLoad.create()\n</code></pre>"},{"location":"CS/004creepcoeffcs/","title":"Creep Coefficient for CS","text":""},{"location":"CS/004creepcoeffcs/#creep-coefficient-for-construction-stage","title":"Creep Coefficient for Construction Stage","text":"<p>The module provides functionality to create, manage, and synchronize creep coefficients for construction stage analysis in the model. It handles the definition of time-dependent material behavior with element assignments, coefficient values, and load group categorization for structural analysis.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d')\n</code></pre>"},{"location":"CS/004creepcoeffcs/#constructor","title":"Constructor","text":"<p><code>CS.CreepCoeff(element_id, creep, group=\"\", id=None)</code></p> <p>Creates creep coefficients for Construction Stage with specified parameters for element assignment, coefficient values, and load grouping.</p>"},{"location":"CS/004creepcoeffcs/#parameters","title":"Parameters","text":"<ul> <li><code>element_id</code>: Element ID (required) - Integer specifying the target element</li> <li><code>creep</code>: Creep Coefficient value (required) - Float defining the creep behavior multiplier</li> <li><code>group (default=\"\")</code>: Load Group Name (optional) - String for load categorization</li> <li><code>id (default=None)</code>: Manual creep coefficient ID assignment (auto-assigned if None)</li> </ul>"},{"location":"CS/004creepcoeffcs/#class-attributes","title":"Class Attributes","text":"<p>CS.CreepCoeff.creepcoeffs -&gt; List of all creep coefficients defined.</p>"},{"location":"CS/004creepcoeffcs/#methods","title":"Methods","text":""},{"location":"CS/004creepcoeffcs/#json","title":"json","text":"<p>Returns a JSON representation of all Creep Coefficients defined in python.</p> <pre><code>CS.CreepCoeff(25, 1.2, \"Group\")\nCS.CreepCoeff(26, 1.5, \"Group\")\n\nprint(CS.CreepCoeff.json())\n\n# Output will show detailed JSON structure for all creep coefficients\n</code></pre>"},{"location":"CS/004creepcoeffcs/#create","title":"create","text":"<p>Sends the current creep coefficients list to Civil NX using a PUT request.</p> <pre><code>CS.CreepCoeff(25, 1.2, \"\")\nCS.CreepCoeff(26, 1.5, \"\")\n\nCS.CreepCoeff.create()\n</code></pre>"},{"location":"CS/004creepcoeffcs/#get","title":"get","text":"<p>Fetches creep coefficients from Civil NX and returns the JSON representation.</p> <pre><code>print(CS.CreepCoeff.get())\n# Output will show all creep coefficients from Civil NX database\n</code></pre>"},{"location":"CS/004creepcoeffcs/#sync","title":"sync","text":"<p>Retrieves Creep Coefficient data from Civil NX and rebuilds the internal creep coefficients list.</p> <pre><code>CS.CreepCoeff.sync()\nfor creepcoeff in CS.CreepCoeff.creepcoeffs:\n    print(f'Element ID: {creepcoeff.ELEMENT_ID} | Creep: {creepcoeff.CREEP}')\n    print(f'  Group: {creepcoeff.GROUP_NAME} | ID: {creepcoeff.ID}')\n</code></pre>"},{"location":"CS/004creepcoeffcs/#delete","title":"delete","text":"<p>Deletes all creep coefficients data from both Python and Civil NX.</p> <pre><code>CS.CreepCoeff.delete()\n</code></pre>"},{"location":"CS/004creepcoeffcs/#examples","title":"Examples","text":""},{"location":"CS/004creepcoeffcs/#basic-creep-coefficient","title":"Basic Creep Coefficient","text":"<pre><code># Create basic creep coefficient without group name\nCS.CreepCoeff(27, 1.0)\n\nCS.CreepCoeff.create()\n</code></pre>"},{"location":"CS/004creepcoeffcs/#creep-coefficient-with-group","title":"Creep Coefficient with Group","text":"<pre><code># Create creep coefficients with load group specification\nCS.CreepCoeff(25, 1.2, \"DeadLoad\")\nCS.CreepCoeff(26, 1.5, \"Selfweight\")\n\nCS.CreepCoeff.create()\n</code></pre>"},{"location":"CS/004creepcoeffcs/#creep-coefficient-with-specific-id","title":"Creep Coefficient with Specific ID","text":"<pre><code># Create creep coefficient with manual ID assignment\nCS.CreepCoeff(26, 1.5, \"Selfweight\", id=2)\n\nCS.CreepCoeff.create()\n</code></pre>"},{"location":"CS/004creepcoeffcs/#multiple-creep-coefficients-for-different-elements","title":"Multiple Creep Coefficients for Different Elements","text":"<pre><code># Create multiple creep coefficients for various elements and groups\nCS.CreepCoeff(25, 1.2, \"2ndDeadLoad\")\nCS.CreepCoeff(26, 1.5, \"Selfweight\")\nCS.CreepCoeff(27, 1.0)\nCS.CreepCoeff(28, 2.0, \"Long-term Load\")\nCS.CreepCoeff(29, 1.8, \"Construction Load\")\n\nCS.CreepCoeff.create()\n</code></pre>"},{"location":"CS/005cambercs/","title":"Camber for CS","text":""},{"location":"CS/005cambercs/#camber-for-construction-stage","title":"Camber for Construction Stage","text":"<p>The module provides functionality to create, manage, and synchronize camber data for construction stage analysis in the model. It handles the definition of pre-camber values and deformation parameters at specific nodes to account for anticipated deflections during staged construction.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d')\n</code></pre>"},{"location":"CS/005cambercs/#constructor","title":"Constructor","text":"<p><code>CS.Camber(node_id, camber, deform, id=None)</code></p> <p>Creates camber data for Construction Stage with specified parameters for node assignment, user-defined camber values, and deformation parameters.</p>"},{"location":"CS/005cambercs/#parameters","title":"Parameters","text":"<ul> <li><code>node_id</code>: Node ID (required) - Integer specifying the target node</li> <li><code>camber</code>: User camber value (required) - Float defining the pre-camber magnitude</li> <li><code>deform</code>: Deformation value (required) - Float defining the anticipated deformation</li> <li><code>id (default=None)</code>: Manual camber ID assignment (auto-assigned if None)</li> </ul>"},{"location":"CS/005cambercs/#class-attributes","title":"Class Attributes","text":"<p>CS.Camber.cambers -&gt; List of all camber data defined.</p>"},{"location":"CS/005cambercs/#methods","title":"Methods","text":""},{"location":"CS/005cambercs/#json","title":"json","text":"<p>Returns a JSON representation of all Camber data defined in python.</p> <pre><code>CS.Camber(23, 0, 0)\nCS.Camber(25, 0.17, 0.1)\n\nprint(CS.Camber.json())\n\n# Output will show detailed JSON structure for all camber data\n</code></pre>"},{"location":"CS/005cambercs/#create","title":"create","text":"<p>Sends the current camber data list to Civil NX using a PUT request.</p> <pre><code>CS.Camber(23, 0, 0)\nCS.Camber(25, 0.17, 0.1)\n\nCS.Camber.create()\n</code></pre>"},{"location":"CS/005cambercs/#get","title":"get","text":"<p>Fetches camber data from Civil NX and returns the JSON representation.</p> <pre><code>print(CS.Camber.get())\n# Output will show all camber data from Civil NX database\n</code></pre>"},{"location":"CS/005cambercs/#sync","title":"sync","text":"<p>Retrieves Camber data from Civil NX and rebuilds the internal camber data list.</p> <pre><code>CS.Camber.sync()\nfor camber in CS.Camber.cambers:\n    print(f'Node ID: {camber.NODE_ID} | User Camber: {camber.USER}')\n    print(f'  Deformation: {camber.DEFORM} | ID: {camber.ID}')\n</code></pre>"},{"location":"CS/005cambercs/#delete","title":"delete","text":"<p>Deletes all camber data from both Python and Civil NX.</p> <pre><code>CS.Camber.delete()\n</code></pre>"},{"location":"CS/005cambercs/#examples","title":"Examples","text":""},{"location":"CS/005cambercs/#basic-camber-no-pre-camber","title":"Basic Camber (No Pre-camber)","text":"<pre><code># Create basic camber with zero pre-camber and deformation\nCS.Camber(23, 0, 0)\n\nCS.Camber.create()\n</code></pre>"},{"location":"CS/005cambercs/#camber-with-pre-camber-value","title":"Camber with Pre-camber Value","text":"<pre><code># Create camber with user-defined pre-camber and deformation\nCS.Camber(25, 0.17, 0.1)\nCS.Camber(27, 0.28, 0)\n\nCS.Camber.create()\n</code></pre>"},{"location":"CS/005cambercs/#camber-with-specific-id","title":"Camber with Specific ID","text":"<pre><code># Create camber with manual ID assignment\nCS.Camber(27, 0.28, 0, id=3)\n\nCS.Camber.create()\n</code></pre>"},{"location":"Element/","title":"Element","text":""},{"location":"Element/#element","title":"Element","text":"<p>The module provides functionality to create, manage, and synchronize structural elements (Beam and Truss) in the model. </p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d')\n</code></pre>"},{"location":"Element/#constructor","title":"Constructor","text":"<p>To create elements function corresponding to element type should be used. </p> <ul> <li>Truss : Element.Truss( )   </li> <li>Beam : Element.Beam( )   </li> <li>Plate : Element.Plate( )   </li> </ul>"},{"location":"Element/#retrieve-element-by-id","title":"Retrieve Element by ID","text":"<p><code>elemByID(id:int)</code> : Returns <code>ELEMENT</code> object with given ID.</p>"},{"location":"Element/#class-attributes","title":"Class Attributes","text":"<p>Element.elements -&gt; List of all elements.</p> <pre><code>Node(0,0,0,id=1)    # Create Node at 0,0,0 with ID = 1\nNode(1,1,1,id=2)    # Create Node at 1,1,1 with ID = 2\nNode(2,2,2,id=3)    # Create Node at 2,2,2 with ID = 3\n\nbeam_1 = Element.Beam(1,2)  # Create Beam connecting Node 1 and Node 2 (default ID = 1)\nbeam_2 = Element.Truss(2,3)  # Create Truss connecting Node 2 and Node 3 (default ID = 2)\n\nfor elem in Element.elements:\n    print(f'ELEM ID = {elem.ID} | TYPE = {elem.TYPE} | NODE = {elem.NODE}')\n# Output :\n# ELEM ID = 1 | TYPE = BEAM | NODE = [1, 2]\n# ELEM ID = 2 | TYPE = TRUSS | NODE = [2, 3]\n</code></pre>"},{"location":"Element/#methods","title":"Methods","text":""},{"location":"Element/#elementjson","title":"Element.json","text":"<p>Returns a JSON representation of all Nodes defined in python.</p> <pre><code>beam_1 = Element.Beam(1,2)   # Create Beam connecting Node 1 and Node 2\n\nprint(Element.json())\n\n# Output :\n# {'Assign': {1: {'TYPE': 'BEAM', 'MATL': 1, 'SECT': 1, 'NODE': [1, 2], 'ANGLE': 0}}}\n</code></pre>"},{"location":"Element/#elementcreate","title":"Element.create","text":"<p>Sends the current element list to the Civil NX using a PUT request. New elements are created and existing elements(same ID) in Civil NX will be updated.</p> <pre><code>Node(0,0,0,id=1)    # Create Node at 0,0,0 with ID = 1\nNode(1,1,1,id=2)    # Create Node at 1,1,1 with ID = 2\nNode(2,2,2,id=3)    # Create Node at 2,2,2 with ID = 3\n\nbeam_1 = Element.Beam(1,2)  # Create Beam connecting Node 1 and Node 2 (default ID = 1)\nbeam_2 = Element.Beam(2,3)  # Create Beam connecting Node 2 and Node 3 (default ID = 2)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/#elementget","title":"Element.get","text":"<p>Fetches elements  from the Civil NX and return the JSON representation. -Here, Civil model had 1 beam element </p><pre><code>print(Element.get())\n# Output\n# {'ELEM': {1: {'TYPE': 'BEAM', 'MATL': 1, 'SECT': 1, 'NODE': [1, 2], 'ANGLE': 0}}}\n</code></pre><p></p>"},{"location":"Element/#elementsync","title":"Element.sync","text":"<p>Retrieves Element data from the Civil NX and rebuilds the internal element list. -Here, Civil model had 1 beam element </p><pre><code>Element.sync()\nfor elem in Element.elements:\n    print(f'ELEM ID = {elem.ID} | TYPE = {elem.TYPE} | NODE = {elem.NODE}')\n# Output\n# ELEM ID = 1 | TYPE = BEAM | NODE = [1, 2]\n</code></pre><p></p>"},{"location":"Element/#elementdelete","title":"Element.delete","text":"<p>Deletes all element data from both Python and Civil NX.</p> <pre><code>Element.delete()\n</code></pre>"},{"location":"Element/1D/","title":"\u200e \u200e \u200e 1D Elements","text":""},{"location":"Element/1D/#1d-elements","title":"1D Elements","text":""},{"location":"Element/1D/#creation-methods","title":"Creation Methods","text":"<p>There are three methods available to create 1D elements:</p> <ul> <li> <p>Single Element (Main Class) :  eg. <code>Truss</code> , <code>Beam</code>     Creates one element connecting two nodes by their IDs:<code>i</code> and <code>j</code>.     Use this when we know the specific node IDs to connect.</p> </li> <li> <p>Start and End location (<code>SE</code>method) :  eg. <code>Truss.SE</code> , <code>Beam.SE</code>     Creates multiple equally spaced elements between a given start and end location. http://localhost:8000/Element/1D/</p> </li> <li>Start, Direction and Length (<code>SDL</code> method) :  eg. <code>Truss.SDL</code> , <code>Beam.SDL</code>     It creates equally divided elements at Start location along the the direction with given total length.</li> </ul> <p></p>"},{"location":"Element/1D/#truss","title":"TRUSS","text":"<p>A nested class within Element used to create truss elements.</p>"},{"location":"Element/1D/#object-attributes","title":"Object Attributes","text":"<p><code>ID</code>: Element ID <code>TYPE</code>: Element type = 'TRUSS' <code>MATL</code>: Material ID of the truss element <code>SECT</code>: Section ID of the truss element <code>NODE</code>: Nodes of element in list. eg: [1,2]  <code>ANGLE</code>: Beta angle of the truss element  </p> <p>To create truss element we have total 3 methods :  </p>"},{"location":"Element/1D/#1-truss","title":"1. Truss","text":"<p><code>Element.Truss(i:int, j:int, mat = 1, sect = 1, angle = 0, group = '' , id = 0)</code> Creates a truss between nodes <code>i</code> and <code>j</code>.</p>"},{"location":"Element/1D/#parameters","title":"Parameters","text":"<ul> <li><code>i</code>: Node ID of i-th end</li> <li><code>j</code>: Node ID of j-th end</li> <li><code>mat (default=1</code>: Material ID of the truss element</li> <li><code>sect (default=1)</code>: Section ID of the truss element</li> <li><code>angle (default=0)</code>: Beta angle of the truss element</li> <li><code>group (default='')</code>: Structure group of the element and its nodes (can be str or list eg. 'SG' or ['SG1','SG2'])</li> <li><code>id (default=0)</code>: Manually assign an ID.   If 0, ID will be auto-assigned.</li> </ul>"},{"location":"Element/1D/#examples","title":"Examples","text":"<pre><code>Node(0,0,0)    # Create Node at 0,0,0 with ID = 1(default)\nNode(1,1,1)    # Create Node at 1,1,1 with ID = 2(default)\n\nbeam1 = Element.Truss(1,2)  # Create Truss connecting Node 1 and Node 2 (default ID = 1)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#2-trussse","title":"2. Truss.SE","text":"<p><code>Element.Truss.SE(s_loc: list, e_loc: list, n: int = 1, mat, sect, angle, group, id)</code> Creates <code>n</code> truss elements between start and end location.</p>"},{"location":"Element/1D/#parameters_1","title":"Parameters","text":"<ul> <li><code>s_loc</code>: Start location. [x,y,z]</li> <li><code>e_loc</code>: End location. [x,y,z]</li> <li><code>n (default=1)</code>: Number of elements</li> <li><code>mat,sect,angle,group,id</code> : Same as Element.Truss() method</li> </ul>"},{"location":"Element/1D/#examples_1","title":"Examples","text":"<pre><code>Element.Truss.SE([0,0,0],[10,0,0],10) # Create 10 truss between (0,0,0) and (10,0,0) \n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#3-trusssdl","title":"3. Truss.SDL","text":"<p><code>Element.Truss.SDL(s_loc: list, dir: list, l: float, n: int = 1, mat, sect, angle, group, id)</code> Creates <code>n</code> truss elements along a straight line defined by direction <code>dir</code> and length <code>l</code> starting at <code>s_loc</code>.</p>"},{"location":"Element/1D/#parameters_2","title":"Parameters","text":"<ul> <li><code>s_loc</code>: Starting location [x, y, z]</li> <li><code>dir</code>: Direction vector [dx, dy, dz]</li> <li><code>l</code>: Total length of element</li> <li><code>n (default=1)</code>: Number of elements</li> <li><code>mat,sect,angle,group,id</code> : Same as Element.Truss() method</li> </ul>"},{"location":"Element/1D/#examples_2","title":"Examples","text":"<pre><code>Element.Truss.SDL([0,0,0],[0,0,1],10) # Create a vertical truss of length 10 at (0,0,0)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#beam","title":"BEAM","text":"<p>A nested class within Element used to create Beam elements.</p>"},{"location":"Element/1D/#object-attributes_1","title":"Object Attributes","text":"<p><code>ID</code>: Element ID <code>TYPE</code>: Element type = 'BEAM' <code>MATL</code>: Material ID of the beam element <code>SECT</code>: Section ID of the beam element <code>NODE</code>: Nodes of element in list. eg: [1,2]  <code>ANGLE</code>: Beta angle of the beam element  </p> <p>To create Beam element we have total 3 methods :  </p>"},{"location":"Element/1D/#1-beam","title":"1. Beam","text":"<p><code>Element.Beam(i:int, j:int, mat = 1, sect = 1, angle = 0, group = '' , id = 0)</code> Creates a Beam between nodes <code>i</code> and <code>j</code>.</p>"},{"location":"Element/1D/#parameters_3","title":"Parameters","text":"<ul> <li><code>i</code>: Node ID of i-th end</li> <li><code>j</code>: Node ID of j-th end</li> <li><code>mat (default=1</code>: Material ID of the Beam element</li> <li><code>sect (default=1)</code>: Section ID of the Beam element</li> <li><code>angle (default=0)</code>: Beta angle of the Beam element</li> <li><code>group (default='')</code>: Structure group of the element and its nodes(can be str or list eg. 'SG' or ['SG1','SG2'])</li> <li><code>id (default=0)</code>: Manually assign an ID.   If 0, ID will be auto-assigned.</li> </ul>"},{"location":"Element/1D/#examples_3","title":"Examples","text":"<pre><code>Node(0,0,0)    # Create Node at 0,0,0 with ID = 1(default)\nNode(1,1,1)    # Create Node at 1,1,1 with ID = 2(default)\n\nbeam1 = Element.Beam(1,2)  # Create Beam connecting Node 1 and Node 2 (default ID = 1)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#2-beamse","title":"2. Beam.SE","text":"<p><code>Element.Beam.SE(s_loc: list, e_loc: list, n: int = 1, mat, sect, angle, group, id)</code> Creates <code>n</code> Beam elements between start and end location.</p>"},{"location":"Element/1D/#parameters_4","title":"Parameters","text":"<ul> <li><code>s_loc</code>: Start location. [x,y,z]</li> <li><code>e_loc</code>: End location. [x,y,z]</li> <li><code>n (default=1)</code>: Number of elements</li> <li><code>mat,sect,angle,group,id</code> : Same as Element.Beam() method</li> </ul>"},{"location":"Element/1D/#examples_4","title":"Examples","text":"<pre><code>Element.Beam.SE([0,0,0],[10,0,0],10) # Create 10 Beam between (0,0,0) and (10,0,0) \n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#3-beamsdl","title":"3. Beam.SDL","text":"<p><code>Element.Beam.SDL(s_loc: list, dir: list, l: float, n: int = 1, mat, sect, angle, group, id)</code> Creates <code>n</code> Beam elements along a straight line defined by direction <code>dir</code> and length <code>l</code> starting at <code>s_loc</code>.</p>"},{"location":"Element/1D/#parameters_5","title":"Parameters","text":"<ul> <li><code>s_loc</code>: Starting location [x, y, z]</li> <li><code>dir</code>: Direction vector [dx, dy, dz]</li> <li><code>l</code>: Total length of element</li> <li><code>n (default=1)</code>: Number of elements</li> <li><code>mat,sect,angle,group,id</code> : Same as Element.Beam() method</li> </ul>"},{"location":"Element/1D/#examples_5","title":"Examples","text":"<pre><code>Element.Beam.SDL([0,0,0],[0,0,1],10) # Create a vertical beam of length 10 at (0,0,0)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#4-beampline","title":"4. Beam.PLine","text":"<p><code>Element.Beam.PLine(points_loc: list, n_div:int=0,deg:int=1,includePoint:bool=True, mat, sect, angle, group, id)</code> Creates equal <code>n_div</code> Beam elements passing through curve defined by <code>points_loc</code>.  It allows dividing a curve into equal-length segments while providing an option to include the original input points (even if they don\u2019t coincide with the division points).</p>"},{"location":"Element/1D/#parameters_6","title":"Parameters","text":"<ul> <li><code>points_loc</code>: List of control points defining the curve. [[x1, y1, z1],[x2, y2, z2],...]</li> <li><code>n_div</code>: No. of beam elements to be generated. If <code>n_div</code> = 0 , no interpolation will be considered. </li> <li><code>deg</code>: Degree of interpolation curve.  \u2003\u2003\u2003\u2003 1 : Linear \u00a0\u00a0|\u00a0\u00a0  2 : Quadratic  \u00a0\u00a0|\u00a0\u00a0  3 : Cubic</li> <li><code>includePoint</code>: Whether to include original input points in the final curve.  \u2003\u2003\u2003\u2003 \u2022 True: Original points always appear in the mesh. \u00a0\u00a0|\u00a0\u00a0  \u2022 False: Only equal subdivisions are used.</li> <li><code>mat,sect,angle,group,id</code> : Same as Element.Beam() method</li> </ul>"},{"location":"Element/1D/#examples_6","title":"Examples","text":"<pre><code>pts = [[0,0,0],[10,0,0],[20,5,0],[40,-10,0],[50,0,0],[60,0,0]]\nElement.Beam.PLine(pts,100,1,True)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#tension","title":"TENSION","text":"<p>A nested class within Element used to create tension-only elements, hooks, and cables.</p>"},{"location":"Element/1D/#object-attributes_2","title":"Object Attributes","text":"<p><code>ID</code>: Element ID <code>TYPE</code>: Element type = 'COMPTR' <code>MATL</code>: Material ID of the compression element <code>SECT</code>: Section ID of the compression element <code>NODE</code>: Nodes of element in list. eg: [1,2]  <code>ANGLE</code>: Beta angle of the compression element <code>STYPE</code>: Subtype of compression element (1=Compression-only, 2=Gap) <code>TENS</code>: Allowable tension or initial compression force <code>T_LIMIT</code>: Compression limit value <code>T_bLMT</code>: Compression limit flag (automatically set when T_LIMIT is provided) <code>NON_LEN</code>: Non-linear length parameter (for Gap subtype)  </p>"},{"location":"Element/1D/#tension-element","title":"Tension Element","text":"<p><code>Element.Tension(i:int, j:int, stype:int, mat = 1, sect = 1, angle = 0, group = '' , id = 0, non_len = None, cable_type = None, tens = None, t_limit = None)</code> Creates a tension element between nodes <code>i</code> and <code>j</code>.</p>"},{"location":"Element/1D/#parameters_7","title":"Parameters","text":"<ul> <li><code>i</code>: Node ID of i-th end</li> <li><code>j</code>: Node ID of j-th end</li> <li><code>stype</code>: Tension element subtype (1=Tension-only, 2=Hook, 3=Cable)</li> <li><code>mat (default=1)</code>: Material ID of the tension element</li> <li><code>sect (default=1)</code>: Section ID of the tension element</li> <li><code>angle (default=0)</code>: Beta angle of the tension element</li> <li><code>group (default='')</code>: Structure group of the element and its nodes (can be str or list eg. 'SG' or ['SG1','SG2'])</li> <li><code>id (default=0)</code>: Manually assign an ID. If 0, ID will be auto-assigned.</li> <li><code>non_len (default=None)</code>: Non-linear length parameter for Hook/Cable</li> <li><code>cable_type (default=None)</code>: Cable type for stype=3 (1=Pretension, 2=Horizontal, 3=Lu)</li> <li><code>tens (default=None)</code>: Initial tension force or allowable compression</li> <li><code>t_limit (default=None)</code>: Tension limit value</li> </ul>"},{"location":"Element/1D/#examples_7","title":"Examples","text":"<pre><code>Node(0,0,0)    # Create Node at 0,0,0 with ID = 1(default)\nNode(1,1,1)    # Create Node at 1,1,1 with ID = 2(default)\n\n# Simple tension-only member\ntension1 = Element.Tension(1,2,stype=1)\n\n# Tension-only with allowable compression and tension limit\ntension2 = Element.Tension(1,2,stype=1,tens=0.5,t_limit=-15)\n\n# Hook element with slack length\nhook1 = Element.Tension(3,4,stype=2,non_len=0.5)\n\n# Cable with initial tension and catenary effects\ncable1 = Element.Tension(5,6,stype=3,cable_type=3,tens=1000.0,non_len=0.1)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#subtypes","title":"Subtypes","text":""},{"location":"Element/1D/#1-tension-only-stype1","title":"1. Tension-only (stype=1)","text":"<ul> <li>Transfers tension forces only</li> <li>Can have allowable compression (<code>tens</code> parameter)</li> <li>Can have tension limit (<code>t_limit</code> parameter)</li> </ul>"},{"location":"Element/1D/#2-hook-stype2","title":"2. Hook (stype=2)","text":"<ul> <li>Has slack length defined by <code>non_len</code> parameter</li> <li>Only active when stretched beyond slack length</li> </ul>"},{"location":"Element/1D/#3-cable-stype3","title":"3. Cable (stype=3)","text":"<ul> <li>Supports catenary analysis</li> <li>Requires <code>cable_type</code> parameter</li> <li>Can have initial tension and slack length</li> </ul>"},{"location":"Element/1D/#compression","title":"COMPRESSION","text":"<p>A nested class within Element used to create compression-only elements and gaps.</p>"},{"location":"Element/1D/#object-attributes_3","title":"Object Attributes","text":"<p><code>ID</code>: Element ID <code>TYPE</code>: Element type = 'COMPTR' <code>MATL</code>: Material ID of the compression element <code>SECT</code>: Section ID of the compression element <code>NODE</code>: Nodes of element in list. eg: [1,2]  <code>ANGLE</code>: Beta angle of the compression element <code>STYPE</code>: Subtype of compression element (1=Compression-only, 2=Gap) <code>TENS</code>: Allowable tension or initial compression force <code>T_LIMIT</code>: Compression limit value <code>T_bLMT</code>: Compression limit flag (automatically set when T_LIMIT is provided) <code>NON_LEN</code>: Non-linear length parameter (for Gap subtype)  </p>"},{"location":"Element/1D/#compression-element","title":"Compression Element","text":"<p><code>Element.Compression(i:int, j:int, stype:int, mat = 1, sect = 1, angle = 0, group = '' , id = 0, tens = None, t_limit = None, non_len = None)</code> Creates a compression element between nodes <code>i</code> and <code>j</code>.</p>"},{"location":"Element/1D/#parameters_8","title":"Parameters","text":"<ul> <li><code>i</code>: Node ID of i-th end</li> <li><code>j</code>: Node ID of j-th end</li> <li><code>stype</code>: Compression element subtype (1=Compression-only, 2=Gap)</li> <li><code>mat (default=1)</code>: Material ID of the compression element</li> <li><code>sect (default=1)</code>: Section ID of the compression element</li> <li><code>angle (default=0)</code>: Beta angle of the compression element</li> <li><code>group (default='')</code>: Structure group of the element and its nodes (can be str or list eg. 'SG' or ['SG1','SG2'])</li> <li><code>id (default=0)</code>: Manually assign an ID. If 0, ID will be auto-assigned.</li> <li><code>tens (default=None)</code>: Allowable tension or initial compression force</li> <li><code>t_limit (default=None)</code>: Compression limit value</li> <li><code>non_len (default=None)</code>: Non-linear length parameter for gap</li> </ul>"},{"location":"Element/1D/#examples_8","title":"Examples","text":"<pre><code>Node(0,0,0)    # Create Node at 0,0,0 with ID = 1(default)\nNode(1,1,1)    # Create Node at 1,1,1 with ID = 2(default)\n\n# Simple compression-only member\ncomp1 = Element.Compression(1,2,stype=1)\n\n# Compression-only with tension limit and buckling limit\ncomp2 = Element.Compression(1,2,stype=1,tens=27,t_limit=-15)\n\n# Gap element with initial gap\ngap1 = Element.Compression(3,4,stype=2,non_len=0.25)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#subtypes_1","title":"Subtypes","text":""},{"location":"Element/1D/#1-compression-only-stype1","title":"1. Compression-only (stype=1)","text":"<ul> <li>Transfers compression forces only</li> <li>Can have allowable tension (<code>tens</code> parameter)</li> <li>Can have compression limit (<code>t_limit</code> parameter)</li> </ul>"},{"location":"Element/1D/#2-gap-stype2","title":"2. Gap (stype=2)","text":"<ul> <li>Has initial gap defined by <code>non_len</code> parameter</li> <li>Only active when compressed beyond gap length</li> </ul>"},{"location":"Element/1D/#examples_9","title":"Examples","text":""},{"location":"Element/1D/#1-portal-frame","title":"1. Portal Frame","text":"<pre><code>h = 3.5        # Height of each storey\nw = 4.0       # Width of each Bay\n\nn_storey = 10 # Total no. of storey\nn_bay = 5      # Total no. of bay\n\nfor i in range(n_bay+1):\n    for j in range(n_storey):\n        if i!=n_bay:\n            Element.Beam.SDL([i*w,0,j*h],[0,0,1],h,sect=1)  # Column -&gt; Sect ID = 1\n            Element.Beam.SDL([i*w,0,(j+1)*h],[1,0,0],w,sect=5) # Beam -&gt; Sect ID = 5\n        else:\n            Element.Beam.SDL([i*w,0,j*h],[0,0,1],h,sect=1) # Column -&gt; Sect ID = 1\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/1D/#2-warren-truss","title":"2. Warren Truss","text":"<pre><code>span = 20.5  # Span of truss\nn_div = 8    # No. of bottom divisions\nh = 2.5      # Height of truss\n\ndx = 0.5*span/n_div\n\nElement.Truss.SDL([0,0,0],[1,0,0],span,n_div)\n\nElement.Truss.SDL([dx,0,h],[1,0,0],span-2*dx,n_div-1)\n\nfor i in range(n_div):\n    Element.Truss(i+1,i+2+n_div)\n    Element.Truss(i+2,i+2+n_div)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/2D/","title":"\u200e \u200e \u200e 2D Elements","text":""},{"location":"Element/2D/#2d-elements","title":"2D Elements","text":""},{"location":"Element/2D/#plate","title":"PLATE","text":"<p>A nested class within Element used to create Plate elements.</p>"},{"location":"Element/2D/#object-attributes","title":"Object Attributes","text":"<p><code>ID</code>: Element ID <code>TYPE</code>: Element type = 'PLATE' <code>MATL</code>: Material ID of the beam element <code>SECT</code>: Section ID of the beam element <code>NODE</code>: Nodes of element in list. eg: [1,2,3,4]  <code>ANGLE</code>: Beta angle of the beam element <code>STYPE</code>: Type of Plate element  \u2003\u2003\u2003\u20031 : Thick \u00a0\u00a0|\u00a0\u00a0  2 : Thin  \u00a0\u00a0|\u00a0\u00a0  3 : Thick w Drilling dof  \u00a0\u00a0|\u00a0\u00a0  4 : Thin w Drilling dof </p>"},{"location":"Element/2D/#constructor","title":"Constructor","text":"<p><code>Element.Plate(nodes:list, stype:int=1, mat = 1, sect = 1, angle = 0, group = '' , id = 0)</code> Creates a Plate element.</p>"},{"location":"Element/2D/#parameters","title":"Parameters","text":"<ul> <li><code>node</code>: Nodes of the Plate element</li> <li><code>stype (default=3)</code>: Sub Type of Plate element  \u2003\u2003\u2003\u2003 1 : Thick \u00a0\u00a0|\u00a0\u00a0  2 : Thin  \u00a0\u00a0|\u00a0\u00a0  3 : Thick w Drilling dof  \u00a0\u00a0|\u00a0\u00a0  4 : Thin w Drilling dof  </li> <li><code>mat (default=1)</code>: Material ID of the Plate element  </li> <li><code>sect (default=1)</code>: Thickness ID of the Plate element  </li> <li><code>angle (default=0)</code>: Beta angle of the Plate element  </li> <li><code>group (default='')</code>: Structure group of the element and its nodes(can be str or list eg. 'SG' or ['SG1','SG2'])</li> <li><code>id (default=0)</code>: Manually assign an ID.   If 0, ID will be auto-assigned.  </li> </ul>"},{"location":"Element/2D/#examples","title":"Examples","text":"<pre><code>Node(0,0,0)\nNode(1,0,0)\nNode(1,1,0)\nNode(0,1,0)\nElement.Plate([1,2,3,4])\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/2D/#examples_1","title":"Examples","text":""},{"location":"Element/2D/#1-silo","title":"1. Silo","text":"<pre><code>import math\nR_top=5.0   # Radius at the top of Silo\nR_bot = 2.5 # Radius at the bottom of Silo &lt; R_top\n\nH_tot=20.0 # Total height of Silo\nH_tap = 5  # Height of tapered portion &lt; H_tot\n\nnR=32      # Sides of cylinder\nnH=20      # Divisions along height\n\nfor q in range(nH+1):\n    for i in range(nR):\n        theta = i*2*math.pi/nR\n        R = min(R_top,R_bot+q*H_tot/nH*(R_top-R_bot)/(H_tap))\n        Node(R*math.sin(theta),R*math.cos(theta),q*H_tot/nH)\n\nfor q in range(nH):\n    n_list = list(range(q*nR+1,(q+1)*nR+1))\n    for i in range(nR):\n        n1=n_list[i]\n        n2=n_list[(i+1)%nR]\n        Element.Plate([n1,n2,n2+nR,n1+nR])\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/3D/","title":"\u200e \u200e \u200e 3D Elements","text":""},{"location":"Element/3D/#3d-elements","title":"3D Elements","text":""},{"location":"Element/3D/#solid","title":"SOLID","text":"<p>A nested class within Element used to create Solid elements.</p>"},{"location":"Element/3D/#object-attributes","title":"Object Attributes","text":"<p><code>ID</code>: Element ID <code>TYPE</code>: Element type = 'SOLID' <code>MATL</code>: Material ID of the solid element <code>SECT</code>: Section ID of the solid element <code>NODE</code>: Nodes of element in list. eg: [1,2,3,4] for tetrahedral <code>STYPE</code>: Type of Solid element  </p>"},{"location":"Element/3D/#constructor","title":"Constructor","text":"<p><code>Element.Solid(nodes:list, mat = 1, sect = 0, group = '' , id = 0)</code> Creates a Solid element.</p>"},{"location":"Element/3D/#parameters","title":"Parameters","text":"<ul> <li><code>nodes</code>: Nodes of the Solid element</li> <li>4 nodes: Tetrahedral element</li> <li>6 nodes: Pentahedral (wedge) element  </li> <li>8 nodes: Hexahedral (brick) element</li> <li><code>mat (default=1)</code>: Material ID of the Solid element  </li> <li><code>sect (default=0)</code>: Section ID of the Solid element  </li> <li><code>group (default='')</code>: Structure group of the element and its nodes (can be str or list eg. 'SG' or ['SG1','SG2'])</li> <li><code>id (default=0)</code>: Manually assign an ID. If 0, ID will be auto-assigned.  </li> </ul>"},{"location":"Element/3D/#node-ordering","title":"Node Ordering","text":""},{"location":"Element/3D/#examples","title":"Examples","text":"<pre><code># Hexahedral element\nNode(0,0,0)    # Node 1\nNode(1,0,0)    # Node 2\nNode(1,1,0)    # Node 3\nNode(0,1,0)    # Node 4\nNode(0,0,1)    # Node 5\nNode(1,0,1)    # Node 6\nNode(1,1,1)    # Node 7\nNode(0,1,1)    # Node 8\n\nElement.Solid([1,2,3,4,5,6,7,8])\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/3D/#examples_1","title":"Examples","text":""},{"location":"Element/3D/#1-simple-tetrahedral","title":"1. Simple Tetrahedral","text":"<pre><code># Create a simple tetrahedral mesh for a pyramid\nbase_size = 2.0\nheight = 3.0\n\n# Base nodes (corrected order: N1, N2, N3)\nNode(0, 0, 0)                    # Node 1 (N1)\nNode(base_size, 0, 0)           # Node 2 (N2)\nNode(base_size/2, base_size, 0) # Node 3 (N3)\n\n# Apex node\nNode(base_size/2, base_size/3, height)  # Node 4 (N4)\n\n# Create tetrahedral element with correct node ordering\nElement.Solid([1,2,3,4], mat=1)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/3D/#2-hexahedral-block","title":"2. Hexahedral Block","text":"<pre><code># Create a structured 3D block using hexahedral elements\nlength = 4.0\nwidth = 2.0\nheight = 1.0\nn_x = 2  # Divisions in x direction\nn_y = 2  # Divisions in y direction\nn_z = 1  # Divisions in z direction\n\n# Generate nodes\nnodes = {}\nnode_id = 1\n\nfor k in range(n_z + 1):\n    for j in range(n_y + 1):\n        for i in range(n_x + 1):\n            x = i * length / n_x\n            y = j * width / n_y\n            z = k * height / n_z\n            Node(x, y, z)\n            nodes[(i,j,k)] = node_id\n            node_id += 1\n\n# Create hexahedral elements with correct node ordering\nelem_id = 1\nfor k in range(n_z):\n    for j in range(n_y):\n        for i in range(n_x):\n            # Define 8 corner nodes following N1-N8 pattern\n            n1 = nodes[(i,   j,   k)]      # N1\n            n2 = nodes[(i+1, j,   k)]      # N2\n            n3 = nodes[(i+1, j+1, k)]      # N3\n            n4 = nodes[(i,   j+1, k)]      # N4\n            n5 = nodes[(i,   j,   k+1)]    # N5\n            n6 = nodes[(i+1, j,   k+1)]    # N6\n            n7 = nodes[(i+1, j+1, k+1)]    # N7\n            n8 = nodes[(i,   j+1, k+1)]    # N8\n\n            Element.Solid([n1,n2,n3,n4,n5,n6,n7,n8], mat=1, id=elem_id)\n            elem_id += 1\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/3D/#3-pentahedral-elements","title":"3. Pentahedral Elements","text":"<pre><code># Create wedge elements for transitional meshing\n# Bottom triangular face: N1, N2, N3\nNode(0, 0, 0)    # Node 1 (N1)\nNode(2, 0, 0)    # Node 2 (N2)\nNode(1, 2, 0)    # Node 3 (N3)\n\n# Top triangular face: N4, N5, N6\nNode(0, 0, 1)    # Node 4 (N4)\nNode(2, 0, 1)    # Node 5 (N5)\nNode(1, 2, 1)    # Node 6 (N6)\n\n# Create pentahedral element with correct node ordering\nElement.Solid([1,2,3,4,5,6], mat=1)\n\nNode.create()\nElement.create()\n</code></pre>"},{"location":"Element/ElemetScaleFactor/","title":"\u200e \u200e \u200e Stiffness Scale Factor","text":""},{"location":"Element/ElemetScaleFactor/#element-stiffness-scale-factor","title":"Element Stiffness Scale Factor","text":"<p>A nested class within Element used to create and manage stiffness scale factors for elements.</p>"},{"location":"Element/ElemetScaleFactor/#constructor","title":"Constructor","text":"<p><code>Element.StiffnessScaleFactor(element_id, area_sf=1.0, asy_sf=1.0, asz_sf=1.0, ixx_sf=1.0, iyy_sf=1.0, izz_sf=1.0, wgt_sf=1.0, group=\"\", id=None)</code></p> <p>Creates a stiffness scale factor for the specified element(s).</p>"},{"location":"Element/ElemetScaleFactor/#parameters","title":"Parameters","text":"<ul> <li><code>element_id</code>: Element ID(s) where scale factor is applied (can be int or list)</li> <li><code>area_sf (default=1.0)</code>: Cross-sectional area scale factor</li> <li><code>asy_sf (default=1.0)</code>: Effective Shear Area scale factor (y-axis)</li> <li><code>asz_sf (default=1.0)</code>: Effective Shear Area scale factor (z-axis)</li> <li><code>ixx_sf (default=1.0)</code>: Torsional Resistance scale factor (x-axis)</li> <li><code>iyy_sf (default=1.0)</code>: Area Moment of Inertia scale factor (y-axis)</li> <li><code>izz_sf (default=1.0)</code>: Area Moment of Inertia scale factor (z-axis)</li> <li><code>wgt_sf (default=1.0)</code>: Weight scale factor</li> <li><code>group (default=\"\")</code>: Group name</li> <li><code>id (default=None)</code>: Scale factor ID (optional, auto-assigned if None)</li> </ul>"},{"location":"Element/ElemetScaleFactor/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ELEMENT_IDS</code> (list): List of element IDs where the scale factor is applied.</li> <li><code>AREA_SF</code> (float): Cross-sectional area scale factor.</li> <li><code>ASY_SF</code> (float): Effective Shear Area scale factor (y-axis).</li> <li><code>ASZ_SF</code> (float): Effective Shear Area scale factor (z-axis).</li> <li><code>IXX_SF</code> (float): Torsional Resistance scale factor (x-axis).</li> <li><code>IYY_SF</code> (float): Area Moment of Inertia scale factor (y-axis).</li> <li><code>IZZ_SF</code> (float): Area Moment of Inertia scale factor (z-axis).</li> <li><code>WGT_SF</code> (float): Weight scale factor.</li> <li><code>GROUP_NAME</code> (str): The name of the group.</li> <li><code>ID</code> (int): The ID of the stiffness scale factor entry.</li> </ul>"},{"location":"Element/ElemetScaleFactor/#methods","title":"Methods","text":""},{"location":"Element/ElemetScaleFactor/#json","title":"json","text":"<p>Returns JSON representation of all stiffness scale factors.</p> <pre><code>ssf1 = Element.StiffnessScaleFactor(908, area_sf=0.5, asy_sf=0.6)\nprint(Element.StiffnessScaleFactor.json())\n</code></pre>"},{"location":"Element/ElemetScaleFactor/#create","title":"create","text":"<p>Sends stiffness scale factors to Civil NX.</p> <pre><code>Element.StiffnessScaleFactor.create()\n</code></pre>"},{"location":"Element/ElemetScaleFactor/#get","title":"get","text":"<p>Fetches stiffness scale factors from Civil NX.</p> <pre><code>print(Element.StiffnessScaleFactor.get())\n</code></pre>"},{"location":"Element/ElemetScaleFactor/#sync","title":"sync","text":"<p>Synchronizes stiffness scale factors from Civil NX.</p> <pre><code>Element.StiffnessScaleFactor.sync()\n</code></pre>"},{"location":"Element/ElemetScaleFactor/#delete","title":"delete","text":"<p>Deletes all stiffness scale factors from both Python and Civil NX.</p> <pre><code>Element.StiffnessScaleFactor.delete()\n</code></pre>"},{"location":"Element/ElemetScaleFactor/#examples","title":"Examples","text":"<pre><code># Create nodes and elements\nfor i in range(3):\n    Node(i*10, 0, 0)\nNode.create()\n\nElement.Beam(1, 2)\nElement.Beam(2, 3)\nElement.create()\n\n# Single element stiffness scale factor\nElement.StiffnessScaleFactor(1, area_sf=0.5, asy_sf=0.6, asz_sf=0.7, \n                            ixx_sf=0.8, iyy_sf=0.8, izz_sf=0.9, wgt_sf=0.95)\n\n# Multiple elements with same scale factor\nElement.StiffnessScaleFactor([2, 3], area_sf=0.8, iyy_sf=0.9, izz_sf=0.9)\n\n# Create all scale factors\nElement.StiffnessScaleFactor.create()\n</code></pre>"},{"location":"Group/","title":"Groups","text":""},{"location":"Group/#group","title":"Group","text":"<p>The module provides functionality to create, manage, and synchronize different types of groups (Structure, Boundary, Load, and Tendon groups) in the model.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d')\n</code></pre>"},{"location":"Group/#methods","title":"Methods","text":""},{"location":"Group/#groupcreate","title":"Group.create","text":"<p>Creates all defined groups (Structure, Boundary, Load, and Tendon groups) in Civil NX.</p> <pre><code>Group.create()\n</code></pre>"},{"location":"Group/#groupsync","title":"Group.sync","text":"<p>Synchronizes all group types from Civil NX and rebuilds internal group lists.</p> <pre><code>Group.sync()\n</code></pre>"},{"location":"Group/#groupdelete","title":"Group.delete","text":"<p>Deletes all group data from both Python and Civil NX.</p> <pre><code>Group.delete()\n</code></pre>"},{"location":"Group/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import *\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\")  # Paste your Mapi Key\n\n# Create nodes and elements\nfor i in range(6):\n    Node(i*5, 0, 0)\nNode.create()\n\nfor i in range(5):\n    Element.Beam(i+1, i+2)\nElement.create()\n\n# Create Structure Groups\nGroup.Structure(\"Main Span\", nlist=[1, 2, 3, 4], elist=[1, 2, 3])\nGroup.Structure(\"Side Span\", nlist=[4, 5, 6], elist=[4, 5])\n\n# Update structure group\nGroup.Structure.update(\"Main Span\", \"a\", nlist=[5], elist=[])\n\n# Create other group types\nGroup.Boundary(\"Support Boundary\")\nGroup.Boundary(\"Expansion Joint\")\n\nGroup.Load(\"Dead Load Group\")\nGroup.Load(\"Live Load Group\")\n\nGroup.Tendon(\"PT Cable Group 1\")\nGroup.Tendon(\"PT Cable Group 2\")\n\n# Create all groups in Civil NX\nGroup.create()\n\n# Display group information\nprint(\"Structure Groups:\")\nfor sg in Group.Structure.Groups:\n    print(f'  {sg.NAME}: Nodes={sg.NLIST}, Elements={sg.ELIST}')\n\nprint(\"\\nBoundary Groups:\")\nfor bg in Group.Boundary.Groups:\n    print(f'  {bg.NAME}')\n\nprint(\"\\nLoad Groups:\")\nfor lg in Group.Load.Groups:\n    print(f'  {lg.NAME}')\n\nprint(\"\\nTendon Groups:\")\nfor tg in Group.Tendon.Groups:\n    print(f'  {tg.NAME}')\n</code></pre>"},{"location":"Group/001sg/","title":"\u200e \u200e \u200e Structure Group","text":""},{"location":"Group/001sg/#structure-group","title":"Structure Group","text":"<p>A nested class within Group used to create and manage structure groups containing nodes and elements.</p>"},{"location":"Group/001sg/#constructor","title":"Constructor","text":"<p><code>Group.Structure(name, nlist=[], elist=[])</code></p> <p>Creates a structure group with specified name and optional node/element lists.</p>"},{"location":"Group/001sg/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: Name of the structure group</li> <li><code>nlist (default=[])</code>: List of node IDs to include in the group</li> <li><code>elist (default=[])</code>: List of element IDs to include in the group</li> </ul>"},{"location":"Group/001sg/#class-attributes","title":"Class Attributes","text":"<p>Group.Structure.Groups -&gt; List of all structure groups.  </p>"},{"location":"Group/001sg/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NAME</code> (str): The name of the structure group.</li> <li><code>ID</code> (int): The ID of the structure group.</li> <li><code>ELIST</code> (list): A list of element numbers belonging to this group.</li> <li><code>NLIST</code> (list): A list of node numbers belonging to this group.</li> </ul>"},{"location":"Group/001sg/#retrieve-list","title":"Retrieve List","text":"<ul> <li> <p><code>elemsInGroup(groupName: str | list, unique: bool = True)</code> : Return Element IDs list in a structure group/groups   </p> </li> <li> <p><code>nodesInGroup(groupName: str | list, unique: bool = True)</code> : Return Node IDs list in a structure group</p> </li> </ul>"},{"location":"Group/001sg/#parameters_1","title":"Parameters","text":"<ul> <li><code>groupName</code> (str or list) : The name of the structure group or a list of group names.</li> <li><code>unique</code> (bool, default: True) : Determines whether to remove duplicate Node IDs from the list.</li> </ul>"},{"location":"Group/001sg/#methods","title":"Methods","text":""},{"location":"Group/001sg/#groupstructureupdate","title":"Group.Structure.update","text":"<p>Updates an existing structure group with new node/element lists.</p> <p><code>Group.Structure.update(name, operation=\"r\", nlist=[], elist=[])</code></p>"},{"location":"Group/001sg/#parameters_2","title":"Parameters","text":"<ul> <li><code>name</code>: Name of the group to update</li> <li><code>operation (default=\"r\")</code>: Operation type (\"r\" for replace, \"a\" for add)</li> <li><code>nlist (default=[])</code>: List of node IDs</li> <li><code>elist (default=[])</code>: List of element IDs</li> </ul> <pre><code># Replace existing lists\nGroup.Structure.update(\"Main Girder\", \"r\", nlist=[1, 2, 3, 4], elist=[1, 2, 3])\n\n# Add to existing lists\nGroup.Structure.update(\"Main Girder\", \"a\", nlist=[5], elist=[4])\n</code></pre>"},{"location":"Group/001sg/#groupstructurejson","title":"Group.Structure.json","text":"<p>Returns a JSON representation of all Structure Groups defined in python.</p> <pre><code>sg1 = Group.Structure(\"Main Girder\", nlist=[1, 2], elist=[1])\nprint(Group.Structure.json())\n\n# Output:\n# {'Assign': {1: {'NAME': 'Main Girder', 'P_TYPE': 0, 'N_LIST': [1, 2], 'E_LIST': [1]}}}\n</code></pre>"},{"location":"Group/001sg/#groupstructurecreate","title":"Group.Structure.create","text":"<p>Sends the current structure group list to Civil NX using a PUT request.</p> <pre><code>Group.Structure.create()\n</code></pre>"},{"location":"Group/001sg/#groupstructureget","title":"Group.Structure.get","text":"<p>Fetches structure groups from Civil NX and returns the JSON representation.</p> <pre><code>print(Group.Structure.get())\n</code></pre>"},{"location":"Group/001sg/#groupstructuresync","title":"Group.Structure.sync","text":"<p>Retrieves Structure Group data from Civil NX and rebuilds the internal group list.</p> <pre><code>Group.Structure.sync()\nfor sg in Group.Structure.Groups:\n    print(f'Structure Group: {sg.NAME} | Nodes: {sg.NLIST} | Elements: {sg.ELIST}')\n</code></pre>"},{"location":"Group/001sg/#groupstructuredelete","title":"Group.Structure.delete","text":"<p>Deletes all structure group data from both Python and Civil NX.</p> <pre><code>Group.Structure.delete()\n</code></pre>"},{"location":"Group/001sg/#examples","title":"Examples","text":"<pre><code># Create nodes and elements first\nfor i in range(3):\n    Node(i*10, 0, 0)\nNode.create()\n\nElement.Beam(1, 2)\nElement.Beam(2, 3)\nElement.create()\n\n# Create structure groups\nsg1 = Group.Structure(\"Main Girder\", nlist=[1, 2, 3], elist=[1, 2])\nsg2 = Group.Structure(\"Secondary\", nlist=[1], elist=[1])\n\nfor sg in Group.Structure.Groups:\n    print(f'Group ID: {sg.ID} | Name: {sg.NAME} | Nodes: {sg.NLIST} | Elements: {sg.ELIST}')\n\n# Output:\n# Group ID: 1 | Name: Main Girder | Nodes: [1, 2, 3] | Elements: [1, 2]\n# Group ID: 2 | Name: Secondary | Nodes: [1] | Elements: [1]\n</code></pre>"},{"location":"Group/002bg/","title":"\u200e \u200e \u200e Boundary Group","text":""},{"location":"Group/002bg/#boundary-group","title":"Boundary Group","text":"<p>A nested class within Group used to create and manage boundary groups.</p>"},{"location":"Group/002bg/#constructor","title":"Constructor","text":"<p><code>Group.Boundary(name)</code></p> <p>Creates a boundary group with specified name.</p>"},{"location":"Group/002bg/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: Name of the boundary group</li> </ul>"},{"location":"Group/002bg/#class-attributes","title":"Class Attributes","text":"<p>Group.Boundary.Groups -&gt; List of all boundary groups.  </p>"},{"location":"Group/002bg/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NAME</code> (str): The name of the boundary group.</li> <li><code>ID</code> (int): The ID of the boundary group.</li> </ul>"},{"location":"Group/002bg/#methods","title":"Methods","text":""},{"location":"Group/002bg/#json","title":"json","text":"<p>Returns JSON representation of all boundary groups.</p> <pre><code>bg1 = Group.Boundary(\"Support Group\")\nprint(Group.Boundary.json())\n\n# Output:\n# {'Assign': {1: {'NAME': 'Support Group', 'AUTOTYPE': 0}}}\n</code></pre>"},{"location":"Group/002bg/#create","title":"create","text":"<p>Sends boundary groups to Civil NX.</p> <pre><code>Group.Boundary.create()\n</code></pre>"},{"location":"Group/002bg/#get","title":"get","text":"<p>Fetches boundary groups from Civil NX.</p> <pre><code>print(Group.Boundary.get())\n</code></pre>"},{"location":"Group/002bg/#sync","title":"sync","text":"<p>Synchronizes boundary groups from Civil NX.</p> <pre><code>Group.Boundary.sync()\n</code></pre>"},{"location":"Group/002bg/#delete","title":"delete","text":"<p>Deletes all boundary groups from both Python and Civil NX.</p> <pre><code>Group.Boundary.delete()\n</code></pre>"},{"location":"Group/002bg/#examples","title":"Examples","text":"<pre><code># Create boundary groups\nbg1 = Group.Boundary(\"Support Group\")\nbg2 = Group.Boundary(\"Fixed Ends\")\n\nfor bg in Group.Boundary.Groups:\n    print(f'Boundary Group ID: {bg.ID} | Name: {bg.NAME}')\n\n# Output:\n# Boundary Group ID: 1 | Name: Support Group\n# Boundary Group ID: 2 | Name: Fixed Ends\n</code></pre>"},{"location":"Group/003lg/","title":"\u200e \u200e \u200e Load Group","text":""},{"location":"Group/003lg/#load-group","title":"Load Group","text":"<p>A nested class within Group used to create and manage load groups.</p>"},{"location":"Group/003lg/#constructor","title":"Constructor","text":"<p><code>Group.Load(name)</code></p> <p>Creates a load group with specified name.</p>"},{"location":"Group/003lg/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: Name of the load group</li> </ul>"},{"location":"Group/003lg/#class-attributes","title":"Class Attributes","text":"<p>Group.Load.Groups -&gt; List of all load groups.  </p>"},{"location":"Group/003lg/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NAME</code> (str): The name of the load group.</li> <li><code>ID</code> (int): The ID of the load group.</li> </ul>"},{"location":"Group/003lg/#methods","title":"Methods","text":""},{"location":"Group/003lg/#json","title":"json","text":"<p>Returns JSON representation of all load groups.</p> <pre><code>lg1 = Group.Load(\"Dead Load Group\")\nprint(Group.Load.json())\n\n# Output:\n# {'Assign': {1: {'NAME': 'Dead Load Group'}}}\n</code></pre>"},{"location":"Group/003lg/#create","title":"create","text":"<p>Sends load groups to Civil NX.</p> <pre><code>Group.Load.create()\n</code></pre>"},{"location":"Group/003lg/#get","title":"get","text":"<p>Fetches load groups from Civil NX.</p> <pre><code>print(Group.Load.get())\n</code></pre>"},{"location":"Group/003lg/#sync","title":"sync","text":"<p>Synchronizes load groups from Civil NX.</p> <pre><code>Group.Load.sync()\n</code></pre>"},{"location":"Group/003lg/#delete","title":"delete","text":"<p>Deletes all load groups from both Python and Civil NX.</p> <pre><code>Group.Load.delete()\n</code></pre>"},{"location":"Group/003lg/#examples","title":"Examples","text":"<pre><code># Create load groups\nlg1 = Group.Load(\"Dead Load Group\")\nlg2 = Group.Load(\"Live Load Group\")\n\nfor lg in Group.Load.Groups:\n    print(f'Load Group ID: {lg.ID} | Name: {lg.NAME}')\n\n# Output:\n# Load Group ID: 1 | Name: Dead Load Group\n# Load Group ID: 2 | Name: Live Load Group\n</code></pre>"},{"location":"Group/004tg/","title":"\u200e \u200e \u200e Tendon Group","text":""},{"location":"Group/004tg/#tendon-group","title":"Tendon Group","text":"<p>A nested class within Group used to create and manage tendon groups.</p>"},{"location":"Group/004tg/#constructor","title":"Constructor","text":"<p><code>Group.Tendon(name)</code></p> <p>Creates a tendon group with specified name.</p>"},{"location":"Group/004tg/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: Name of the tendon group</li> </ul>"},{"location":"Group/004tg/#class-attributes","title":"Class Attributes","text":"<p>Group.Tendon.Groups -&gt; List of all tendon groups. </p>"},{"location":"Group/004tg/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NAME</code> (str): The name of the tendon group.</li> <li><code>ID</code> (int): The ID of the tendon group.</li> </ul>"},{"location":"Group/004tg/#methods","title":"Methods","text":""},{"location":"Group/004tg/#json","title":"json","text":"<p>Returns JSON representation of all tendon groups.</p> <pre><code>tg1 = Group.Tendon(\"PT Group 1\")\nprint(Group.Tendon.json())\n\n# Output:\n# {'Assign': {1: {'NAME': 'PT Group 1'}}}\n</code></pre>"},{"location":"Group/004tg/#create","title":"create","text":"<p>Sends tendon groups to Civil NX.</p> <pre><code>Group.Tendon.create()\n</code></pre>"},{"location":"Group/004tg/#get","title":"get","text":"<p>Fetches tendon groups from Civil NX.</p> <pre><code>print(Group.Tendon.get())\n</code></pre>"},{"location":"Group/004tg/#sync","title":"sync","text":"<p>Synchronizes tendon groups from Civil NX.</p> <pre><code>Group.Tendon.sync()\n</code></pre>"},{"location":"Group/004tg/#delete","title":"delete","text":"<p>Deletes all tendon groups from both Python and Civil NX.</p> <pre><code>Group.Tendon.delete()\n</code></pre>"},{"location":"Group/004tg/#examples","title":"Examples","text":"<pre><code># Create tendon groups\ntg1 = Group.Tendon(\"PT Group 1\")\ntg2 = Group.Tendon(\"PT Group 2\")\n\nfor tg in Group.Tendon.Groups:\n    print(f'Tendon Group ID: {tg.ID} | Name: {tg.NAME}')\n\n# Output:\n# Tendon Group ID: 1 | Name: PT Group 1\n# Tendon Group ID: 2 | Name: PT Group 2\n</code></pre>"},{"location":"Load/","title":"Load","text":""},{"location":"Load/#load","title":"Load","text":"<p>The Load class provides a unified interface to create different types of loads and includes nested classes for specific load types.</p>"},{"location":"Load/#methods","title":"Methods","text":""},{"location":"Load/#create","title":"create","text":"<p>Creates all defined load cases and loads (Self-Weight, Nodal, and Beam loads) in Civil NX.</p> <pre><code>Load.create()\n</code></pre>"},{"location":"Load/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import*\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\") #Paste your Mapi Key\n\nfor j in range(6):\n    for i in range(2):\n        Node(i*10,j*2,0)\n        Node.create()\nj = 0\nfor k in range(6):   \n    for i in range(1,2):\n        Element.Beam(i +j,i+1 +j)\n        Element.create()\n    j = j + 2\n\n#Load Case\nLoad_Case(\"D\",\"SW\")\nLoad_Case(\"L\",\"Nodal Load\")\nLoad_Case(\"USER\",\"Test Load 1\",\"Test Load 2\",\"Test Load 3\",\"Test Load 4\",\"Test Load 5\",\"Test Load 6\")\n\nLoad_Case.create()  #Create Load Case in Civil NX\n\n#Self Weight Load\n\nLoad.SW(\"SW\",\"Z\",-1)\n\n#Nodal Load\n\nLoad.Nodal(1,\"Nodal Load\",\"\",FX=10,FY=20,FZ=-50,id=1)\nLoad.Nodal(3,\"Nodal Load\",\"\",MX=100,MY=20,MZ=-5,id=2)\n\n#Concentrated Load\n\nLoad.Beam(1,\"Test Load 1\",0,\"\",\"GZ\",1,[0.3,0.5,0.7],[-20,-30,-40],\"BEAM\",\"CONLOAD\")\n\n#UDL Load\n\nLoad.Beam(2,\"Test Load 2\",-50,\"\",\"GZ\")\n\n#Trapezoidal load\n\nLoad.Beam(3,\"Test Load 3\",0,\"\",\"GZ\",\"\",[0,0.3,0.7,1],[0,-20,-50,0])\n\n#Concentrated Moment/Torsion\n\nLoad.Beam(4,\"Test Load 4\",0,\"\",\"GZ\",\"\",[0.3,0.7],[-20,-50],\"BEAM\",\"CONMOMENT\")\n\n#Uniform Moment/Torsion\n\nLoad.Beam(5,\"Test Load 5\",0,\"\",\"GZ\",\"\",[0,1],[-20,-20],\"BEAM\",\"UNIMOMENT\")\n\n#Trapezoidal Moment/Torsion\n\nLoad.Beam(6,\"Test Load 6\",0,\"\",\"GZ\",\"\",[0.3,0.7],[-30,-50],\"BEAM\",\"UNIMOMENT\")\n\n#Create All load in Civil NX\nLoad.create()\n</code></pre>"},{"location":"Load/000sw/","title":"\u200e \u200e \u200e Self Weight","text":""},{"location":"Load/000sw/#self-weight-load","title":"Self-Weight Load","text":"<p>A nested class within Load used to create self-weight loads.</p>"},{"location":"Load/000sw/#constructor","title":"Constructor","text":"<p><code>Load.SW(load_case, dir = \"Z\", value = -1, load_group = \"\")</code></p> <p>Creates a self-weight load for the specified load case.</p>"},{"location":"Load/000sw/#parameters","title":"Parameters","text":"<ul> <li><code>load_case</code>: Name of the load case</li> <li><code>dir (default=\"Z\")</code>: Direction of self-weight (\"X\", \"Y\", or \"Z\")</li> <li><code>value (default=-1)</code>: Magnitude of self-weight (can be int or list [FX, FY, FZ])</li> <li><code>load_group (default=\"\")</code>: Load group name</li> </ul>"},{"location":"Load/000sw/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>LC</code> (str): The name of the load case.</li> <li><code>DIR</code> (str): The direction of the self-weight (\"X\", \"Y\", or \"Z\").</li> <li><code>FV</code> (list): A list of three floats representing the load factors in X, Y, and Z directions.</li> <li><code>LG</code> (str): The name of the load group.</li> <li><code>ID</code> (int): The ID of the self-weight load entry.</li> </ul>"},{"location":"Load/000sw/#methods","title":"Methods","text":""},{"location":"Load/000sw/#json","title":"json","text":"<p>Returns JSON representation of all self-weight loads.</p> <pre><code>sw1 = Load.SW(\"Dead Load\", \"Z\", -1)\nprint(Load.SW.json())\n</code></pre>"},{"location":"Load/000sw/#create","title":"create","text":"<p>Sends self-weight loads to Civil NX.</p> <pre><code>Load.SW.create()\n</code></pre>"},{"location":"Load/000sw/#get","title":"get","text":"<p>Fetches self-weight loads from Civil NX.</p> <pre><code>print(Load.SW.get())\n</code></pre>"},{"location":"Load/000sw/#sync","title":"sync","text":"<p>Synchronizes self-weight loads from Civil NX.</p> <pre><code>Load.SW.sync()\n</code></pre>"},{"location":"Load/000sw/#delete","title":"delete","text":"<p>Deletes all self-weight loads from both Python and Civil NX.</p> <pre><code>Load.SW.delete()\n</code></pre>"},{"location":"Load/000sw/#examples","title":"Examples","text":"<pre><code># Simple self-weight in Z direction\nfor i in range(2):\n    Node(i*10,0,0)\n    Node.create()\n\nElement.Beam(1,2)\nElement.create()\n\n#Load Case\nLoad_Case(\"D\",\"SW Load\")\nLoad_Case.create()\n\nLoad.SW(\"SW Load\",\"Z\",-1)\nLoad.SW.create()\n</code></pre>"},{"location":"Load/001nodal/","title":"\u200e \u200e \u200e Nodal Load","text":""},{"location":"Load/001nodal/#nodal-load","title":"Nodal Load","text":"<p>A nested class within Load used to create nodal loads.</p>"},{"location":"Load/001nodal/#constructor","title":"Constructor","text":"<p><code>Load.Nodal(node, load_case, load_group = \"\", FX = 0, FY = 0, FZ = 0, MX = 0, MY = 0, MZ = 0, id = \"\")</code></p> <p>Creates nodal loads (forces and moments) at specified nodes.</p>"},{"location":"Load/001nodal/#parameters","title":"Parameters","text":"<ul> <li><code>node</code>: Node ID where load is applied</li> <li><code>load_case</code>: Name of the load case</li> <li><code>load_group (default=\"\")</code>: Load group name</li> <li><code>FX, FY, FZ (default=0)</code>: Force components in X, Y, Z directions</li> <li><code>MX, MY, MZ (default=0)</code>: Moment components about X, Y, Z axes</li> <li><code>id (default=\"\")</code>: Manual ID assignment (auto-assigned if empty)</li> </ul>"},{"location":"Load/001nodal/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NODE</code> (int): The node number where the load is applied.</li> <li><code>LCN</code> (str): The name of the load case.</li> <li><code>LDGR</code> (str): The name of the load group.</li> <li><code>FX</code> (float): Force in the global X direction.</li> <li><code>FY</code> (float): Force in the global Y direction.</li> <li><code>FZ</code> (float): Force in the global Z direction.</li> <li><code>MX</code> (float): Moment about the global X axis.</li> <li><code>MY</code> (float): Moment about the global Y axis.</li> <li><code>MZ</code> (float): Moment about the global Z axis.</li> <li><code>ID</code> (int): The ID of the nodal load entry.</li> </ul>"},{"location":"Load/001nodal/#methods","title":"Methods","text":""},{"location":"Load/001nodal/#json","title":"json","text":"<p>Returns JSON representation of all nodal loads.</p> <pre><code>nl1 = Load.Nodal(101, \"Live Load\", FZ=-50)\nprint(Load.Nodal.json())\n</code></pre>"},{"location":"Load/001nodal/#create","title":"create","text":"<p>Sends nodal loads to Civil NX.</p> <pre><code>Load.Nodal.create()\n</code></pre>"},{"location":"Load/001nodal/#get","title":"get","text":"<p>Fetches nodal loads from Civil NX.</p> <pre><code>print(Load.Nodal.get())\n</code></pre>"},{"location":"Load/001nodal/#sync","title":"sync","text":"<p>Synchronizes nodal loads from Civil NX.</p> <pre><code>Load.Nodal.sync()\n</code></pre>"},{"location":"Load/001nodal/#delete","title":"delete","text":"<p>Deletes all nodal loads from both Python and Civil NX.</p> <pre><code>Load.Nodal.delete()\n</code></pre>"},{"location":"Load/001nodal/#examples","title":"Examples","text":"<pre><code>#Nodal Load Example\nfor i in range(2):\n    Node(i*10,0,0)\n    Node.create()\n\nElement.Beam(1,2)\nElement.create()\n\n#Load Case\nLoad_Case(\"L\",\"Nodal Load\")\nLoad_Case.create()\n\n#Define Nodal Load\n\nLoad.Nodal(1,\"Nodal Load\",\"\",FX=100,FY=200,FZ=-50,id=1)\nLoad.Nodal(2,\"Nodal Load\",\"\",MX=10,MY=20,MZ=-5,id=2)\nLoad.Nodal.create()\n</code></pre>"},{"location":"Load/002beam/","title":"\u200e \u200e \u200e Beam Load","text":""},{"location":"Load/002beam/#beam-load","title":"Beam Load","text":"<p>A nested class within Load used to create beam loads with comprehensive options for distributed loads, concentrated loads, and eccentricity.</p>"},{"location":"Load/002beam/#constructor","title":"Constructor","text":"<p><code>Load.Beam(element, load_case, load_group = \"\", value, direction = \"GZ\", id = \"\", D = [0, 1, 0, 0], P = [0, 0, 0, 0], cmd = \"BEAM\", typ = \"UNILOAD\", use_ecc = False, use_proj = False, eccn_dir = \"LZ\", eccn_type = 1, ieccn = 0, jeccn = 0.0000195, adnl_h = False, adnl_h_i = 0, adnl_h_j = 0.0000195)</code></p> <p>Creates beam loads with various distribution patterns and advanced options.</p>"},{"location":"Load/002beam/#parameters","title":"Parameters","text":"<ul> <li><code>element</code>: Element number where load is applied</li> <li><code>load_case</code>: Load case name</li> <li><code>load_group (default=\"\")</code>: Load group name</li> <li><code>value</code>: Load magnitude</li> <li><code>direction (default=\"GZ\")</code>: Load direction (\"GX\", \"GY\", \"GZ\", \"LX\", \"LY\", \"LZ\")</li> <li><code>id (default=\"\")</code>: Manual ID assignment (auto-assigned if empty)</li> <li><code>D (default=[0, 1, 0, 0])</code>: Relative distance array (4 values based on element length)</li> <li><code>P (default=[0, 0, 0, 0])</code>: Load magnitude at corresponding D positions</li> <li><code>cmd (default=\"BEAM\")</code>: Load command (\"BEAM\", \"LINE\", \"TYPICAL\")</li> <li><code>typ (default=\"UNILOAD\")</code>: Load type (\"CONLOAD\", \"CONMOMENT\", \"UNILOAD\", \"UNIMOMENT\", \"PRESSURE\")</li> <li><code>use_ecc (default=False)</code>: Enable eccentricity</li> <li><code>use_proj (default=False)</code>: Enable projection</li> <li><code>eccn_dir (default=\"LZ\")</code>: Eccentricity direction</li> <li><code>eccn_type (default=1)</code>: Eccentricity from offset (1) or centroid (0)</li> <li><code>ieccn, jeccn (default=0, 0.0000195)</code>: Eccentricity values at i-end and j-end</li> <li><code>adnl_h (default=False)</code>: Consider additional height for pressure loads</li> <li><code>adnl_h_i, adnl_h_j (default=0, 0.0000195)</code>: Additional height values at ends</li> </ul>"},{"location":"Load/002beam/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ELEMENT</code> (int): The element number to which the load is applied.</li> <li><code>LCN</code> (str): The name of the load case.</li> <li><code>LDGR</code> (str): The name of the load group.</li> <li><code>VALUE</code> (float): The magnitude of the load.</li> <li><code>DIRECTION</code> (str): The direction of the load (e.g., \"GZ\", \"LX\").</li> <li><code>CMD</code> (str): The command type for the load (e.g., \"BEAM\", \"LINE\").</li> <li><code>TYPE</code> (str): The type of load (e.g., \"UNILOAD\", \"CONLOAD\").</li> <li><code>USE_PROJECTION</code> (bool): Flag to indicate if projection is used.</li> <li><code>USE_ECCEN</code> (bool): Flag to indicate if eccentricity is used.</li> <li><code>ECCEN_TYPE</code> (int): Eccentricity type (0 for centroid, 1 for offset).</li> <li><code>ECCEN_DIR</code> (str): Direction of eccentricity.</li> <li><code>IECC</code> (float): Eccentricity value at the i-end of the element.</li> <li><code>JECC</code> (float): Eccentricity value at the j-end of the element.</li> <li><code>USE_JECC</code> (bool): Flag to indicate if j-end eccentricity is used.</li> <li><code>D</code> (list): List of four floats representing relative distances along the element for varying loads.</li> <li><code>P</code> (list): List of four floats representing load magnitudes at the corresponding 'D' positions.</li> <li><code>USE_H</code> (bool): Flag to indicate if additional H is considered for pressure loads.</li> <li><code>I_H</code> (float): Additional H value at the i-end for pressure loads.</li> <li><code>USE_JH</code> (bool): Flag to indicate if additional H at j-end is used.</li> <li><code>J_H</code> (float): Additional H value at the j-end for pressure loads.</li> <li><code>ID</code> (int): The ID of the beam load entry.</li> </ul>"},{"location":"Load/002beam/#methods","title":"Methods","text":""},{"location":"Load/002beam/#json","title":"json","text":"<p>Returns JSON representation of all beam loads.</p> <pre><code>bl1 = Load.Beam(115, \"Live Load\",\"\", -50.0)\nprint(Load.Beam.json())\n</code></pre>"},{"location":"Load/002beam/#create","title":"create","text":"<p>Sends beam loads to Civil NX.</p> <pre><code>Load.Beam.create()\n</code></pre>"},{"location":"Load/002beam/#get","title":"get","text":"<p>Fetches beam loads from Civil NX.</p> <pre><code>print(Load.Beam.get())\n</code></pre>"},{"location":"Load/002beam/#sync","title":"sync","text":"<p>Synchronizes beam loads from Civil NX.</p> <pre><code>Load.Beam.sync()\n</code></pre>"},{"location":"Load/002beam/#delete","title":"delete","text":"<p>Deletes all beam loads from both Python and Civil NX.</p> <pre><code>Load.Beam.delete()\n</code></pre>"},{"location":"Load/002beam/#examples","title":"Examples","text":""},{"location":"Load/002beam/#uniform-distributed-load","title":"Uniform Distributed Load","text":"<pre><code>#UDL Load Example\nfor i in range(2):\n    Node(i*10,0,0)\n    Node.create()\n\nElement.Beam(1,2)\nElement.create()\n\n#Define Load Case\nLoad_Case(\"L\",\"UDL Load\")\nLoad_Case.create()\n\n#Apply UDL Load\n\nLoad.Beam(1,\"UDL Load\",\"\",-50,\"GZ\")\nLoad.Beam.create()\n</code></pre>"},{"location":"Load/002beam/#trapezoidal-load","title":"Trapezoidal Load","text":"<pre><code>#Trapezoidal Load Example\nfor i in range(2):\n    Node(i*10,0,0)\n    Node.create()\n\nElement.Beam(1,2)\nElement.create()\n\n#Define Load Case\nLoad_Case(\"L\",\"Trapezoidal Load\")\nLoad_Case.create()\n\n#Apply Trapezoidal Load\n\nLoad.Beam(1,\"Trapezoidal Load\",\"\",0,\"GZ\",\"\",[0,0.3,0.7,1],[0,-20,-50,0])\nLoad.Beam.create()\n</code></pre>"},{"location":"Load/002beam/#concentrated-load","title":"Concentrated Load","text":"<pre><code>#Concentrated Load Example\nfor i in range(2):\n    Node(i*10,0,0)\n    Node.create()\n\nElement.Beam(1,2)\nElement.create()\n\n#Load Case\nLoad_Case(\"L\",\"Test Load\")\nLoad_Case.create()\n\n#Apply Concentrated Load\n\nLoad.Beam(1,\"Test Load\",\"\",0,\"GZ\",1,[0.3,0.5,0.7],[-20,-30,-40],\"BEAM\",\"CONLOAD\")\nLoad.Beam.create()\n</code></pre>"},{"location":"Load/002beam/#load-with-eccentricity","title":"Load with Eccentricity","text":"<pre><code>#Eccentric Load Example\nfor i in range(2):\n    Node(i*10,0,0)\n    Node.create()\n\nElement.Beam(1,2)\nElement.create()\n\n#Define Load Case\nLoad_Case(\"L\",\"Test Load\")\nLoad_Case.create()\n\n# Apply Load with 2.5 m eccentricity at i-end\n\nLoad.Beam(1, \"Test Load\",\"\", -100, use_ecc=True, ieccn=2.5)\nLoad.Beam.create()\n</code></pre>"},{"location":"Load/002beam/#concentrated-momenttorsion","title":"Concentrated Moment/Torsion","text":"<pre><code>#Concentrated Moment/Torsion Example\nfor i in range(2):\n    Node(i*10,0,0)\n    Node.create()\n\nElement.Beam(1,2)\nElement.create()\n\n#Define Load Case\nLoad_Case(\"L\",\"Test Load\")\nLoad_Case.create()\n\n# Apply Concentrated Moment/Torsion\n\nLoad.Beam(1,\"Test Load\",\"\",0,\"GZ\",\"\",[0.3,0.7],[-20,-50],\"BEAM\",\"CONMOMENT\")\nLoad.Beam.create()\n</code></pre>"},{"location":"Load/002beam/#uniform-trapezoidal-momenttorsion","title":"Uniform &amp; Trapezoidal Moment/Torsion","text":"<pre><code>#Uniform &amp; Trapezoidal Moment/Torsion Example\nfor i in range(3):\n    Node(i*10,0,0)\n    Node.create()\n\nElement.Beam(1,2)\nElement.Beam(2,3)\nElement.create()\n\n#Define Load Case\nLoad_Case(\"L\",\"Test Load 1\",\"Test Load 2\")\nLoad_Case.create()\n\n#Uniform Moment/Torsion\n\nLoad.Beam(1,\"Test Load 1\",\"\",0,\"GZ\",\"\",[0,1],[-20,-20],\"BEAM\",\"UNIMOMENT\")\n\n#Trapezoidal Moment/Torsion\n\nLoad.Beam(2,\"Test Load 2\",\"\",0,\"GZ\",\"\",[0.3,0.7],[-30,-50],\"BEAM\",\"UNIMOMENT\")\nLoad.Beam.create()\n</code></pre>"},{"location":"Load/003LoadToMass/","title":"\u200e \u200e \u200e Load To Mass","text":""},{"location":"Load/003LoadToMass/#load-to-mass","title":"Load to Mass","text":"<p>A nested class within Load used to create load to mass conversion for dynamic analysis.</p>"},{"location":"Load/003LoadToMass/#constructor","title":"Constructor","text":"<p><code>Load.LoadToMass(dir, load_case, load_factor=None, nodal_load=True, beam_load=True, floor_load=True, pressure=True, gravity=9.806)</code></p> <p>Creates load to mass conversion and converts to JSON format for dynamic analysis calculations.</p>"},{"location":"Load/003LoadToMass/#parameters","title":"Parameters","text":"<ul> <li><code>dir</code>: Mass Direction - \"X\", \"Y\", \"Z\", \"XY\", \"YZ\", \"XZ\", \"XYZ\" (defaults to \"XYZ\" if invalid)</li> <li><code>load_case</code>: List of load case names or single load case name</li> <li><code>load_factor (default=None)</code>: List of scale factors corresponding to load cases. If None or shorter than load_case, remaining factors default to 1.0</li> <li><code>nodal_load (default=True)</code>: Include nodal loads in mass conversion</li> <li><code>beam_load (default=True)</code>: Include beam loads in mass conversion</li> <li><code>floor_load (default=True)</code>: Include floor loads in mass conversion</li> <li><code>pressure (default=True)</code>: Include pressure loads in mass conversion</li> <li><code>gravity (default=9.806)</code>: Gravity acceleration value</li> </ul>"},{"location":"Load/003LoadToMass/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>DIR</code> (str): The mass direction for conversion.</li> <li><code>LOAD_CASE</code> (list): List of load case names to be converted to mass.</li> <li><code>LOAD_FACTOR</code> (list): List of scale factors for each load case.</li> <li><code>NODAL</code> (bool): Flag to include nodal loads.</li> <li><code>BEAM</code> (bool): Flag to include beam loads.</li> <li><code>FLOOR</code> (bool): Flag to include floor loads.</li> <li><code>PRESSURE</code> (bool): Flag to include pressure loads.</li> <li><code>GRAVITY</code> (float): Gravity acceleration value.</li> </ul>"},{"location":"Load/003LoadToMass/#methods","title":"Methods","text":""},{"location":"Load/003LoadToMass/#json","title":"json","text":"<p>Returns JSON representation of all load to mass conversions.</p> <pre><code>ltm1 = Load.LoadToMass(\"Z\", [\"DL\", \"LL\"], [1.0, 0.5])\nprint(Load.LoadToMass.json())\n</code></pre>"},{"location":"Load/003LoadToMass/#create","title":"create","text":"<p>Sends load to mass conversion to Civil NX.</p> <pre><code>Load.LoadToMass.create()\n</code></pre>"},{"location":"Load/003LoadToMass/#get","title":"get","text":"<p>Fetches load to mass conversion from Civil NX.</p> <pre><code>print(Load.LoadToMass.get())\n</code></pre>"},{"location":"Load/003LoadToMass/#sync","title":"sync","text":"<p>Synchronizes load to mass conversion from Civil NX.</p> <pre><code>Load.LoadToMass.sync()\n</code></pre>"},{"location":"Load/003LoadToMass/#delete","title":"delete","text":"<p>Deletes all load to mass conversions from both Python and Civil NX.</p> <pre><code>Load.LoadToMass.delete()\n</code></pre>"},{"location":"Load/003LoadToMass/#examples","title":"Examples","text":"<pre><code># Load to Mass Example\n# Create load cases first\nLoad_Case(\"D\", \"Dead Load\")\nLoad_Case(\"L\", \"Live Load\")\nLoad_Case.create()\n\n# Define Load to Mass conversion\nLoad.LoadToMass(\"Z\", [\"Dead Load\", \"Live Load\"], [1.0, 0.5])\nLoad.LoadToMass.create()\n\n# XYZ direction \nLoad.LoadToMass(\"XYZ\", [\"Dead Load\"], [1.0], nodal_load=True, beam_load=True)\nLoad.LoadToMass.create()\n\n# With custom gravity\nLoad.LoadToMass(\"Y\", [\"Seismic\"], [1.0], gravity=9.81)\nLoad.LoadToMass.create()\n</code></pre>"},{"location":"Load/004NodalMass/","title":"\u200e \u200e \u200e Nodal Mass","text":""},{"location":"Load/004NodalMass/#nodal-mass","title":"Nodal Mass","text":"<p>A nested class within Load used to create nodal mass properties for dynamic analysis.</p>"},{"location":"Load/004NodalMass/#constructor","title":"Constructor","text":"<p><code>Load.NodalMass(node_id, mX, mY=0, mZ=0, rmX=0, rmY=0, rmZ=0)</code></p> <p>Creates nodal mass and converts to JSON format for lumped mass modeling in dynamic analysis.</p>"},{"location":"Load/004NodalMass/#parameters","title":"Parameters","text":"<ul> <li><code>node_id (int)</code>: Node ID where the mass is applied (Required)</li> <li><code>mX</code>: Translational Lumped Mass in GCS X-direction (Required)</li> <li><code>mY (default=0)</code>: Translational Lumped Mass in GCS Y-direction</li> <li><code>mZ (default=0)</code>: Translational Lumped Mass in GCS Z-direction</li> <li><code>rmX (default=0)</code>: Rotational Mass Moment of Inertia about GCS X-axis</li> <li><code>rmY (default=0)</code>: Rotational Mass Moment of Inertia about GCS Y-axis</li> <li><code>rmZ (default=0)</code>: Rotational Mass Moment of Inertia about GCS Z-axis</li> </ul>"},{"location":"Load/004NodalMass/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NODE_ID</code> (int): Node ID where the mass is applied</li> <li><code>MX</code> (float): Translational lumped mass in the global X direction.</li> <li><code>MY</code> (float): Translational lumped mass in the global Y direction.</li> <li><code>MZ</code> (float): Translational lumped mass in the global Z direction.</li> <li><code>RMX</code> (float): Rotational mass moment of inertia about the global X axis.</li> <li><code>RMY</code> (float): Rotational mass moment of inertia about the global Y axis.</li> <li><code>RMZ</code> (float): Rotational mass moment of inertia about the global Z axis.</li> </ul>"},{"location":"Load/004NodalMass/#methods","title":"Methods","text":""},{"location":"Load/004NodalMass/#json","title":"json","text":"<p>Returns JSON representation of nodal mass properties.</p> <pre><code>nm1 = Load.NodalMass(1,1.5, 2.0, 3.0, 0.1, 0.2, 0.3)\nprint(Load.NodalMass.json())\n</code></pre>"},{"location":"Load/004NodalMass/#create","title":"create","text":"<p>Sends nodal mass properties to Civil NX.</p> <pre><code>Load.NodalMass.create()\n</code></pre>"},{"location":"Load/004NodalMass/#get","title":"get","text":"<p>Fetches nodal mass properties from Civil NX.</p> <pre><code>print(Load.NodalMass.get())\n</code></pre>"},{"location":"Load/004NodalMass/#sync","title":"sync","text":"<p>Synchronizes nodal mass properties from Civil NX.</p> <pre><code>Load.NodalMass.sync()\n</code></pre>"},{"location":"Load/004NodalMass/#delete","title":"delete","text":"<p>Deletes all nodal mass properties from both Python and Civil NX.</p> <pre><code>Load.NodalMass.delete()\n</code></pre>"},{"location":"Load/004NodalMass/#examples","title":"Examples","text":"<pre><code># Nodal Mass Example\n# Create nodes first\nfor i in range(5):\n    Node(i*10, 0, 0)\nNode.create()\n\n# Define Nodal Mass - Translational only\nLoad.NodalMass(1,1.5)  # Only X-direction mass\nLoad.NodalMass.create()\n\n# Define Nodal Mass - All translational components\nLoad.NodalMass(2,1.5, 2.0, 3.0)\nLoad.NodalMass.create()\n\n# Define Nodal Mass - With rotational inertia\nLoad.NodalMass(3,1.5, 2.0, 3.0, 0.1, 0.2, 0.3)\nLoad.NodalMass.create()\n</code></pre>"},{"location":"Load/005spDisp/","title":"\u200e \u200e \u200e Specified Displacement","text":""},{"location":"Load/005spDisp/#specified-displacement","title":"Specified Displacement","text":"<p>A nested class within Load used to create specified displacement loads for prescribed boundary conditions.</p>"},{"location":"Load/005spDisp/#constructor","title":"Constructor","text":"<p><code>Load.SpDisp(node, load_case, load_group=\"\", values=[0, 0, 0, 0, 0, 0], id=\"\")</code></p> <p>Creates specified displacement loads and converts to JSON format for applying prescribed displacements at nodes.</p>"},{"location":"Load/005spDisp/#parameters","title":"Parameters","text":"<ul> <li><code>node</code>: Node number where displacement is applied (Required)</li> <li><code>load_case</code>: Load case name (Required)</li> <li><code>load_group (default=\"\")</code>: Load group name</li> <li><code>values (default=[0, 0, 0, 0, 0, 0])</code>: Displacement values [Dx, Dy, Dz, Rx, Ry, Rz]</li> <li><code>id (default=\"\")</code>: Load ID (auto-generated if empty)</li> </ul>"},{"location":"Load/005spDisp/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NODE</code> (int): The node number where the specified displacement is applied.</li> <li><code>LCN</code> (str): The name of the load case.</li> <li><code>LDGR</code> (str): The name of the load group.</li> <li><code>VALUES</code> (list): List of displacement values [Dx, Dy, Dz, Rx, Ry, Rz].</li> <li><code>ID</code> (int/str): The ID of the specified displacement entry.</li> </ul>"},{"location":"Load/005spDisp/#methods","title":"Methods","text":""},{"location":"Load/005spDisp/#json","title":"json","text":"<p>Returns JSON representation of all specified displacement loads.</p> <pre><code>sp1 = Load.SpDisp(10, \"Settlement\", \"Group1\", [1.5, 1.5, 1.5, 1.5, 0.5, 0.5])\nprint(Load.SpDisp.json())\n</code></pre>"},{"location":"Load/005spDisp/#create","title":"create","text":"<p>Sends specified displacement loads to Civil NX.</p> <pre><code>Load.SpDisp.create()\n</code></pre>"},{"location":"Load/005spDisp/#get","title":"get","text":"<p>Fetches specified displacement loads from Civil NX.</p> <pre><code>print(Load.SpDisp.get())\n</code></pre>"},{"location":"Load/005spDisp/#sync","title":"sync","text":"<p>Synchronizes specified displacement loads from Civil NX.</p> <pre><code>Load.SpDisp.sync()\n</code></pre>"},{"location":"Load/005spDisp/#delete","title":"delete","text":"<p>Deletes all specified displacement loads from both Python and Civil NX.</p> <pre><code>Load.SpDisp.delete()\n</code></pre>"},{"location":"Load/005spDisp/#examples","title":"Examples","text":"<pre><code># Specified Displacement Example\n# Create nodes first\nfor i in range(3):\n    Node(i*10, 0, 0)\nNode.create()\n\n# Create load case\nLoad_Case(\"STL\", \"Settlement\")\nLoad_Case.create()\n\n# Create load group (optional)\nGroup.Load(\"Foundation Settlement\")\nGroup.Load.create()\n\n# Define Specified Displacement - Settlement case\nLoad.SpDisp(1, \"Settlement\", \"Foundation Settlement\", [0, 0, -0.05, 0, 0, 0]) \nLoad.SpDisp.create()\n\n# Define Specified Displacement - Thermal expansion\nLoad.SpDisp(2, \"Settlement\", \"\", [0.01, 0, 0, 0, 0, 0])  \nLoad.SpDisp.create()\n\n# Define multiple displacement components\nLoad.SpDisp(3, \"Settlement\", \"\", [0.02, 0.01, -0.03, 0.0005, 0.0005, 0])\nLoad.SpDisp.create()\n</code></pre>"},{"location":"Load/case/","title":"Load Case","text":""},{"location":"Load/case/#load-case","title":"Load Case","text":"<p>The module provides functionality to create, manage, and synchronize load cases in the model.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d')\n</code></pre>"},{"location":"Load/case/#constructor","title":"Constructor","text":"<p>To create load cases, use the Load_Case constructor.</p> <p><code>Load_Case(type, *name)</code></p> <p>Creates load cases with specified type and names.</p>"},{"location":"Load/case/#parameters","title":"Parameters","text":"<ul> <li><code>type</code>: Load case type</li> <li><code>*name</code>: Variable number of load case names</li> </ul>"},{"location":"Load/case/#class-attributes","title":"Class Attributes","text":"<p>Load_Case.cases -&gt; List of all load cases.   </p>"},{"location":"Load/case/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>TYPE</code> (str): The type of load case (e.g., \"USER\", \"D\", \"L\").</li> <li><code>NAME</code> (tuple): A tuple containing the names of the load cases.</li> <li><code>ID</code> (list): A list of integer IDs assigned to the load cases.</li> </ul> <pre><code># Create load cases\nlc1 = Load_Case(\"D\", \"Dead Load\", \"Additional Dead\")\nlc2 = Load_Case(\"L\", \"Live Load\")\n\nfor lc in Load_Case.cases:\n    print(f'Load Case IDs: {lc.ID} | Names: {lc.NAME} | Type: {lc.TYPE}')\n\n# Output:\n# Load Case IDs: [1, 2] | Names: ('Dead Load', 'Additional Dead') | Type: D\n# Load Case IDs: [3] | Names: ('Live Load',) | Type: L\n</code></pre>"},{"location":"Load/case/#methods","title":"Methods","text":""},{"location":"Load/case/#json","title":"json","text":"<p>Returns a JSON representation of all Load Cases defined in python.</p> <pre><code>lc1 = Load_Case(\"D\", \"Dead Load\", \"Additional Dead\")\nlc2 = Load_Case(\"L\", \"Live Load\")\n\nprint(Load_Case.json())\n\n# Output:\n# {'Assign': {1: {'NAME': 'Dead Load', 'TYPE': 'D'}, 2: {'NAME': 'Additional Dead', 'TYPE': 'D'}, 3: {'NAME': 'Live Load', 'TYPE': 'L'}}}\n</code></pre>"},{"location":"Load/case/#create","title":"create","text":"<p>Sends the current load case list to Civil NX using a PUT request.</p> <pre><code>lc1 = Load_Case(\"D\", \"Dead Load\")\nlc2 = Load_Case(\"L\", \"Live Load\")\n\nLoad_Case.create()\n</code></pre>"},{"location":"Load/case/#get","title":"get","text":"<p>Fetches load cases from Civil NX and returns the JSON representation.</p> <pre><code>print(Load_Case.get())\n# Output\n# {'STLD': {'1': {'NAME': 'Dead Load', 'TYPE': 'D'}, '2': {'NAME': 'Live Load', 'TYPE': 'L'}}}\n</code></pre>"},{"location":"Load/case/#sync","title":"sync","text":"<p>Retrieves Load Case data from Civil NX and rebuilds the internal load case list.</p> <pre><code>Load_Case.sync()\nfor lc in Load_Case.cases:\n    print(f'Load Case: {lc.NAME} | Type: {lc.TYPE}')\n</code></pre>"},{"location":"Load/case/#delete","title":"delete","text":"<p>Deletes all load case data from both Python and Civil NX.</p> <pre><code>Load_Case.delete()\n</code></pre>"},{"location":"Material/","title":"Material","text":""},{"location":"Material/#material","title":"Material","text":"<p>The module provides functionality to create, manage, and synchronize materials in the model.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d')\n</code></pre>"},{"location":"Material/#class-attributes","title":"Class Attributes","text":"<p>Material.mats -&gt; List of all material instances.  Material.ids -&gt; List of all material IDs.</p> <pre><code># Example material data\n\nmat1 = Material.CONC(\"M30 Grade\",\"IS(RC)\",\"M30\",1)\nmat2 = Material.STEEL(\"S450 Steel\", \"EN05(S)\", \"S450\", 2)\nmat3 = Material.USER(\"Timber\", E=12000, pois=0.4, den=6, mass=6, therm=5e-6, id=3)\n\nMaterial.create()\n</code></pre>"},{"location":"Material/#methods","title":"Methods","text":""},{"location":"Material/#json","title":"json","text":"<p>Returns a JSON representation of all Materials defined in python.</p> <pre><code>print(Material.json())\n# Output:\n# {'Assign': {1: {'TYPE': 'CONC', 'NAME': 'C30', 'DAMP_RAT': 0.05, ...}}}\n</code></pre>"},{"location":"Material/#create","title":"create","text":"<p>Sends the current materials, creep shrinkage, compressive strength and time-dependent material links to Civil NX using a PUT request.</p> <pre><code>Material.create()\n</code></pre>"},{"location":"Material/#get","title":"get","text":"<p>Fetches materials from Civil NX and returns the JSON representation.</p> <pre><code>print(Material.get())\n</code></pre>"},{"location":"Material/#sync","title":"sync","text":"<p>Retrieves Material data from Civil NX and rebuilds the internal material list.</p> <pre><code>Material.sync()\n</code></pre>"},{"location":"Material/#delete","title":"delete","text":"<p>Deletes all material data from both Python and Civil NX.</p> <pre><code>Material.delete()\n</code></pre>"},{"location":"Material/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import *\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\") #Paste your MAPI Key\n\n# Create concrete materials from database\nconc1 = Material.CONC(\"M30 Grade\",\"IS(RC)\",\"M30\",1)\nconc2 = Material.CONC(\"Concrete \",\"EN04(RC)\",\"C30/37\",2)\n\n# Create user-defined concrete material\nconc_user = Material.CONC.User(\"Custom Concrete\", E=300000, pois=0.2, den=25, mass=2.5, therm=1e-5, id=3)\n\n# Create steel materials from database\nsteel1 = Material.STEEL(\"S450 Steel\", \"EN05(S)\", \"S450\", 4)\nsteel2 = Material.STEEL(\"Fe540 Steel\", \"IS(S)\", \"Fe540\", 5)\n\n# Create user-defined steel material\nsteel_user = Material.STEEL.User(\"Custom Steel\", E=200000, pois=0.3, den=78.5, mass=7.85, therm=1.2e-5, id=6)\n\n# Create generic user material\nuser_mat = Material.USER(\"Timber\", E=12000, pois=0.4, den=6, mass=6, therm=5e-6, id=7)\n\n# Create all materials in Civil NX\nMaterial.create()\n\nprint(\"All materials created successfully!\")\n</code></pre>"},{"location":"Material/001concrete/","title":"\u200e \u200e \u200e Concrete","text":""},{"location":"Material/001concrete/#concrete-material","title":"Concrete Material","text":"<p>A nested class within Material used to create concrete materials.</p>"},{"location":"Material/001concrete/#standard","title":"Standard","text":"<p><code>Material.CONC(name='', standard='', db='', id=0)</code></p> <p>Creates a concrete material from database with specified standard and database code.</p>"},{"location":"Material/001concrete/#parameters","title":"Parameters","text":"<ul> <li><code>name (default='')</code>: Material name</li> <li><code>standard (default='')</code>: Standard code (e.g., \"EN(RC)\", \"ACI(RC)\", \"IS(RC)\")</li> <li><code>db (default='')</code>: Database material code</li> <li><code>id (default=0)</code>: Manual ID assignment</li> </ul>"},{"location":"Material/001concrete/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the material.</li> <li><code>DATA</code> (dict): A dictionary containing the material properties. Specific keys include:</li> <li><code>TYPE</code> (str): \"CONC\"</li> <li><code>NAME</code> (str): Name of the material.</li> <li><code>PARAM</code> (list): List containing a dictionary with:</li> <li><code>P_TYPE</code> (int): 1 (for DB material).</li> <li><code>STANDARD</code> (str): Name of the standard (e.g., \"IS(RC)\").</li> <li><code>DB</code> (str): Name of the material in the database (e.g., \"M30\").</li> </ul>"},{"location":"Material/001concrete/#examples","title":"Examples","text":"<pre><code># Create concrete material from database\nMaterial.CONC(\"M30 Grade\",\"IS(RC)\",\"M30\",1)\nMaterial.CONC(\"Concrete \",\"EN04(RC)\",\"C30/37\",2)\n\nMaterial.create()\n</code></pre>"},{"location":"Material/001concrete/#user-defined","title":"User-Defined","text":"<p><code>Material.CONC.User(name='', E=0, pois=0, den=0, mass=0, therm=0, id=0)</code></p> <p>Creates a user-defined concrete material with custom properties.</p>"},{"location":"Material/001concrete/#parameters_1","title":"Parameters","text":"<ul> <li><code>name (default='')</code>: Material name</li> <li><code>E (default=0)</code>: Elastic modulus</li> <li><code>pois (default=0)</code>: Poisson's ratio</li> <li><code>den (default=0)</code>: Density</li> <li><code>mass (default=0)</code>: Mass density</li> <li><code>therm (default=0)</code>: Thermal expansion coefficient</li> <li><code>id (default=0)</code>: Manual ID assignment</li> </ul>"},{"location":"Material/001concrete/#object-attributes_1","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the material.</li> <li><code>DATA</code> (dict): A dictionary containing the material properties. Specific keys include:</li> <li><code>TYPE</code> (str): \"CONC\"</li> <li><code>NAME</code> (str): Name of the material.</li> <li><code>PARAM</code> (list): List containing a dictionary with:</li> <li><code>P_TYPE</code> (int): 2 (for user-defined).</li> <li><code>ELAST</code> (float): Modulus of elasticity.</li> <li><code>POISN</code> (float): Poisson's ratio.</li> <li><code>THERMAL</code> (float): Thermal coefficient.</li> <li><code>DEN</code> (float): Density.</li> <li><code>MASS</code> (float): Mass (if density is not provided).</li> </ul>"},{"location":"Material/001concrete/#examples_1","title":"Examples","text":"<pre><code># Create user-defined concrete material\nMaterial.CONC.User(\"Custom Concrete\", E=300000, pois=0.2, den=25, mass=2.5, therm=1e-5, id=3)\n\nMaterial.create()\n</code></pre>"},{"location":"Material/002steel/","title":"\u200e \u200e \u200e Steel","text":""},{"location":"Material/002steel/#steel-material","title":"Steel Material","text":"<p>A nested class within Material used to create steel materials.</p>"},{"location":"Material/002steel/#standard","title":"Standard","text":"<p><code>Material.STEEL(name='', standard='', db='', id=0)</code></p> <p>Creates a steel material from database with specified standard and database code.</p>"},{"location":"Material/002steel/#parameters","title":"Parameters","text":"<ul> <li><code>name (default='')</code>: Material name</li> <li><code>standard (default='')</code>: Standard code (e.g., \"EN(S)\", \"AISC(S)\", \"IS(S)\")</li> <li><code>db (default='')</code>: Database material code</li> <li><code>id (default=0)</code>: Manual ID assignment</li> </ul>"},{"location":"Material/002steel/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the material.</li> <li><code>DATA</code> (dict): A dictionary containing the material properties. Specific keys include:</li> <li><code>TYPE</code> (str): \"STEEL\"</li> <li><code>NAME</code> (str): Name of the material.</li> <li><code>PARAM</code> (list): List containing a dictionary with:</li> <li><code>P_TYPE</code> (int): 1 (for DB material).</li> <li><code>STANDARD</code> (str): Name of the standard (e.g., \"EN05(S)\").</li> <li><code>DB</code> (str): Name of the material in the database (e.g., \"S450\").</li> </ul>"},{"location":"Material/002steel/#examples","title":"Examples","text":"<pre><code># Create steel material from database\nMaterial.STEEL(\"S450 Steel\", \"EN05(S)\", \"S450\", 4)\nMaterial.STEEL(\"Fe540 Steel\", \"IS(S)\", \"Fe540\", 5)\n\nMaterial.create()\n</code></pre>"},{"location":"Material/002steel/#user-defined","title":"User-Defined","text":"<p><code>Material.STEEL.User(name='', E=0, pois=0, den=0, mass=0, therm=0, id=0)</code></p> <p>Creates a user-defined steel material with custom properties.</p>"},{"location":"Material/002steel/#parameters_1","title":"Parameters","text":"<ul> <li><code>name (default='')</code>: Material name</li> <li><code>E (default=0)</code>: Elastic modulus</li> <li><code>pois (default=0)</code>: Poisson's ratio</li> <li><code>den (default=0)</code>: Density</li> <li><code>mass (default=0)</code>: Mass density</li> <li><code>therm (default=0)</code>: Thermal expansion coefficient</li> <li><code>id (default=0)</code>: Manual ID assignment</li> </ul>"},{"location":"Material/002steel/#object-attributes_1","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the material.</li> <li><code>DATA</code> (dict): A dictionary containing the material properties. Specific keys include:</li> <li><code>TYPE</code> (str): \"STEEL\"</li> <li><code>NAME</code> (str): Name of the material.</li> <li><code>PARAM</code> (list): List containing a dictionary with:</li> <li><code>P_TYPE</code> (int): 2 (for user-defined).</li> <li><code>ELAST</code> (float): Modulus of elasticity.</li> <li><code>POISN</code> (float): Poisson's ratio.</li> <li><code>THERMAL</code> (float): Thermal coefficient.</li> <li><code>DEN</code> (float): Density.</li> <li><code>MASS</code> (float): Mass (if density is not provided).</li> </ul>"},{"location":"Material/002steel/#examples_1","title":"Examples","text":"<pre><code># Create user-defined steel material\nsteel_user = Material.STEEL.User(\"Custom Steel\", E=200000, pois=0.3, den=78.5, mass=7.85, therm=1.2e-5, id=6)\n\nMaterial.create()\n</code></pre>"},{"location":"Material/003usermat/","title":"\u200e \u200e \u200e User-defined","text":""},{"location":"Material/003usermat/#user-defined-material","title":"User-defined Material","text":"<p>A nested class within Material used to create generic user-defined materials.</p>"},{"location":"Material/003usermat/#constructor","title":"Constructor","text":"<p><code>Material.USER(name='', E=0, pois=0, den=0, mass=0, therm=0, id=0)</code></p> <p>Creates a generic user-defined material with custom properties.</p>"},{"location":"Material/003usermat/#parameters","title":"Parameters","text":"<ul> <li><code>name (default='')</code>: Material name</li> <li><code>E (default=0)</code>: Elastic modulus</li> <li><code>pois (default=0)</code>: Poisson's ratio</li> <li><code>den (default=0)</code>: Density</li> <li><code>mass (default=0)</code>: Mass density</li> <li><code>therm (default=0)</code>: Thermal expansion coefficient</li> <li><code>id (default=0)</code>: Manual ID assignment</li> </ul>"},{"location":"Material/003usermat/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the material.</li> <li><code>DATA</code> (dict): A dictionary containing the material properties. Specific keys include:</li> <li><code>TYPE</code> (str): \"USER\"</li> <li><code>NAME</code> (str): Name of the material.</li> <li><code>PARAM</code> (list): List containing a dictionary with:</li> <li><code>P_TYPE</code> (int): 2 (for user-defined).</li> <li><code>ELAST</code> (float): Modulus of elasticity.</li> <li><code>POISN</code> (float): Poisson's ratio.</li> <li><code>THERMAL</code> (float): Thermal coefficient.</li> <li><code>DEN</code> (float): Density.</li> <li><code>MASS</code> (float): Mass (if density is not provided).</li> </ul>"},{"location":"Material/003usermat/#examples","title":"Examples","text":"<pre><code># Create generic user material\nuser_mat = Material.USER(\"Timber\", E=12000, pois=0.4, den=6, mass=6, therm=5e-6, id=7)\n\nMaterial.create()\n</code></pre>"},{"location":"Material/010creep/","title":"Creep Shrinkage","text":""},{"location":"Material/010creep/#creep-and-shrinkage","title":"Creep and Shrinkage","text":"<p>The CreepShrinkage class manages time-dependent creep and shrinkage properties for concrete materials.</p>"},{"location":"Material/010creep/#class-attributes","title":"Class Attributes","text":"<p>CreepShrinkage.mats -&gt; List of all creep and shrinkage instances.   </p>"},{"location":"Material/010creep/#methods","title":"Methods","text":""},{"location":"Material/010creep/#json","title":"json","text":"<p>Returns a JSON representation of all Creep and Shrinkage properties defined in python.</p> <pre><code>print(CreepShrinkage.json())\n# Output:\n# {'Assign': {1: {'NAME': 'CS_M25', 'CODE': 'INDIA_IRC_112_2011', ...}}}\n</code></pre>"},{"location":"Material/010creep/#create","title":"create","text":"<p>Sends creep and shrinkage data to Civil NX using a PUT request.</p> <pre><code>CreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#get","title":"get","text":"<p>Fetches creep and shrinkage data from Civil NX and returns the JSON representation.</p> <pre><code>print(CreepShrinkage.get())\n</code></pre>"},{"location":"Material/010creep/#sync","title":"sync","text":"<p>Retrieves Creep and Shrinkage data from Civil NX and rebuilds the internal list.</p> <pre><code>CreepShrinkage.sync()\n</code></pre>"},{"location":"Material/010creep/#delete","title":"delete","text":"<p>Deletes all creep and shrinkage data from both Python and Civil NX.</p> <pre><code>CreepShrinkage.delete()\n</code></pre> <p></p>"},{"location":"Material/010creep/#codal-provisions","title":"Codal Provisions","text":"IRC Code (18 &amp; 112) CEB-FIP Code (2010, 1990, 1978) ACI Code AASHTO Code European Code (EN 1992)\" Russian Code AS &amp; NZ Code (Australian &amp; New Zealand Standards) Chinese Standards Korean Standards PCA Code Japan Standards (JSCE) Japanese Standard User Defined"},{"location":"Material/010creep/#irc","title":"IRC","text":"<p><code>CreepShrinkage.IRC(name='', code_year=2011, fck=0, notional_size=1, relative_humidity=70, age_shrinkage=3, type_cement='NR', id=0)</code></p> <p>Creates IRC standard creep and shrinkage properties.</p>"},{"location":"Material/010creep/#parameters","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>code_year (int, optional)</code>: The year of the IRC code. Can be 2000 or 2011. Defaults to 2011.</li> <li><code>fck (float)</code>: 28-day characteristic compressive strength</li> <li><code>notional_size (float, optional)</code>: The notional size of the member. Defaults to 1.</li> <li><code>relative_humidity (float, optional)</code>: Relative humidity (40-99%). Defaults to 70.</li> <li><code>age_shrinkage (int, optional)</code>: Age at start of shrinkage (days). Defaults to 3.</li> <li><code>type_cement (str, optional)</code>: Type of cement ('SL'= Slow Setting cement, 'NR'= Normal cement, 'RS'=Rapid hardening cement). Only for IRC:112-2011. Defaults to 'NR'.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the creep/shrinkage definition.</li> <li><code>DATA</code> (dict): A dictionary containing the creep/shrinkage properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the creep/shrinkage definition.</li> <li><code>CODE</code> (str): Code standard (e.g., \"INDIA_IRC_112_2011\").</li> <li><code>STR</code> (float): Characteristic compressive cylinder strength fck.</li> <li><code>HU</code> (float): Relative humidity (%).</li> <li><code>AGE</code> (float): Age of concrete at beginning of shrinkage (days).</li> <li><code>MSIZE</code> (float): Notional size of member.</li> <li><code>CTYPE</code> (str): Type of cement (e.g., \"NR\").</li> </ul>"},{"location":"Material/010creep/#examples","title":"Examples","text":"<pre><code># Create IRC:112-2011 creep and shrinkage properties\ncs1 = CreepShrinkage.IRC(\"IRC_M30_2011\", code_year=2011, fck=30, notional_size=150, relative_humidity=75, age_shrinkage=7, type_cement='R', id=1)\n\n# Create IRC:18-2000 creep and shrinkage properties\ncs2 = CreepShrinkage.IRC(\"IRC_M25_2000\", code_year=2000, fck=25, notional_size=200, relative_humidity=70, age_shrinkage=3, type_cement='NR', id=2)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#ceb_fip","title":"CEB_FIP","text":"<p><code>CreepShrinkage.CEB_FIP(name='', code_year=2010, fck=0, notional_size=1, relative_humidity=70, age_shrinkage=3, type_cement='RS', type_of_aggregate=0, id=0)</code></p> <p>Creates CEB-FIP standard creep and shrinkage properties for European concrete standards.</p>"},{"location":"Material/010creep/#parameters_1","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>code_year (int, optional)</code>: Year of the CEB-FIP standard (2010, 1990, 1978). Defaults to 2010.</li> <li><code>fck (float)</code>: 28-day characteristic compressive strength</li> <li><code>notional_size (float, optional)</code>: The notional size of the member. Defaults to 1.</li> <li><code>relative_humidity (float, optional)</code>: Relative humidity (40-100%). Defaults to 70.</li> <li><code>age_shrinkage (int, optional)</code>: Age at start of shrinkage (days). Defaults to 3.</li> <li><code>type_cement (str, optional)</code>: Type of cement ('RS', 'NR', 'SL'). Defaults to 'RS'.</li> <li><code>type_of_aggregate (int, optional)</code>: Type of aggregate, only for CEB-FIP 2010. 0: Basalt, 1: Quartzite, 2: Limestone, 3: Sandstone. Defaults to 0.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#object-attributes_1","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the creep/shrinkage definition.</li> <li><code>DATA</code> (dict): A dictionary containing the creep/shrinkage properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the creep/shrinkage definition.</li> <li><code>CODE</code> (str): Code standard (e.g., \"CEB_FIP_2010\").</li> <li><code>STR</code> (float): Characteristic compressive strength.</li> <li><code>HU</code> (float): Relative humidity (%).</li> <li><code>AGE</code> (float): Age of concrete at beginning of shrinkage (days).</li> <li><code>MSIZE</code> (float): Notional size of member.</li> <li><code>CTYPE</code> (str): Type of cement.</li> <li><code>TYPEOFAFFR</code> (int): Type of aggregate (only for CEB-FIP 2010).</li> </ul>"},{"location":"Material/010creep/#examples_1","title":"Examples","text":"<pre><code># Create CEB-FIP 2010 material\ncs1 = CreepShrinkage.CEB_FIP(\"CEB_M40\", code_year=2010, fck=40, notional_size=2, relative_humidity=65, age_shrinkage=5)\n\n# Create CEB-FIP 1990 material\ncs2 = CreepShrinkage.CEB_FIP(\"CEB_M35\", code_year=1990, fck=35, notional_size=3, relative_humidity=70, age_shrinkage=3)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#aci","title":"ACI","text":"<p><code>CreepShrinkage.ACI(name='', fck=0, relative_humidity=70, age_shrinkage=3, vol_surface_ratio=1.2, cfact_a=4, cfact_b=0.85, curing_method='MOIST', material_type='CODE', cement_content=24, slump=1.1, fine_agg_percent=12, air_content=13, creep_coeff=None, shrink_strain=None, id=0)</code></p> <p>Creates ACI standard creep and shrinkage properties for American Concrete Institute standards.</p>"},{"location":"Material/010creep/#parameters_2","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>fck (float)</code>: 28-day compressive strength</li> <li><code>relative_humidity (float, optional)</code>: Relative humidity (40-99%). Defaults to 70.</li> <li><code>age_shrinkage (int, optional)</code>: Age at start of shrinkage (days). Defaults to 3.</li> <li><code>vol_surface_ratio (float, optional)</code>: Volume to surface area ratio. Defaults to 1.2.</li> <li><code>cfact_a (float, optional)</code>: Concrete compressive strength factor 'a'. Defaults to 4.</li> <li><code>cfact_b (float, optional)</code>: Concrete compressive strength factor 'b'. Defaults to 0.85.</li> <li><code>curing_method (str, optional)</code>: Curing method ('MOIST' or 'STEAM'). Defaults to 'MOIST'.</li> <li><code>material_type (str, optional)</code>: Material factored ultimate value type ('CODE' or 'USER'). Defaults to 'CODE'.</li> <li><code>cement_content (float, optional)</code>: Cement content (used if material_type='CODE'). Defaults to 24.</li> <li><code>slump (float, optional)</code>: Slump value (used if material_type='CODE'). Defaults to 1.1.</li> <li><code>fine_agg_percent (float, optional)</code>: Fine aggregate percentage (used if material_type='CODE'). Defaults to 12.</li> <li><code>air_content (float, optional)</code>: Air content (used if material_type='CODE'). Defaults to 13.</li> <li><code>creep_coeff (float, optional)</code>: Creep coefficient (used if material_type='USER'). Defaults to None.</li> <li><code>shrink_strain (float, optional)</code>: Shrinkage strain in E-6 (used if material_type='USER'). Defaults to None.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#object-attributes_2","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the creep/shrinkage definition.</li> <li><code>DATA</code> (dict): A dictionary containing the creep/shrinkage properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the creep/shrinkage definition.</li> <li><code>CODE</code> (str): Code standard (\"ACI\").</li> <li><code>STR</code> (float): Compressive strength.</li> <li><code>HU</code> (float): Relative humidity (%).</li> <li><code>AGE</code> (float): Age of concrete at beginning of shrinkage (days).</li> <li><code>VOL</code> (float): Volume to surface area ratio.</li> <li><code>CFACTA</code> (float): Concrete compressive strength factor 'a'.</li> <li><code>CFACTB</code> (float): Concrete compressive strength factor 'b'.</li> <li><code>TYPE</code> (str): Material type ('CODE' or 'USER').</li> <li><code>CMETHOD</code> (str): Curing method.</li> </ul>"},{"location":"Material/010creep/#examples_2","title":"Examples","text":"<pre><code># Create ACI material using code-based properties\ncs1 = CreepShrinkage.ACI(\"ACI_C35_Code\", fck=35, relative_humidity=75, age_shrinkage=7, vol_surface_ratio=50)\n\n# Create ACI material using user-defined ultimate values\ncs2 = CreepShrinkage.ACI(\"ACI_C35_User\", fck=35, relative_humidity=75, age_shrinkage=7, vol_surface_ratio=50, material_type=\"USER\", creep_coeff=2.5, shrink_strain=600)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#aashto","title":"AASHTO","text":"<p><code>CreepShrinkage.AASHTO(name='', fck=0, relative_humidity=70, age_shrinkage=3, vol_surface_ratio=1.2, b_expose=False, id=0)</code></p> <p>Creates AASHTO standard creep and shrinkage properties.</p>"},{"location":"Material/010creep/#parameters_3","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>fck (float)</code>: 28-day compressive strength</li> <li><code>relative_humidity (float, optional)</code>: Relative humidity (40-99%). Defaults to 70.</li> <li><code>age_shrinkage (int, optional)</code>: Age at start of shrinkage (days). Defaults to 3.</li> <li><code>vol_surface_ratio (float, optional)</code>: Volume to surface area ratio. Defaults to 1.2.</li> <li><code>b_expose (bool, optional)</code>: Expose to drying before 5 days of curing. Defaults to False.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#object-attributes_3","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the creep/shrinkage definition.</li> <li><code>DATA</code> (dict): A dictionary containing the creep/shrinkage properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the creep/shrinkage definition.</li> <li><code>CODE</code> (str): Code standard (\"AASHTO\").</li> <li><code>STR</code> (float): Compressive strength.</li> <li><code>HU</code> (float): Relative humidity (%).</li> <li><code>AGE</code> (float): Age of concrete at beginning of shrinkage (days).</li> <li><code>VOL</code> (float): Volume to surface area ratio.</li> <li><code>bEXPOSE</code> (bool): Expose to drying before 5 days of curing.</li> </ul>"},{"location":"Material/010creep/#examples_3","title":"Examples","text":"<pre><code># Create AASHTO material\ncs1 = CreepShrinkage.AASHTO(\"AASHTO_M30\", fck=30, relative_humidity=80, age_shrinkage=5, vol_surface_ratio=60)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#european","title":"European","text":"<p><code>CreepShrinkage.European(name='', fck=0, relative_humidity=70, age_shrinkage=3, notional_size=1.2, type_cement='Class N', t_code=0, b_silica=False, id=0)</code></p> <p>Creates European standard creep and shrinkage properties (EN 1992).</p>"},{"location":"Material/010creep/#parameters_4","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>fck (float)</code>: 28-day characteristic compressive strength</li> <li><code>relative_humidity (float, optional)</code>: Relative humidity (40-99%). Defaults to 70.</li> <li><code>age_shrinkage (int, optional)</code>: Age at start of shrinkage (days). Defaults to 3.</li> <li><code>notional_size (float, optional)</code>: Notional size of the member. Defaults to 1.2.</li> <li><code>type_cement (str, optional)</code>: Cement class ('Class S', 'Class N', 'Class R'). Defaults to 'Class N'.</li> <li><code>t_code (int, optional)</code>: Type of code. 0: EN 1992-1 (General), 1: EN 1992-2 (Bridge). Defaults to 0.</li> <li><code>b_silica (bool, optional)</code>: Whether silica fume is used. Only applicable when t_code is 1. Defaults to False.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#object-attributes_4","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the creep/shrinkage definition.</li> <li><code>DATA</code> (dict): A dictionary containing the creep/shrinkage properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the creep/shrinkage definition.</li> <li><code>CODE</code> (str): Code standard (\"EUROPEAN\").</li> <li><code>STR</code> (float): Characteristic compressive strength.</li> <li><code>HU</code> (float): Relative humidity (%).</li> <li><code>AGE</code> (float): Age of concrete at beginning of shrinkage (days).</li> <li><code>MSIZE</code> (float): Notional size of member.</li> <li><code>CTYPE</code> (str): Type of cement.</li> <li><code>TCODE</code> (int): Type of code.</li> <li><code>bSILICA</code> (bool): Whether silica fume is used (only for bridge code).</li> </ul>"},{"location":"Material/010creep/#examples_4","title":"Examples","text":"<pre><code># EN 1992-1 General Structure\ncs1 = CreepShrinkage.European(\"Euro_General_C30\", fck=30, relative_humidity=75, age_shrinkage=7, notional_size=2)\n\n# EN 1992-2 Concrete Bridge with Silica Fume\ncs2 = CreepShrinkage.European(\"Euro_Bridge_C40\", fck=40, relative_humidity=70, age_shrinkage=5, notional_size=2, t_code=1, b_silica=True)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#russian","title":"Russian","text":"<p><code>CreepShrinkage.Russian(name='', fck=0, relative_humidity=70, module_exposed_surface=10, age_concrete=14, water_content=180, max_aggregate_size=0.02, air_content=30, specific_cement_paste_content=0.25, curing_method=0, cement_type=1, fast_accumulating_creep=False, concrete_type=0, id=0)</code></p> <p>Creates Russian standard creep and shrinkage properties.</p>"},{"location":"Material/010creep/#parameters_5","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>fck (float)</code>: 28-day compressive strength</li> <li><code>relative_humidity (float)</code>: Relative humidity in percentage</li> <li><code>module_exposed_surface (float)</code>: Module of an exposed surface</li> <li><code>age_concrete (int)</code>: Age of the concrete in days</li> <li><code>water_content (float)</code>: Water content</li> <li><code>max_aggregate_size (float)</code>: Maximum aggregate size</li> <li><code>air_content (float)</code>: Air content</li> <li><code>specific_cement_paste_content (float)</code>: Specific content of the cement paste</li> <li><code>curing_method (int, optional)</code>: Curing method. 0: Natural, 1: Steam. Defaults to 0.</li> <li><code>cement_type (int, optional)</code>: Cement Type. 0: Normal, 1: Fast-hardened, 2: Slag, 3: Pozzolan. Defaults to 1.</li> <li><code>fast_accumulating_creep (bool, optional)</code>: Whether to consider fast-accumulating creep. Defaults to False.</li> <li><code>concrete_type (int, optional)</code>: Type of concrete. 0: Heavy, 1: Fine-grained. Defaults to 0.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#object-attributes_5","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the creep/shrinkage definition.</li> <li><code>DATA</code> (dict): A dictionary containing the creep/shrinkage properties with various Russian standard specific parameters.</li> </ul>"},{"location":"Material/010creep/#examples_5","title":"Examples","text":"<pre><code># Standard Russian model with natural curing\ncs1 = CreepShrinkage.Russian(\"RU_Heavy_C30\", fck=30, relative_humidity=70, module_exposed_surface=10, age_concrete=14, water_content=180, max_aggregate_size=0.02, air_content=30, specific_cement_paste_content=0.25, cement_type=2)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#as_nz","title":"AS_NZ","text":"<p><code>CreepShrinkage.AS_NZ(name='', standard='AS_5100_5_2017', fck=0, concrete_age=7, hypothetical_thickness=0.3, drying_shrinkage_type=0, user_defined_shrinkage_strain=0, humidity_factor=0.72, exposure_environment=0, id=0)</code></p> <p>Creates Australian &amp; New Zealand standards creep and shrinkage properties.</p>"},{"location":"Material/010creep/#parameters_6","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>standard (str)</code>: Standard code ('AS_5100_5_2017', 'AS_5100_5_2016', 'AS_RTA_5100_5_2011', 'AS_3600_2009', 'NEWZEALAND')</li> <li><code>fck (float)</code>: 28-day compressive strength</li> <li><code>concrete_age (int)</code>: Age of the concrete in days</li> <li><code>hypothetical_thickness (float)</code>: Hypothetical thickness of the member</li> <li><code>drying_shrinkage_type (int, optional)</code>: Type of drying basic shrinkage strain. Values depend on chosen standard. Defaults to 0.</li> <li><code>user_defined_shrinkage_strain (float, optional)</code>: User-defined drying basic shrinkage strain. Defaults to 0.</li> <li><code>humidity_factor (float, optional)</code>: Relative humidity thickness (NZ Bridge standard only). Defaults to 0.72.</li> <li><code>exposure_environment (int, optional)</code>: Exposure environment classification for AS standards. Defaults to 0.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#examples_6","title":"Examples","text":"<pre><code># AS 5100.5-2017 \ncs1 = CreepShrinkage.AS_NZ(\"AS_Melbourne_C40\", standard=\"AS_5100_5_2017\", fck=40, hypothetical_thickness=0.3, concrete_age=7, drying_shrinkage_type=1)\n\n# NZ Bridge standard \ncs2 = CreepShrinkage.AS_NZ(\"NZ_Bridge_Custom\", standard=\"NEWZEALAND\", fck=35, hypothetical_thickness=0.25, concrete_age=14, drying_shrinkage_type=10, user_defined_shrinkage_strain=955.5)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#chinese","title":"Chinese","text":"<p><code>CreepShrinkage.Chinese(name='', standard='CHINESE', fck=0, relative_humidity=70, concrete_age=14, notional_size=2, humidity_type='RH', cement_coeff=5, fly_ash_amount=20, id=0)</code></p> <p>Creates Chinese standards creep and shrinkage properties.</p>"},{"location":"Material/010creep/#parameters_7","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>standard (str)</code>: Chinese standard code ('CHINESE', 'JTG', 'CHINA_JTG3362_2018')</li> <li><code>fck (float)</code>: 28-day compressive strength</li> <li><code>relative_humidity (float)</code>: Relative humidity in percentage</li> <li><code>concrete_age (int)</code>: Age of the concrete in days</li> <li><code>notional_size (float)</code>: Notional size of the member</li> <li><code>humidity_type (str, optional)</code>: Type of relative humidity ('CU' for Curing Underwater, 'RH' for Relative Humidity). Defaults to 'RH'.</li> <li><code>cement_coeff (float, optional)</code>: Cement type coefficient (for JTG codes). Defaults to 5.</li> <li><code>fly_ash_amount (float, optional)</code>: Amount of added fly ash (for JTG3362-2018). Range 0-30. Defaults to 20.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#examples_7","title":"Examples","text":"<pre><code># General Chinese Standard\ncs1 = CreepShrinkage.Chinese(\"Chinese_C30\", standard=\"CHINESE\", fck=30, relative_humidity=75, concrete_age=14, notional_size=2)\n\n# JTG D62-2004 Standard\ncs2 = CreepShrinkage.Chinese(\"JTG_D62_C40\", standard=\"JTG\", fck=40, relative_humidity=80, concrete_age=7, notional_size=250, cement_coeff=5)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#korean","title":"Korean","text":"<p><code>CreepShrinkage.Korean(name='', standard='KDS_2016', fck=0, relative_humidity=70, concrete_age=14, notional_size=2, cement_type='NR', density=240, id=0)</code></p> <p>Creates Korean standards creep and shrinkage properties.</p>"},{"location":"Material/010creep/#parameters_8","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>standard (str)</code>: Korean standard code ('KDS_2016', 'KSI_USD12', 'KSCE_2010', 'KS')</li> <li><code>fck (float)</code>: 28-day compressive strength</li> <li><code>relative_humidity (float)</code>: Relative humidity in percentage</li> <li><code>concrete_age (int)</code>: Age of the concrete in days</li> <li><code>notional_size (float)</code>: Notional size of the member</li> <li><code>cement_type (str, optional)</code>: Type of cement ('SL', 'NR', 'RS'). Defaults to 'NR'.</li> <li><code>density (float, optional)</code>: Weight density (Only for KDS-2016). Defaults to 240.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#examples_8","title":"Examples","text":"<pre><code># KDS-2016 Standard\ncs1 = CreepShrinkage.Korean(\"KDS_C35\", standard=\"KDS_2016\", fck=35, relative_humidity=65, concrete_age=10, notional_size=2, density=2400)\n\n# Korea Standard (KS)\ncs2 = CreepShrinkage.Korean(\"KS_C30\", standard=\"KS\", fck=30, relative_humidity=70, concrete_age=14, notional_size=2)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#pca","title":"PCA","text":"<p><code>CreepShrinkage.PCA(name='', fck=0, relative_humidity=70, ultimate_creep_strain=4, vol_surface_ratio=1.2, reinforcement_ratio=20, steel_elasticity_modulus=2e8, ultimate_shrinkage_strain=780, id=0)</code></p> <p>Creates PCA standard creep and shrinkage properties.</p>"},{"location":"Material/010creep/#parameters_9","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>fck (float)</code>: Compressive strength</li> <li><code>relative_humidity (float)</code>: Relative humidity (40-99%)</li> <li><code>ultimate_creep_strain (float)</code>: Ultimate creep strain (Range: 3-5)</li> <li><code>vol_surface_ratio (float)</code>: Volume to surface area ratio</li> <li><code>reinforcement_ratio (float)</code>: Reinforcement ratio of the cross section</li> <li><code>steel_elasticity_modulus (float)</code>: Modulus of elasticity of steel</li> <li><code>ultimate_shrinkage_strain (float)</code>: Ultimate shrinkage strain (Range: 500-800)</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#examples_9","title":"Examples","text":"<pre><code>cs1 = CreepShrinkage.PCA(\"PCA_Material\", fck=50, relative_humidity=70, ultimate_creep_strain=4, vol_surface_ratio=1.2, reinforcement_ratio=20, steel_elasticity_modulus=2e8, ultimate_shrinkage_strain=780)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#japan","title":"Japan","text":"<p><code>CreepShrinkage.Japan(name='', standard='JSCE_12', relative_humidity=70, concrete_age=3, vol_surface_ratio=0.2, cement_content=30, water_content=20, fck=30, impact_factor=1, age_of_solidification=5, alpha_factor=11, autogenous_shrinkage=True, gamma_factor=1, a_factor=0.1, b_factor=0.7, general_shrinkage=True, id=0)</code></p> <p>Creates Japan standards creep and shrinkage properties (JSCE).</p>"},{"location":"Material/010creep/#parameters_10","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>standard (str)</code>: Japanese standard ('JSCE_12', 'JSCE_07', 'JSCE')</li> <li><code>relative_humidity (float)</code>: Relative humidity in percentage</li> <li><code>concrete_age (int)</code>: Age of the concrete in days</li> <li><code>vol_surface_ratio (float)</code>: Volume to surface area ratio</li> <li><code>cement_content (float)</code>: Cement content</li> <li><code>water_content (float)</code>: Water content</li> <li><code>fck (float, optional)</code>: Compressive strength (not for JSCE). Defaults to 30.</li> <li><code>impact_factor (float, optional)</code>: Impact factor by cement type (JSCE 2012 only). Defaults to 1.</li> <li><code>age_of_solidification (int, optional)</code>: Age at beginning of solidification (JSCE 2012 only). Defaults to 5.</li> <li><code>alpha_factor (int, optional)</code>: Alpha-factor by cement type (JSCE 2007 only). Defaults to 11.</li> <li><code>autogenous_shrinkage (bool, optional)</code>: Autogenous shrinkage option (JSCE 2007 only). Defaults to True.</li> <li><code>gamma_factor (int, optional)</code>: Gamma-factor (JSCE 2007 only). Defaults to 1.</li> <li><code>a_factor (float, optional)</code>: a-factor (JSCE 2007 only). Defaults to 0.1.</li> <li><code>b_factor (float, optional)</code>: b-factor (JSCE 2007 only). Defaults to 0.7.</li> <li><code>general_shrinkage (bool, optional)</code>: General shrinkage option (JSCE 2007 only). Defaults to True.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#examples_10","title":"Examples","text":"<pre><code># JSCE 2012\ncs1 = CreepShrinkage.Japan(\"JSCE12_mat\", \"JSCE_12\", 70, 3, 0.2, 30, 20, fck=30)\n\n# JSCE 2007\ncs2 = CreepShrinkage.Japan(\"JSCE07_mat\", \"JSCE_07\", 70, 3, 0.2, 30, 20, fck=30, alpha_factor=15)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#japanesestandard","title":"JapaneseStandard","text":"<p><code>CreepShrinkage.JapaneseStandard(name='', fck=0, relative_humidity=70, concrete_age=3, notional_size=1.2, calculation_method='JSCE', humidity_type='RH', cement_type='NC', environmental_coeff=1, id=0)</code></p> <p>Creates Japanese standard creep and shrinkage properties.</p>"},{"location":"Material/010creep/#parameters_11","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>fck (float)</code>: Compressive strength</li> <li><code>relative_humidity (float)</code>: Relative humidity (40-90%)</li> <li><code>concrete_age (int)</code>: Age of the concrete in days</li> <li><code>notional_size (float)</code>: Notional size of the member</li> <li><code>calculation_method (str, optional)</code>: Calculation method for E ('JSCE' or 'AIJ'). Defaults to 'JSCE'.</li> <li><code>humidity_type (str, optional)</code>: Relative humidity type ('RH' or 'CU'). Defaults to 'RH'.</li> <li><code>cement_type (str, optional)</code>: Type of cement ('RH', 'NC'). Defaults to 'NC'.</li> <li><code>environmental_coeff (int, optional)</code>: Environmental coefficient. Defaults to 1.</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/010creep/#examples_11","title":"Examples","text":"<pre><code>cs1 = CreepShrinkage.JapaneseStandard(\"JapanStd_C30\", fck=30, relative_humidity=70, concrete_age=3, notional_size=1.2)\n\nCreepShrinkage.create()\n</code></pre>"},{"location":"Material/010creep/#userdefined","title":"UserDefined","text":"<p><code>CreepShrinkage.UserDefined(name='', shrinkage_func_name='', creep_func_name='', creep_age=0, id=0)</code></p> <p>Creates user defined creep and shrinkage properties.</p>"},{"location":"Material/010creep/#parameters_12","title":"Parameters","text":"<ul> <li><code>name (str)</code>: Property name</li> <li><code>shrinkage_func_name (str)</code>: Name of the user-defined shrinkage strain function</li> <li><code>creep_func_name (str)</code>: Name of the user-defined creep function</li> <li><code>creep_age (int)</code>: Concrete age for the creep function</li> <li><code>id (int, optional)</code>: Manual ID assignment. Defaults to 0.</li> </ul>"},{"location":"Material/011comp/","title":"Compressive Strength","text":""},{"location":"Material/011comp/#compressive-strength","title":"Compressive Strength","text":"<p>The CompStrength class manages time-dependent compressive strength properties for concrete materials.</p>"},{"location":"Material/011comp/#class-attributes","title":"Class Attributes","text":"<p>CompStrength.mats -&gt; List of all compressive strength instances.   </p>"},{"location":"Material/011comp/#methods","title":"Methods","text":""},{"location":"Material/011comp/#json","title":"json","text":"<p>Returns a JSON representation of all Compressive Strength properties defined in python.</p> <pre><code>print(CompStrength.json())\n# Output:\n# {'Assign': {1: {'NAME': 'Comp_M25', 'TYPE': 'CODE', ...}}}\n</code></pre>"},{"location":"Material/011comp/#create","title":"create","text":"<p>Sends compressive strength data to Civil NX using a PUT request.</p> <pre><code>CompStrength.create()\n</code></pre>"},{"location":"Material/011comp/#get","title":"get","text":"<p>Fetches compressive strength data from Civil NX and returns the JSON representation.</p> <pre><code>print(CompStrength.get())\n</code></pre>"},{"location":"Material/011comp/#sync","title":"sync","text":"<p>Retrieves Compressive Strength data from Civil NX and rebuilds the internal list.</p> <pre><code>CompStrength.sync()\n</code></pre>"},{"location":"Material/011comp/#delete","title":"delete","text":"<p>Deletes all compressive strength data from both Python and Civil NX.</p> <pre><code>CompStrength.delete()\n</code></pre> <p></p>"},{"location":"Material/011comp/#codal-provision","title":"Codal Provision","text":"IRC Code (112) ACI Code CEB-FIP Code Ohzagi Code European Code Russian Code Australian Standards Code Gilbert and Ranzi Code Japan Hydration Code Japan Elastic Code KDS-2016 Code KCI-USD12 Code Korean Standard Code User Defined Code"},{"location":"Material/011comp/#irc","title":"IRC","text":"<p><code>CompStrength.IRC(name, code_year=2020, fck_delta=0, cement_type=1, aggregate_type=0, id=0)</code></p> <p>Creates IRC standard compressive strength properties for Indian Road Congress standards.</p>"},{"location":"Material/011comp/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>code_year</code> (int, optional): Year of the IRC standard. Can be 2020, 2011, or 2000. Defaults to 2020.</li> <li><code>fck_delta</code> (float): 28-day characteristic compressive strength</li> <li><code>cement_type</code> (int, optional): Type of cement used</li> <li>1: Slow setting (default)</li> <li>2: Normal </li> <li>3: Rapid hardening</li> <li><code>aggregate_type</code> (int, optional): Type of aggregate used (for IRC:112 only)</li> <li>0: Basalt, dense limestone (default)</li> <li>1: Quartzite </li> <li>2: Limestone </li> <li>3: Sandstone</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): Code standard (e.g., \"INDIA(IRC:112-2020)\").</li> <li><code>STRENGTH</code> (float): Concrete characteristic compressive strength fck (delta fck).</li> <li><code>iCTYPE</code> (int): Type of cement.</li> <li><code>nAGGRE</code> (int): Type of aggregate.</li> </ul>"},{"location":"Material/011comp/#examples","title":"Examples","text":"<pre><code># IRC 112-2020 with normal cement\nCompStrength.IRC(\"C30_IRC2020\", code_year=2020, fck_delta=30000, cement_type=2)\n\n# IRC 18-2000 standard\nCompStrength.IRC(\"C25_IRC2000\", code_year=2000, fck_delta=25000)\n\n# IRC 112-2011 with rapid hardening cement and quartzite aggregate\nCompStrength.IRC(\"C40_IRC2011\", code_year=2011, fck_delta=40000, cement_type=3, aggregate_type=1)\n</code></pre>"},{"location":"Material/011comp/#aci","title":"ACI","text":"<p><code>CompStrength.ACI(name, fck=0, factor_a=1, factor_b=2, id=0)</code></p> <p>Creates ACI standard compressive strength properties for American Concrete Institute standards.</p>"},{"location":"Material/011comp/#parameters_1","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>factor_a</code> (float): ACI model parameter A (default=1)</li> <li><code>factor_b</code> (float): ACI model parameter B (default=2)</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_1","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"ACI\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>A</code> (float): ACI model parameter A</li> <li><code>B</code> (float): ACI model parameter B</li> </ul>"},{"location":"Material/011comp/#examples_1","title":"Examples","text":"<pre><code># Standard ACI material\nCompStrength.ACI(\"C30_ACI\", 30000, 1, 2)\n\n# Custom factors\nCompStrength.ACI(\"C25_ACI_Custom\", 25000, 1.2, 1.8)\n</code></pre>"},{"location":"Material/011comp/#ceb_fip","title":"CEB_FIP","text":"<p><code>CompStrength.CEB_FIP(name, code_year=2010, fck=0, cement_type=1, aggregate_type=0, id=0)</code></p> <p>Creates CEB-FIP standard compressive strength properties for European concrete standards.</p>"},{"location":"Material/011comp/#parameters_2","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>code_year</code> (int, optional): Year of the CEB-FIP standard. Can be 1978, 1990, or 2010. Defaults to 2010.</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>cement_type</code> (int, optional): Type of cement (for 1990 and 2010)</li> <li>1: RS: 0.2 / 42.5 R, 52.5 N, 52.5 R: 0.20 (default)</li> <li>2: N, R: 0.25 / 32.5 R, 42.5 N: 0.25</li> <li>3: SL: 0.38 / 32.5 N: 0.38</li> <li><code>aggregate_type</code> (int, optional): Type of aggregate (for 2010 only)</li> <li>0: Basalt, dense limestone aggregates (1.2): 0 (default)</li> <li>1: Quartzite aggregates: 1</li> <li>2: Limestone aggregates: 2</li> <li>3: Sandstone aggregates: 3</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_2","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): Code standard (e.g., \"CEB-FIP(2010)\").</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>iCTYPE</code> (int): Type of cement (for 1990 and 2010).</li> <li><code>nAGGRE</code> (int): Type of aggregate (for 2010 only).</li> </ul>"},{"location":"Material/011comp/#examples_2","title":"Examples","text":"<pre><code># CEB-FIP 2010 with normal cement and basalt aggregate\nCompStrength.CEB_FIP(\"C30_CEBFIP2010\", 2010, 30000, 1, 0)\n\n# CEB-FIP 1990 with slow setting cement\nCompStrength.CEB_FIP(\"C25_CEBFIP1990\", 1990, 25000, 3)\n\n# CEB-FIP 1978 (no cement/aggregate type)\nCompStrength.CEB_FIP(\"C40_CEBFIP1978\", 1978, 40000)\n</code></pre>"},{"location":"Material/011comp/#ohzagi","title":"Ohzagi","text":"<p><code>CompStrength.Ohzagi(name, fck=0, cement_type=2, id=0)</code></p> <p>Creates Ohzagi compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_3","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>cement_type</code> (int, optional): Type of cement used</li> <li>1: RS</li> <li>2: N, R (default)</li> <li>3: SL</li> <li>4: Fly-ash</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_3","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"Ohzagi\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>iCTYPE</code> (int): Type of cement</li> </ul>"},{"location":"Material/011comp/#examples_3","title":"Examples","text":"<pre><code># Standard Ohzagi material with N,R cement\nCompStrength.Ohzagi(\"C30_Ohzagi\", 30000, 2)\n\n# Fly-ash cement type\nCompStrength.Ohzagi(\"C25_Ohzagi_FA\", 25000, 4)\n</code></pre>"},{"location":"Material/011comp/#european","title":"European","text":"<p><code>CompStrength.European(name, fck=0, cement_type=2, id=0)</code></p> <p>Creates European compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_4","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>cement_type</code> (int, optional): Cement class type</li> <li>1: Class R: 0.20</li> <li>2: Class N: 0.25 (default)</li> <li>3: Class S: 0.38</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_4","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"EUROPEAN\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>iCTYPE</code> (int): Cement class type</li> </ul>"},{"location":"Material/011comp/#examples_4","title":"Examples","text":"<pre><code># European standard with Class N cement\nCompStrength.European(\"C30_Euro\", 30000, 2)\n\n# High early strength with Class R cement\nCompStrength.European(\"C40_Euro_R\", 40000, 1)\n</code></pre>"},{"location":"Material/011comp/#russian","title":"Russian","text":"<p><code>CompStrength.Russian(name, fck=0, cement_type=1, curing_method=1, concrete_type=1, max_aggregate_size=0.02, specific_cement_content=0.25, id=0)</code></p> <p>Creates Russian compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_5","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>cement_type</code> (int, optional): Type of cement</li> <li>1: Normal (default)</li> <li>2: Fast-hardened</li> <li>3: Slag</li> <li>4: Pozzolan</li> <li><code>curing_method</code> (int, optional): Method of curing</li> <li>0: Natural cure: 0</li> <li>1: Steam cure: 1 (default)</li> <li><code>concrete_type</code> (int, optional): Type of concrete</li> <li>0: Heavy concrete: 0</li> <li>1: Fine-grained concrete: 1 (default)</li> <li><code>max_aggregate_size</code> (float): Maximum aggregate size in meters (default=0.02)</li> <li><code>specific_cement_content</code> (float): Specific content of cement paste (default=0.25)</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_5","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"RUSSIAN\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>iCTYPE</code> (int): Type of cement</li> <li><code>CMETH</code> (int): Curing method</li> <li><code>CTYPE</code> (int): Concrete type</li> <li><code>MAXS</code> (float): Maximum aggregate size</li> <li><code>PZ</code> (float): Specific cement content</li> </ul>"},{"location":"Material/011comp/#examples_5","title":"Examples","text":"<pre><code># Standard Russian concrete\nCompStrength.Russian(\"C30_RU\", 30000, 1, 1, 1, 0.02, 0)\n\n# Fast-hardened cement with natural curing\nCompStrength.Russian(\"C25_RU_FH\", 25000, 2, 0, 0, 0.025, 0)\n</code></pre>"},{"location":"Material/011comp/#as","title":"AS","text":"<p><code>CompStrength.AS(name, standard=\"AS5100.5-2017\", fck=0, id=0)</code></p> <p>Creates Australian Standards compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_6","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>standard</code> (str, optional): Australian standard specification</li> <li>\"AS5100.5-2017\": AS 5100.5-2017 (default)</li> <li>\"AS5100.5-2016\": AS 5100.5-2016</li> <li>\"AS/RTA5100.5-2011\": AS/RTA 5100.5-2011</li> <li>\"AS3600-2009\": AS 3600-2009</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_6","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): Australian standard specification</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> </ul>"},{"location":"Material/011comp/#examples_6","title":"Examples","text":"<pre><code># AS 5100.5-2017 standard\nCompStrength.AS(\"C30_AS2017\", \"AS5100.5-2017\", 30000)\n\n# AS 3600-2009 standard\nCompStrength.AS(\"C25_AS3600\", \"AS3600-2009\", 25000)\n</code></pre>"},{"location":"Material/011comp/#gilbertranzi","title":"GilbertRanzi","text":"<p><code>CompStrength.GilbertRanzi(name, fck=0, cement_type=1, density=230, id=0)</code></p> <p>Creates Gilbert and Ranzi compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_7","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>cement_type</code> (int, optional): Type of cement</li> <li>1: Ordinary Portland cement: 0.38 (default)</li> <li>2: High early strength cement: 0.25</li> <li><code>density</code> (float): Weight density in kg/m\u00b3 (default=230)</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_7","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"GILBERT AND RANZI\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>iCTYPE</code> (int): Type of cement</li> <li><code>DENSITY</code> (float): Weight density</li> </ul>"},{"location":"Material/011comp/#examples_7","title":"Examples","text":"<pre><code># Standard Gilbert-Ranzi model\nCompStrength.GilbertRanzi(\"C30_GR\", 30000, 1, 2400)\n\n# High early strength cement\nCompStrength.GilbertRanzi(\"C40_GR_HES\", 40000, 2, 2450)\n</code></pre>"},{"location":"Material/011comp/#japanhydration","title":"JapanHydration","text":"<p><code>CompStrength.JapanHydration(name, fck=0, cement_type=1, use_concrete_data=True, tensile_strength_factor=3, factor_a=4.5, factor_b=0.95, factor_d=1.11, id=0)</code></p> <p>Creates Japan Hydration compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_8","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>cement_type</code> (int, optional): Type of cement</li> <li>0: Normal Portland cement</li> <li>1: Moderate Portland cement (default)</li> <li>2: High-early-strength Portland cement</li> <li><code>use_concrete_data</code> (bool): Enable concrete data option (default=True)</li> <li><code>tensile_strength_factor</code> (float): Factor for tensile strength (default=3)</li> <li><code>factor_a</code> (float): Model parameter A (default=4.5, used when use_concrete_data=False)</li> <li><code>factor_b</code> (float): Model parameter B (default=0.95, used when use_concrete_data=False)</li> <li><code>factor_d</code> (float): Model parameter D (default=1.11, used when use_concrete_data=False)</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_8","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"Japan(hydration)\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>iCTYPE</code> (int): Type of cement</li> <li><code>bUSE</code> (bool): Use concrete data option</li> <li><code>TENS_STRN_FACTOR</code> (float): Tensile strength factor</li> <li><code>A</code> (float): Model parameter A (when use_concrete_data=False)</li> <li><code>B</code> (float): Model parameter B (when use_concrete_data=False)</li> <li><code>D</code> (float): Model parameter D (when use_concrete_data=False)</li> </ul>"},{"location":"Material/011comp/#examples_8","title":"Examples","text":"<pre><code># Standard Japan hydration with concrete data\nCompStrength.JapanHydration(\"C30_JH\", 30000, 1, True, 3)\n\n# Custom factors without concrete data\nCompStrength.JapanHydration(\"C25_JH_Custom\", 25000, 0, False, 3, 4.0, 0.9, 1.0)\n</code></pre>"},{"location":"Material/011comp/#japanelastic","title":"JapanElastic","text":"<p><code>CompStrength.JapanElastic(name, fck=0, elastic_cement_type=0, id=0)</code></p> <p>Creates Japan Elastic compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_9","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>elastic_cement_type</code> (int, optional): Type of cement for elastic model</li> <li>0: Normal type: 0 (default)</li> <li>1: Rapid type: 1</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_9","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"Japan(elastic)\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>iECTYPE</code> (int): Elastic cement type</li> </ul>"},{"location":"Material/011comp/#examples_9","title":"Examples","text":"<pre><code># Normal type cement\nCompStrength.JapanElastic(\"C30_JE\", 30000, 0)\n\n# Rapid type cement\nCompStrength.JapanElastic(\"C40_JE_Rapid\", 40000, 1)\n</code></pre>"},{"location":"Material/011comp/#kds","title":"KDS","text":"<p><code>CompStrength.KDS(name, fck=0, cement_type=1, density=230, id=0)</code></p> <p>Creates KDS-2016 compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_10","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>cement_type</code> (int, optional): Type of cement</li> <li>1: N,R moist cured: 0.35 (default)</li> <li>2: N,R steam cured: 0.15</li> <li>3: RS moist cured: 0.25</li> <li>4: RS steam cured: 0.12</li> <li>5: SL: 0.40</li> <li><code>density</code> (float): Weight density in kg/m\u00b3 (default=230)</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_10","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"KDS-2016\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>iCTYPE</code> (int): Type of cement</li> <li><code>DENSITY</code> (float): Weight density</li> </ul>"},{"location":"Material/011comp/#examples_10","title":"Examples","text":"<pre><code># Standard KDS with N,R moist cured cement\nCompStrength.KDS(\"C30_KDS\", 30000, 1, 2400)\n\n# Steam cured cement\nCompStrength.KDS(\"C25_KDS_Steam\", 25000, 2, 2350)\n</code></pre>"},{"location":"Material/011comp/#kci","title":"KCI","text":"<p><code>CompStrength.KCI(name, fck=0, cement_type=1, id=0)</code></p> <p>Creates KCI-USD12 compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_11","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>cement_type</code> (int, optional): Type of cement</li> <li>1: N,R moist cured: 0.35 (default)</li> <li>2: N,R steam cured: 0.15</li> <li>3: RS moist cured: 0.25</li> <li>4: RS steam cured: 0.12</li> <li>5: SL: 0.40</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_11","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"KCI-USD12\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>iCTYPE</code> (int): Type of cement</li> </ul>"},{"location":"Material/011comp/#examples_11","title":"Examples","text":"<pre><code>CompStrength.KCI(\"C30_KCI\", 30000, 1)\n</code></pre>"},{"location":"Material/011comp/#koreanstandard","title":"KoreanStandard","text":"<p><code>CompStrength.KoreanStandard(name, fck=0, factor_a=1, factor_b=2, id=0)</code></p> <p>Creates Korean Standard compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_12","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>fck</code> (float): 28-day compressive strength (default=0)</li> <li><code>factor_a</code> (float): Model parameter A (default=1)</li> <li><code>factor_b</code> (float): Model parameter B (default=2)</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_12","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"CODE\"</li> <li><code>CODENAME</code> (str): \"KoreanStandard\"</li> <li><code>STRENGTH</code> (float): 28-day compressive strength</li> <li><code>A</code> (float): Model parameter A</li> <li><code>B</code> (float): Model parameter B</li> </ul>"},{"location":"Material/011comp/#examples_12","title":"Examples","text":"<pre><code># Standard Korean model\nCompStrength.KoreanStandard(\"C30_KS\", 30000, 1, 2)\n\n# Custom factors\nCompStrength.KoreanStandard(\"C25_KS_Custom\", 25000, 1.1, 1.8)\n</code></pre>"},{"location":"Material/011comp/#userdefined","title":"UserDefined","text":"<p><code>CompStrength.UserDefined(name, scale_factor=1, time_data=None, id=0)</code></p> <p>Creates User Defined compressive strength model properties.</p>"},{"location":"Material/011comp/#parameters_13","title":"Parameters","text":"<ul> <li><code>name</code> (str): Property name (required)</li> <li><code>scale_factor</code> (float): Scaling factor for the data (default=1)</li> <li><code>time_data</code> (list, optional): Time-dependent strength data. Each object should contain:</li> <li><code>TIME</code>: Time in days (number)</li> <li><code>COMP</code>: Compression strength (number)</li> <li><code>TENS</code>: Tensile strength (number)</li> <li><code>ELAST</code>: Elastic modulus (number)</li> <li><code>id</code> (int, optional): Unique identifier. Auto-generated if not specified.</li> </ul>"},{"location":"Material/011comp/#object-attributes_13","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The ID of the compressive strength definition.</li> <li><code>DATA</code> (dict): A dictionary containing the compressive strength properties. Specific keys include:</li> <li><code>NAME</code> (str): Name of the compressive strength definition.</li> <li><code>TYPE</code> (str): \"USER\"</li> <li><code>SCALE</code> (float): Scale factor</li> <li><code>aDATA</code> (list): Time-dependent strength data</li> </ul>"},{"location":"Material/012tdlink/","title":"Time Dependent Link","text":""},{"location":"Material/012tdlink/#time-dependent-material-link","title":"Time-Dependent Material Link","text":"<p>The TDMatLink class links materials with their time-dependent properties (creep/shrinkage and compressive strength).</p>"},{"location":"Material/012tdlink/#class-attributes","title":"Class Attributes","text":"<p>TDMatLink.mats -&gt; Dictionary of all material links.</p>"},{"location":"Material/012tdlink/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>matID</code> (int): The ID of the base material to which time-dependent properties are linked.</li> <li><code>CnSName</code> (str): The name of the CreepShrinkage definition to link.</li> <li><code>CompName</code> (str): The name of the CompStrength definition to link.</li> </ul>"},{"location":"Material/012tdlink/#methods","title":"Methods","text":""},{"location":"Material/012tdlink/#json","title":"json","text":"<p>Returns a JSON representation of all Time-Dependent Material Links defined in python.</p> <pre><code>print(TDMatLink.json())\n# Output:\n# {'Assign': {'1': {'TDMT_NAME': 'CS_M25', 'TDME_NAME': 'Comp_M25'}, ...}}\n</code></pre>"},{"location":"Material/012tdlink/#create","title":"create","text":"<p>Sends material links to Civil NX using a PUT request.</p> <pre><code>TDMatLink.create()\n</code></pre>"},{"location":"Material/012tdlink/#get","title":"get","text":"<p>Fetches material links from Civil NX and returns the JSON representation.</p> <pre><code>print(TDMatLink.get())\n</code></pre>"},{"location":"Material/012tdlink/#sync","title":"sync","text":"<p>Retrieves Time-Dependent Material Link data from Civil NX and rebuilds the internal dictionary.</p> <pre><code>TDMatLink.sync()\n</code></pre>"},{"location":"Material/012tdlink/#delete","title":"delete","text":"<p>Deletes all material links from both Python and Civil NX.</p> <pre><code>TDMatLink.delete()\n</code></pre>"},{"location":"Material/012tdlink/#examples","title":"Examples","text":"<pre><code># Link materials with their time-dependent properties\nlink1 = TDMatLink(1, \"CS_M25\", \"Comp_M25\")  # Link material ID 1 with M25 properties\nlink2 = TDMatLink(2, \"CS_C30\", \"Comp_C30\")  # Link material ID 2 with C30 properties\nlink3 = TDMatLink(3, \"CS_M25\", \"\")          # Link material ID 3 with only creep/shrinkage\n\nTDMatLink.create()\n</code></pre>"},{"location":"Material/012tdlink/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import *\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\") #Paste your MAPI Key\n\n# Create IRC compressive CreepShrinkage properties\n\ncs1 = CreepShrinkage.IRC(\"CS_C30\", code_year=2011, fck=30, notional_size=150, relative_humidity=75, age_shrinkage=7, type_cement='R', id=1)\ncs2 = CreepShrinkage.IRC(\"CS_M25\", code_year=2000, fck=25, notional_size=200, relative_humidity=70, age_shrinkage=3, type_cement='NR', id=2)\n\n# Create IRC compressive strength properties\nCompStrength.IRC(\"Comp_C30\", code_year=2020, fck_delta=30000, cement_type=2)\nCompStrength.IRC(\"Comp_M25\", code_year=2000, fck_delta=25000)\n\n# Link materials with time-dependent properties\n\nlink1 = TDMatLink(1, \"CS_M25\", \"Comp_M25\")  # Link material 1 with M25 properties\nlink2 = TDMatLink(2, \"CS_C30\", \"Comp_C30\")  # Link material 2 with C30 properties\n\n# Create all time-dependent properties in Civil NX\nCreepShrinkage.create()\nCompStrength.create()\nTDMatLink.create()\n\nprint(\"All time-dependent properties and links created successfully!\")\n\n# You can also create them all at once using Material.create() if materials exist\n# Material.create()  # This creates materials, creep/shrinkage, compressive strength, and links\n</code></pre>"},{"location":"MovingLoad/","title":"Moving Load","text":""},{"location":"MovingLoad/#moving-load","title":"Moving Load","text":"<p>The MovingLoad class provides a unified interface to create and manage components for a moving load analysis, including the design Code, Vehicles, Line Lanes, and load cases in Civil NX.</p> <p>Note.</p> <p>All the codes below assume the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicmciO252k81571d')\n</code></pre>"},{"location":"MovingLoad/#nested-classes","title":"Nested Classes","text":"<p>The MovingLoad class acts as a container for the following nested classes, each responsible for a specific part of the moving load definition:</p> <ul> <li>Code: Manages moving load design codes for different countries</li> <li>Vehicle: Creates standard vehicle loads based on country-specific design codes.</li> <li>LineLane: Creates and manages traffic lanes with country-specific standards</li> <li>Case: Creates Moving Load Cases</li> </ul>"},{"location":"MovingLoad/#methods","title":"Methods","text":""},{"location":"MovingLoad/#create","title":"create","text":"<p>Creates all defined moving load components (codes, Vehicle ,lanes, and cases) in Civil NX.</p> <pre><code>MovignLoad.Code(\"INDIA\")\nMovingLoad.create()\n</code></pre>"},{"location":"MovingLoad/#get","title":"get","text":"<p>Retrieves the data from Civil NX.</p> <pre><code>current_code = MovingLoad.Code.get()\nvehicle_data = MovingLoad.Vehicle.get()\nlane_data = MovingLoad.LineLane.get()\nCase = MovingLoad.Case.get()\n</code></pre>"},{"location":"MovingLoad/#json","title":"json","text":"<p>Returns a JSON data</p> <pre><code>vehicle_json = MovingLoad.Vehicle.json()\nlane_json = MovingLoad.LineLane.json()\ncase_json = MovingLoad.Case.json()\n</code></pre>"},{"location":"MovingLoad/#sync","title":"sync","text":"<p>Sync the Data with Civil NX Model</p> <pre><code>MovingLoad.sync()\n</code></pre>"},{"location":"MovingLoad/#delete","title":"delete","text":"<p>To delete all moving load components</p> <pre><code># Deletes all Moving Load Data\nMovingLoad.delete()\n</code></pre>"},{"location":"MovingLoad/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import *\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\") # Paste your MAPI Key\n\n# Create a simple bridge structure\nfor i in range(11):\n    Node(i * 3, 0, 0)\nNode.create()\n\nfor i in range(10):\n    Element.Beam(i + 1, i + 2)\nElement.create()\n\n# Set the moving load code to Indian standards\nMovingLoad.Code(\"INDIA\")\n\n# Define an IRC vehicle\nMovingLoad.Vehicle.India(\n    name=\"IRC_Class_A\",\n    standard_code=\"IRC\",\n    vehicle_type=\"Class A\"\n)\n\n# Define two traffic lanes on the bridge elements\nMovingLoad.LineLane.India(\n    Lane_name=\"Lane_1\", \n    Ecc=-1.8, \n    Wheel_space=1.8, \n    Elment_start=1, \n    Elemnt_end=10,\n\n    Span=30\n\n)\n\nMovingLoad.LineLane.India(\n    Lane_name=\"Lane_2\", \n    Ecc=1.8, \n    Wheel_space=1.8, \n    Elment_start=1, \n    Elemnt_end=10,\n    Span=30\n)\n\n# Define a general moving load case\nMovingLoad.Case.India(\n    name=\"General_IRC_Loading\",\n    num_loaded_lanes=2,\n    id =1 ,\n    sub_load_items=[\n        [1.0, 1, 2, \"IRC_Class_A\", [\"Lane_1\", \"Lane_2\"]]\n    ]\n)\n# Create the load case in Midas Civil\nMovingLoad.create()\n\nprint(\"Moving load setup completed successfully!\")\n</code></pre>"},{"location":"MovingLoad/000Code/","title":"\u200e \u200e \u200e Code","text":""},{"location":"MovingLoad/000Code/#moving-load-code","title":"Moving Load Code","text":"<p>A nested class within MovingLoad used to set and manage moving load design codes for different countries.</p>"},{"location":"MovingLoad/000Code/#constructor","title":"Constructor","text":"<p><code>MovingLoad.Code(code_name)</code></p> <p>Sets the active moving load design code in the Civil NX model.</p>"},{"location":"MovingLoad/000Code/#parameters","title":"Parameters","text":"<ul> <li><code>code_name</code> (str): The name of the moving load code to be used</li> </ul>"},{"location":"MovingLoad/000Code/#available-codes","title":"Available Codes","text":"<ul> <li><code>\"KSCE-LSD15\"</code> - Korean Society of Civil Engineers Load &amp; Resistance Factor Design</li> <li><code>\"KOREA\"</code> - Korean standards</li> <li><code>\"AASHTO STANDARD\"</code> - American Association of State Highway Officials Standard</li> <li><code>\"AASHTO LRFD\"</code> - AASHTO Load and Resistance Factor Design</li> <li><code>\"AASHTO LRFD(PENNDOT)\"</code> - Pennsylvania DOT variant of AASHTO LRFD</li> <li><code>\"CHINA\"</code> - Chinese bridge design standards</li> <li><code>\"INDIA\"</code> - Indian Road Congress (IRC) standards</li> <li><code>\"TAIWAN\"</code> - Taiwanese bridge design standards</li> <li><code>\"CANADA\"</code> - Canadian Highway Bridge Design Code</li> <li><code>\"BS\"</code> - British Standards</li> <li><code>\"EUROCODE\"</code> - European standards (EN 1991-2)</li> <li><code>\"AUSTRALIA\"</code> - Australian bridge design standards</li> <li><code>\"POLAND\"</code> - Polish bridge design standards</li> <li><code>\"RUSSIA\"</code> - Russian bridge design standards</li> <li><code>\"SOUTH AFRICA\"</code> - South African bridge design standards</li> </ul>"},{"location":"MovingLoad/000Code/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>code_name</code> (str): The name of the selected design code</li> </ul>"},{"location":"MovingLoad/000Code/#class-methods","title":"Class Methods","text":""},{"location":"MovingLoad/000Code/#get","title":"get","text":"<p>Retrieves the currently active moving load code from Civil NX.</p> <pre><code>current_code = MovingLoad.Code.get()\nprint(current_code)\n</code></pre> <p>Returns: Dictionary containing the active moving load code information</p>"},{"location":"MovingLoad/000Code/#delete","title":"delete","text":"<p>Removes the moving load code setting from Civil NX.</p> <pre><code>MovingLoad.Code.delete()\n</code></pre>"},{"location":"MovingLoad/000Code/#examples","title":"Examples","text":""},{"location":"MovingLoad/000Code/#indian-standards","title":"Indian Standards","text":"<pre><code># Set Indian Road Congress standards\nMovingLoad.Code(\"INDIA\")\n</code></pre>"},{"location":"MovingLoad/000Code/#aashto-lrfd-standards","title":"AASHTO LRFD Standards","text":"<pre><code># Set AASHTO LRFD standards\nMovingLoad.Code(\"AASHTO LRFD\")\n</code></pre>"},{"location":"MovingLoad/000Code/#eurocode-standards","title":"Eurocode Standards","text":"<pre><code># Set Eurocode standards\nMovingLoad.Code(\"EUROCODE\")\n</code></pre>"},{"location":"MovingLoad/001Vehicle/","title":"\u200e \u200e \u200e Vehicle","text":""},{"location":"MovingLoad/001Vehicle/#moving-load-vehicle","title":"Moving Load Vehicle","text":"<p>A nested class within <code>MovingLoad</code> used to create and manage standard vehicle loads for moving load analysis according to country-specific design codes.</p>"},{"location":"MovingLoad/001Vehicle/#constructor","title":"Constructor","text":"<p>The main <code>Vehicle</code> class is not intended for direct use. Instead, use one of the country-specific subclasses.</p>"},{"location":"MovingLoad/001Vehicle/#country-specific-subclasses","title":"Country-Specific Subclasses","text":""},{"location":"MovingLoad/001Vehicle/#india","title":"India","text":"<p><code>MovingLoad.Vehicle.India(name, standard_code, vehicle_type, vehicle_name=None, id=None)</code></p> <p>Creates a vehicle load according to Indian Road Congress (IRC) or Indian Railway Standards (IRS).</p>"},{"location":"MovingLoad/001Vehicle/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str): A unique name for the vehicle load.</li> <li><code>standard_code</code> (str): The standard code to use. Available options are <code>\"IRC\"</code>&amp; <code>\"IRS\"</code></li> <li><code>vehicle_type</code> (str): The specific type of vehicle.<ul> <li>For <code>\"IRC\"</code>: <code>\"Class A\"</code>, <code>\"Class B\"</code>, <code>\"Class 70R\"</code>, <code>\"Class 40R\"</code>, <code>\"Class AA\"</code>,<code>\"Footway\"</code>.</li> <li>For <code>\"IRS\"</code>: <code>\"BG-1676\"</code>, <code>\"MG-1000\"</code>, <code>\"NG-762\"</code>, <code>\"HML\"</code>, <code>\"FTB\"</code>.</li> </ul> </li> <li><code>vehicle_name</code> (int, optional): A 1-based index required for the <code>\"IRS\"</code> standard to select a specific vehicle from a list. For example, for <code>vehicle_type=\"BG-1676\"</code>, <code>vehicle_name=1</code> selects <code>\"Modified B.G. Loading 1987-1\"</code>.</li> <li><code>id</code> (int, optional): A unique integer ID for the vehicle. If <code>None</code>, it is auto-assigned.</li> </ul>"},{"location":"MovingLoad/001Vehicle/#eurocode","title":"Eurocode","text":"<p><code>MovingLoad.Vehicle.Eurocode(name, standard_code, vehicle_type, vehicle_name=None, id=None)</code></p> <p>Creates a vehicle load according to Eurocode standards.</p>"},{"location":"MovingLoad/001Vehicle/#parameters_1","title":"Parameters","text":"<ul> <li><code>name</code> (str): A unique name for the vehicle load.</li> <li><code>standard_code</code> (str): The Eurocode category. Available options are <code>\"RoadBridge\"</code>, <code>\"FTB\"</code> (Footbridge), <code>\"RoadBridgeFatigue\"</code>, and <code>\"RailTraffic\"</code>.</li> <li><code>vehicle_type</code> (str): The specific load model or type (e.g., <code>\"Load Model 1\"</code>, <code>\"Load Model 3\"</code>).</li> <li><code>vehicle_name</code> (int, optional): A 1-based index required for vehicle types with a selectable list, such as <code>\"Load Model 3\"</code> or <code>\"HSLM A1 ~ HSLM A10\"</code>.</li> <li><code>id</code> (int, optional): A unique integer ID for the vehicle. If <code>None</code>, it is auto-assigned.</li> </ul>"},{"location":"MovingLoad/001Vehicle/#class-methods","title":"Class Methods","text":""},{"location":"MovingLoad/001Vehicle/#json","title":"json","text":"<p>Returns a JSON representation of all defined vehicle objects.</p> <pre><code># Define a vehicle\nMovingLoad.Vehicle.India(\n    name=\"IRC_Class_A\", \n    standard_code=\"IRC\", \n    vehicle_type=\"Class A\"\n)\n# Get JSON representation\nvehicle_json = MovingLoad.Vehicle.json()\nprint(vehicle_json)\n</code></pre>"},{"location":"MovingLoad/001Vehicle/#create","title":"create","text":"<p>Retrieves all lane data from Civil NX.</p> <pre><code># Define vehicles first\nMovingLoad.Vehicle.India(name=\"IRC_Class_A\", standard_code=\"IRC\", vehicle_type=\"Class A\")\n\n# Create the vehicles in the Midas model\nMovingLoad.Vehicle.create()\n</code></pre>"},{"location":"MovingLoad/001Vehicle/#get","title":"get","text":"<p>Retrieves all lane data from Civil NX.</p> <pre><code>vehicle_data = MovingLoad.Vehicle.get()\nprint(vehicle_data)\n</code></pre>"},{"location":"MovingLoad/001Vehicle/#sync","title":"sync","text":"<p>Synchronizes Vehicle data from Civil NX to Python objects.</p> <pre><code># Syncs vehicles from the model into the script's memory\nMovingLoad.Vehicle.sync()\n\n# Display the names of synced vehicles\nfor vehicle in MovingLoad.Vehicle.vehicles:\n    print(f\"Synced Vehicle: {vehicle.name}\")\n</code></pre>"},{"location":"MovingLoad/001Vehicle/#delete","title":"delete","text":"<p>Deletes all vehicle from both Python and Civil NX.</p> <pre><code># Delete all vehicles in the model\nMovingLoad.Vehicle.delete()\n</code></pre>"},{"location":"MovingLoad/001Vehicle/#examples","title":"Examples","text":""},{"location":"MovingLoad/001Vehicle/#creating-as-per-indian-standard","title":"Creating As per Indian Standard","text":"<pre><code># Set the moving load code to India\nMovingLoad.Code(\"INDIA\")\n\n# Define an IRC Class 70R vehicle\nMovingLoad.Vehicle.India(\n    name=\"IRC_70R_Wheeled\",\n    standard_code=\"IRC\",\n    vehicle_type=\"Class 70R\"\n)\n\n# Create the vehicle in Midas Civil\nMovingLoad.Vehicle.create()\n</code></pre>"},{"location":"MovingLoad/001Vehicle/#creating-as-per-eurocode","title":"Creating As Per Eurocode","text":"<pre><code># Set the moving load code to Eurocode\nMovingLoad.Code(\"EUROCODE\")\n\n# Define a Eurocode Load Model 1\nMovingLoad.Vehicle.Eurocode(\n    name=\"EC_Load_Model_1\",\n    standard_code=\"RoadBridge\",\n    vehicle_type=\"Load Model 1\"\n)\n\n# Create the vehicle in Midas Civil\nMovingLoad.Vehicle.create()\n</code></pre>"},{"location":"MovingLoad/002LineLane/","title":"\u200e \u200e \u200e Line Lane","text":""},{"location":"MovingLoad/002LineLane/#moving-load-linelane","title":"Moving Load LineLane","text":"<p>A nested class within MovingLoad used to create and manage traffic lanes for moving load analysis with country-specific standards.</p>"},{"location":"MovingLoad/002LineLane/#constructor","title":"Constructor","text":"<p><code>MovingLoad.LineLane(code, Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, IF=0, Span=0, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code></p> <p>Creates a traffic lane with specified parameters.</p>"},{"location":"MovingLoad/002LineLane/#parameters","title":"Parameters","text":"<ul> <li><code>code</code> (str): Country code for traffic lane standards</li> <li><code>Lane_name</code> (str): A unique name for the lane</li> <li><code>Ecc</code> (float): Lateral eccentricity of the lane's centerline from the reference element path (positive = +Y direction)</li> <li><code>Wheel_space</code> (float): Center-to-center distance between vehicle wheels (typically 1.8m or 6ft)</li> <li><code>Elment_start</code> (int): First element ID in the continuous path defining the lane</li> <li><code>Elemnt_end</code> (int): Last element ID in the continuous path defining the lane</li> <li><code>IF</code> (float, optional): Impact Factor or Scale Factor as defined by design code. Default: 0</li> <li><code>Span</code> (float, optional): Span length for impact factor calculation. Default: 0</li> <li><code>id</code> (int, optional): Unique integer ID for the lane (auto-assigned if None). Default: None</li> <li><code>width</code> (float, optional): Width of the traffic lane. Default: 0</li> <li><code>opt_width</code> (float, optional): Allowable width for auto-positioning. Default: 0</li> <li><code>Group_Name</code> (str, optional): Group name for cross-beam load distribution. Default: \"\"</li> <li><code>Moving_Direction</code> (str, optional): Vehicle movement direction (\"FORWARD\", \"BACKWARD\", \"BOTH\"). Default: \"BOTH\"</li> <li><code>Skew_start</code> (float, optional): Bridge skew angle at lane start (degrees). Default: 0</li> <li><code>Skew_end</code> (float, optional): Bridge skew angle at lane end (degrees). Default: 0</li> </ul>"},{"location":"MovingLoad/002LineLane/#load-distribution-types","title":"Load Distribution Types","text":"<ul> <li>LANE: Standard lane-based load distribution (default)</li> <li>CROSS: Cross-beam load distribution (when Group_Name is provided)</li> </ul>"},{"location":"MovingLoad/002LineLane/#movement-directions","title":"Movement Directions","text":"<ul> <li>BOTH:  Both directional traffic (default)</li> <li>FORWARD: Forward direction only</li> <li>BACKWARD: Backward direction only</li> </ul>"},{"location":"MovingLoad/002LineLane/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>code</code> (str): The country code for the lane</li> <li><code>Lane_name</code> (str): The unique name of the lane</li> <li><code>Ecc</code> (float): Lateral eccentricity value</li> <li><code>Wheel_space</code> (float): Wheel spacing distance</li> <li><code>Elment_start</code> (int): Starting element ID</li> <li><code>Elemnt_end</code> (int): Ending element ID</li> <li><code>IF</code> (float): Impact/scale factor</li> <li><code>Span</code> (float): Span length</li> <li><code>id</code> (int): Lane ID</li> <li><code>width</code> (float): Lane width</li> <li><code>opt_width</code> (float): Allowable width</li> <li><code>Group_Name</code> (str): Group name for load distribution</li> <li><code>Moving_Direction</code> (str): Movement direction</li> <li><code>Skew_start</code> (float): Start skew angle</li> <li><code>Skew_end</code> (float): End skew angle</li> </ul>"},{"location":"MovingLoad/002LineLane/#country-specific-subclasses","title":"Country-Specific Subclasses","text":""},{"location":"MovingLoad/002LineLane/#india","title":"India","text":"<p><code>MovingLoad.LineLane.India(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, IF=0, Span=0, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to Indian Road Congress (IRC) standards.</p>"},{"location":"MovingLoad/002LineLane/#china","title":"China","text":"<p><code>MovingLoad.LineLane.China(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, IF=0, Span=0, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to Chinese bridge design standards.</p>"},{"location":"MovingLoad/002LineLane/#korea","title":"Korea","text":"<p><code>MovingLoad.LineLane.Korea(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, IF=0, id=None, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to Korean standards (fixed width = 3m).</p>"},{"location":"MovingLoad/002LineLane/#taiwan","title":"Taiwan","text":"<p><code>MovingLoad.LineLane.Taiwan(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, IF=0, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to Taiwanese standards.</p>"},{"location":"MovingLoad/002LineLane/#aashto-standard","title":"AASHTO Standard","text":"<p><code>MovingLoad.LineLane.AASHTOStandard(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, IF=0, id=None, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to AASHTO Standard (fixed width = 3m).</p>"},{"location":"MovingLoad/002LineLane/#aashto-lrfd","title":"AASHTO LRFD","text":"<p><code>MovingLoad.LineLane.AASHTOLRFD(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, IF=0, id=None, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to AASHTO LRFD (fixed width = 3m, IF represents centrifugal force).</p>"},{"location":"MovingLoad/002LineLane/#penndot","title":"PENNDOT","text":"<p><code>MovingLoad.LineLane.PENNDOT(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, id=None, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to AASHTO LRFD (PENNDOT) (fixed width = 3m).</p>"},{"location":"MovingLoad/002LineLane/#canada","title":"Canada","text":"<p><code>MovingLoad.LineLane.Canada(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, id=None, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to Canadian standards (fixed width = 3m).</p>"},{"location":"MovingLoad/002LineLane/#bs","title":"BS","text":"<p><code>MovingLoad.LineLane.BS(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to British Standards (BS).</p>"},{"location":"MovingLoad/002LineLane/#eurocode","title":"Eurocode","text":"<p><code>MovingLoad.LineLane.Eurocode(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, IF=0, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to European standards (IF represents vertical load eccentricity).</p>"},{"location":"MovingLoad/002LineLane/#australia","title":"Australia","text":"<p><code>MovingLoad.LineLane.Australia(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to Australian standards.</p>"},{"location":"MovingLoad/002LineLane/#poland","title":"Poland","text":"<p><code>MovingLoad.LineLane.Poland(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to Polish standards.</p>"},{"location":"MovingLoad/002LineLane/#russia","title":"Russia","text":"<p><code>MovingLoad.LineLane.Russia(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to Russian standards.</p>"},{"location":"MovingLoad/002LineLane/#south-africa","title":"South Africa","text":"<p><code>MovingLoad.LineLane.SouthAfrica(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, id=None, width=0, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to South African standards.</p>"},{"location":"MovingLoad/002LineLane/#ksce-lsd15","title":"KSCE-LSD15","text":"<p><code>MovingLoad.LineLane.KSCELSD15(Lane_name, Ecc, Wheel_space, Elment_start, Elemnt_end, id=None, opt_width=0, Group_Name=\"\", Moving_Direction=\"BOTH\", Skew_start=0, Skew_end=0)</code> Creates a traffic lane according to KSCE-LSD15 (fixed width = 3m).</p>"},{"location":"MovingLoad/002LineLane/#class-methods","title":"Class Methods","text":""},{"location":"MovingLoad/002LineLane/#json","title":"json","text":"<p>Returns JSON representation of all defined traffic lanes.</p> <pre><code># Create some lanes\nMovingLoad.LineLane.India(\"Lane1\", -1.8, 1.8, 1, 10, Span=30)\nMovingLoad.LineLane.India(\"Lane2\", 1.8, 1.8, 1, 10, Span=30)\n\n# Get JSON representation\nlane_json = MovingLoad.LineLane.json()\nprint(lane_json)\n</code></pre>"},{"location":"MovingLoad/002LineLane/#create","title":"create","text":"<p>Sends all defined traffic lanes to Civil NX.</p> <pre><code>MovingLoad.LineLane.create()\n</code></pre>"},{"location":"MovingLoad/002LineLane/#get","title":"get","text":"<p>Retrieves all lane data from Civil NX.</p> <pre><code>lane_data = MovingLoad.LineLane.get()\nprint(lane_data)\n</code></pre>"},{"location":"MovingLoad/002LineLane/#sync","title":"sync","text":"<p>Synchronizes lane data from Civil NX to Python objects.</p> <pre><code>MovingLoad.LineLane.sync()\n</code></pre>"},{"location":"MovingLoad/002LineLane/#delete","title":"delete","text":"<p>Deletes all traffic lanes from both Python and Civil NX.</p> <pre><code>MovingLoad.LineLane.delete()\n</code></pre>"},{"location":"MovingLoad/002LineLane/#examples","title":"Examples","text":""},{"location":"MovingLoad/002LineLane/#creating-indian-standard-lanes","title":"Creating Indian Standard Lanes","text":"<pre><code># Set Indian standards\nMovingLoad.Code(\"INDIA\")\n\n# Create two lanes for a bridge\nMovingLoad.LineLane.India(\n    Lane_name=\"LeftLane\",\n    Ecc=-1.875,  # 1.875m left of centerline\n    Wheel_space=1.8,  # Standard wheel spacing\n    Elment_start=1,\n    Elemnt_end=20,\n    Span=30  # 30m span\n)\n\nMovingLoad.LineLane.India(\n    Lane_name=\"RightLane\",\n    Ecc=1.875,   # 1.875m right of centerline\n    Wheel_space=1.8,\n    Elment_start=1,\n    Elemnt_end=20,\n    Span=30\n\n)\n\n# Create lanes in Civil NX\nMovingLoad.LineLane.create()\n</code></pre>"},{"location":"MovingLoad/002LineLane/#creating-aashto-lrfd-lanes","title":"Creating AASHTO LRFD Lanes","text":"<pre><code># Set AASHTO LRFD standards\nMovingLoad.Code(\"AASHTO LRFD\")\n\n# Create lane with centrifugal force consideration\nMovingLoad.LineLane.AASHTOLRFD(\n    Lane_name=\"Highway_Lane_1\",\n    Ecc=-1.8,\n    Wheel_space=1.83,  # 6 feet\n    Elment_start=5,\n    Elemnt_end=25,\n    IF=0.15  # Centrifugal force factor\n)\n\nMovingLoad.LineLane.create()\n</code></pre>"},{"location":"MovingLoad/002LineLane/#creating-eurocode-lanes","title":"Creating Eurocode Lanes","text":"<pre><code># Set European standards\nMovingLoad.Code(\"EUROCODE\")\n\n# Create lane with load eccentricity\nMovingLoad.LineLane.Eurocode(\n    Lane_name=\"Euro_Lane\",\n    Ecc=0,\n    Wheel_space=2.0,\n    Elment_start=10,\n    Elemnt_end=30,\n    IF=0.6,  # Vertical load eccentricity\n    width=3.0\n)\n\nMovingLoad.LineLane.create()\n</code></pre>"},{"location":"MovingLoad/002LineLane/#creating-lanes-with-cross-beam-distribution","title":"Creating Lanes with Cross-Beam Distribution","text":"<pre><code># Create lanes with cross-beam load distribution\nMovingLoad.LineLane.India(\n    Lane_name=\"CrossBeam_Lane1\",\n    Ecc=-2.0,\n    Wheel_space=1.8,\n    Elment_start=1,\n    Elemnt_end=15,\n    Group_Name=\"CrossBeamGroup1\",  # Enables cross-beam distribution\n    width=3.5\n)\n\nMovingLoad.LineLane.India(\n    Lane_name=\"CrossBeam_Lane2\",\n    Ecc=2.0,\n    Wheel_space=1.8,\n    Elment_start=1,\n    Elemnt_end=15,\n    Group_Name=\"CrossBeamGroup1\",  # Same group for distribution\n    width=3.5\n)\n\nMovingLoad.LineLane.create()\n</code></pre>"},{"location":"MovingLoad/002LineLane/#creating-skewed-bridge-lanes","title":"Creating Skewed Bridge Lanes","text":"<pre><code># Create lanes for a skewed bridge\nMovingLoad.LineLane.China(\n    Lane_name=\"Skewed_Lane\",\n    Ecc=0,\n    Wheel_space=2.0,\n    Elment_start=1,\n    Elemnt_end=12,\n    Skew_start=15,    # 15 degrees skew at start\n    Skew_end=20,      # 20 degrees skew at end\n    IF=1.3            # Scale factor\n)\n\nMovingLoad.LineLane.create()\n</code></pre>"},{"location":"MovingLoad/002LineLane/#one-way-traffic-lane","title":"One-Way Traffic Lane","text":"<pre><code># Create a one-way traffic lane\nMovingLoad.LineLane.Korea(\n    Lane_name=\"Oneway_Forward\",\n    Ecc=-1.5,\n    Wheel_space=1.8,\n    Elment_start=5,\n    Elemnt_end=25,\n    Moving_Direction=\"FORWARD\"  # Only forward traffic\n)\n\nMovingLoad.LineLane.create()\n</code></pre>"},{"location":"MovingLoad/002LineLane/#synchronizing-existing-lanes","title":"Synchronizing Existing Lanes","text":"<pre><code># Sync lanes from Civil NX model\nMovingLoad.LineLane.sync()\n\n# Display synced lanes\nfor lane in MovingLoad.LineLane.lanes:\n    print(f\"Lane: {lane.Lane_name}, Code: {lane.code}, Elements: {lane.Elment_start}-{lane.Elemnt_end}\")\n</code></pre>"},{"location":"MovingLoad/003VHCase/","title":"\u200e \u200e \u200e Case","text":""},{"location":"MovingLoad/003VHCase/#moving-load-case","title":"Moving Load Case","text":"<p>A nested class within <code>MovingLoad</code> used to define and manage moving load cases for analysis, with support for country-specific standards like Indian and Eurocode.</p>"},{"location":"MovingLoad/003VHCase/#constructor","title":"Constructor","text":"<p>The main <code>Case</code> class constructor is for internal use. Please use the country-specific subclasses <code>MovingLoad.Case.India</code> or <code>MovingLoad.Case.Eurocode</code> to create load cases.</p>"},{"location":"MovingLoad/003VHCase/#country-specific-subclasses","title":"Country-Specific Subclasses","text":""},{"location":"MovingLoad/003VHCase/#india","title":"India","text":"<p><code>MovingLoad.Case.India(name, num_loaded_lanes, id=None, opt_auto_ll=False, opt_lc_for_permit=False, sub_load_items=None, scale_factor=None, permit_vehicle_id=None, ref_lane_id=None, eccentricity=None, permit_scale_factor=None)</code></p> <p>Creates a moving load case according to Indian standards (IRC). It supports three main types of load cases: General, Auto Live Load Combination, and Permit Vehicle.</p>"},{"location":"MovingLoad/003VHCase/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str): The name for the load case.</li> <li><code>num_loaded_lanes</code> (int): The number of lanes to be loaded.</li> <li><code>id</code> (int, optional): A unique integer ID for the case. Auto-assigned if <code>None</code>.</li> <li><code>opt_auto_ll</code> (bool, optional): Set to <code>True</code> for \"Auto Live Load Combinations\". Defaults to <code>False</code>.</li> <li><code>opt_lc_for_permit</code> (bool, optional): Set to <code>True</code> for \"Load Cases for Permit Vehicle\". Defaults to <code>False</code>.</li> <li> <p><code>sub_load_items</code> (list): A list of lists defining the sub-loads. The format depends on the selected options:</p> <ul> <li> <p>Case 1: General Load (<code>opt_auto_ll=False</code>, <code>opt_lc_for_permit=False</code>)     Each inner list must contain 5 items: <code>[Scale Factor, Min Lanes, Max Lanes, Vehicle Name, [Selected Lanes]]</code></p> <ul> <li><code>Scale Factor</code> (float): Load combination factor.</li> <li><code>Min Lanes</code> (int): Minimum number of loaded lanes.</li> <li><code>Max Lanes</code> (int): Maximum number of loaded lanes.</li> <li><code>Vehicle Name</code> (str): e.g., <code>\"Class A\"</code>.</li> <li><code>[Selected Lanes]</code> (list[str]): e.g., <code>[\"Lane1\", \"Lane2\"]</code>.</li> </ul> </li> <li> <p>Case 2: Auto Live Load (<code>opt_auto_ll=True</code>)     Each inner list must contain 5-6 items: <code>[Scale Factor, Vehicle Class I, Vehicle Class II, Footway Vehicle, [Carriageway Lanes], [Footway Lanes]]</code></p> <ul> <li><code>Vehicle Class I/II</code> (str): Primary/secondary vehicle names. Use <code>\"\"</code> for none.</li> <li><code>Footway Vehicle</code> (str): Footway vehicle name. Use <code>\"\"</code> for none.</li> <li><code>[Footway Lanes]</code> (list[str], optional): Lanes for footway load.</li> </ul> </li> <li> <p>Case 3: Permit Vehicle (<code>opt_lc_for_permit=True</code>)     This parameter is not used. Use the <code>permit_vehicle_id</code>, <code>ref_lane_id</code>, etc., parameters instead.</p> </li> </ul> </li> <li> <p><code>scale_factor</code> (list, optional): A list of 4 numbers for the Multiple Presence Factor. Defaults to <code>[1, 0.9, 0.8, 0.8]</code>.</p> </li> <li><code>permit_vehicle_id</code> (int, optional): The ID of the permit vehicle. Required for permit cases.</li> <li><code>ref_lane_id</code> (int, optional): The reference lane ID. Required for permit cases.</li> <li><code>eccentricity</code> (float, optional): Eccentricity for the permit vehicle. Required for permit cases.</li> <li><code>permit_scale_factor</code> (float, optional): Scale factor for the permit vehicle. Required for permit cases.</li> </ul>"},{"location":"MovingLoad/003VHCase/#eurocode","title":"Eurocode","text":"<p><code>MovingLoad.Case.Eurocode(name, load_model, use_optimization=False, id=None, sub_load_items=None, **kwargs)</code></p> <p>Creates a moving load case according to Eurocode standards. It supports General Load and Moving Load Optimization modes across various load models.</p>"},{"location":"MovingLoad/003VHCase/#parameters_1","title":"Parameters","text":"<ul> <li><code>name</code> (str): The name of the load case.</li> <li><code>load_model</code> (int): The Eurocode Load Model type (1-5).</li> <li><code>use_optimization</code> (bool, optional): Set to <code>True</code> for \"Moving Load Optimization\". Defaults to <code>False</code>.</li> <li><code>id</code> (int, optional): A unique integer ID for the case. Auto-assigned if <code>None</code>.</li> <li><code>sub_load_items</code> (list): A simplified list for defining the load case details. The format varies significantly based on <code>load_model</code> and <code>use_optimization</code>.</li> <li><code>**kwargs</code>: Additional individual parameters can be passed</li> </ul>"},{"location":"MovingLoad/003VHCase/#sub_load_items-format-details","title":"<code>sub_load_items</code> Format Details","text":"<ul> <li> <p>General Load (<code>use_optimization=False</code>)</p> <ul> <li><code>load_model = 1</code>: <code>[opt_leading, vhl_name1, vhl_name2, selected_lanes, remaining_area_lanes, footway_lanes]</code><ul> <li><code>opt_leading</code> (bool): <code>True</code> for leading vehicle.</li> <li><code>vhl_name1</code>/<code>vhl_name2</code> (str): Vehicle names.</li> <li><code>selected_lanes</code> (list[str]): Lanes for tandem system.</li> <li><code>remaining_area_lanes</code> (list[str]): Lanes for UDL.</li> <li><code>footway_lanes</code> (list[str]): Lanes for footway load.</li> </ul> </li> <li><code>load_model = 2</code>: <code>[opt_leading, opt_comb, [(name, sf, min_L, max_L, [lanes]), ...]]</code><ul> <li><code>opt_comb</code> (int): Combination option.</li> <li>The inner list defines sub-loads with: <code>name</code> (str), <code>sf</code> (float), <code>min_L</code>/<code>max_L</code> (int), and <code>lanes</code> (list[str]).</li> </ul> </li> <li><code>load_model = 3</code>: <code>[opt_leading, vhl_name1, vhl_name2, selected_lanes, remaining_area_lanes]</code></li> <li><code>load_model = 4</code>: <code>[opt_leading, vhl_name1, vhl_name2, selected_lanes, remaining_area_lanes, straddling_lanes]</code><ul> <li><code>straddling_lanes</code> (list[dict]): e.g., <code>[{'NAME1': 'Lane1', 'NAME2': 'Lane2'}]</code>.</li> </ul> </li> <li><code>load_model = 5</code> (Railway): <code>[opt_psi, opt_comb, [sf1,sf2,sf3], [mf1,mf2,mf3], [(name, sf, min_L, max_L, [lanes]), ...]]</code><ul> <li><code>opt_psi</code> (bool): <code>True</code> to use psi factors.</li> <li><code>[sf1,sf2,sf3]</code> (list[float]): Scale factors.</li> <li><code>[mf1,mf2,mf3]</code> (list[float]): Multi-presence factors.</li> </ul> </li> </ul> </li> <li> <p>Moving Load Optimization (<code>use_optimization=True</code>)</p> <ul> <li><code>load_model = 1</code> or <code>3</code>: <code>[opt_leading, vhl_name1, vhl_name2, min_dist, opt_lane, loaded_lanes, [selected_lanes]]</code><ul> <li><code>min_dist</code> (float): Minimum vehicle distance.</li> <li><code>opt_lane</code> (str): Name of the optimization lane.</li> <li><code>loaded_lanes</code> (int): Number of loaded lanes.</li> </ul> </li> <li><code>load_model = 2</code>: <code>[opt_leading, opt_comb, min_dist, opt_lane, min_v, max_v, [(name, sf), ...]]</code><ul> <li><code>min_v</code>/<code>max_v</code> (int): Min/max number of vehicles.</li> <li>The inner list defines vehicles with <code>name</code> (str) and <code>sf</code> (float).</li> </ul> </li> <li><code>load_model = 4</code>: <code>[opt_leading, vhl_name1, vhl_name2, min_dist, opt_lane, loaded_lanes, [selected_lanes], [straddling_lanes]]</code></li> <li><code>load_model = 5</code> (Railway): <code>[opt_psi, opt_comb, [sf1,sf2,sf3], [mf1,mf2,mf3], min_dist, opt_lane, min_v, max_v, [(name, sf), ...]]</code></li> </ul> </li> </ul>"},{"location":"MovingLoad/003VHCase/#class-methods","title":"Class Methods","text":""},{"location":"MovingLoad/003VHCase/#create","title":"create","text":"<p>Creates all defined moving load cases in the Midas Civil model. </p><pre><code># Define cases first\nMovingLoad.Case.India(...)\nMovingLoad.Case.Eurocode(...)\n# Then create them in the model\nMovingLoad.Case.create()\n</code></pre><p></p>"},{"location":"MovingLoad/003VHCase/#json","title":"json","text":"<p>Returns a JSON representation of all defined load cases. </p><pre><code>case_json = MovingLoad.Case.json()\nprint(case_json)\n</code></pre><p></p>"},{"location":"MovingLoad/003VHCase/#get","title":"get","text":"<p>Retrieves all moving load case data from the current Midas Civil model. </p><pre><code>case_data = MovingLoad.Case.get()\nprint(case_data)\n</code></pre><p></p>"},{"location":"MovingLoad/003VHCase/#sync","title":"sync","text":"<p>Synchronizes load cases from Midas Civil back to the Python script, overwriting any local definitions. </p><pre><code>MovingLoad.Case.sync()\n# See the synced cases\nfor case in MovingLoad.Case.cases:\n    print(f\"Synced Case: {case.params['LCNAME']}\")\n</code></pre><p></p>"},{"location":"MovingLoad/003VHCase/#delete","title":"delete","text":"<p>Deletes all moving load cases from the Midas Civil model. </p><pre><code>MovingLoad.Case.delete()\n</code></pre><p></p>"},{"location":"MovingLoad/003VHCase/#examples","title":"Examples","text":""},{"location":"MovingLoad/003VHCase/#creating-indian-standard-cases","title":"Creating Indian Standard Cases","text":"<pre><code># Set Indian standards\nMovingLoad.Code(\"INDIA\")\n\n# Example 1: General Load Case\nMovingLoad.Case.India(\n    id=1,\n    name=\"General_IRC_Loading\",\n    num_loaded_lanes=2,\n    opt_auto_ll=False,\n    sub_load_items=[\n        [1.0, 1, 2, \"Class A\", [\"Lane1\", \"Lane2\"]],\n        [0.8, 1, 1, \"Class 70R\", [\"Lane1\"]]\n    ]\n)\n\n# Example 2: Auto Live Load Combination\nMovingLoad.Case.India(\n    id=2,\n    name=\"Auto_Combination\",\n    num_loaded_lanes=2,\n    opt_auto_ll=True,\n    sub_load_items=[\n        [1.0, \"Class A\", \"Class B\", \"Footway\", [\"Lane1\", \"Lane2\"], [\"Footpath1\"]]\n    ]\n)\n\n# Example 3: Permit Vehicle Load\nMovingLoad.Case.India(\n    id=3,\n    name=\"Permit_Vehicle_Case\",\n    num_loaded_lanes=1,\n    opt_lc_for_permit=True,\n    permit_vehicle_id=5,      # Assuming a permit vehicle with ID 5 exists\n    ref_lane_id=1,            # Reference lane is Lane1\n    eccentricity=0.5,\n    permit_scale_factor=1.1\n)\n\n# Create all defined Indian cases in Midas Civil\nMovingLoad.Case.create()\n</code></pre>"},{"location":"MovingLoad/003VHCase/#creating-eurocode-standard-cases","title":"Creating Eurocode Standard Cases","text":"<pre><code># Set European standards\nMovingLoad.Code(\"EUROCODE\")\n\n# Example 1: General Load, Load Model 1\nMovingLoad.Case.Eurocode(\n    id=1,\n    name=\"EC_General_LM1\",\n    load_model=1,\n    use_optimization=False,\n    sub_load_items=[\n        False,                      # opt_leading\n        \"LM1_Vehicle\",              # vhl_name1\n        \"\",                         # vhl_name2\n        [\"Lane1\"],                  # selected_lanes\n        [\"Lane2\", \"Lane3\"],         # remaining_area_lanes\n        [\"Footpath1\"]               # footway_lanes\n    ]\n)\n\n# Example 2: General Load, Load Model 5 (Railway)\nMovingLoad.Case.Eurocode(\n    id=2,\n    name=\"EC_Railway_LM5\",\n    load_model=5,\n    use_optimization=False,\n    sub_load_items=[\n        False,                                  # opt_psi_factor\n        0,                                      # opt_comb\n        [0.8, 0.7, 0.6],                        # scale_factors\n        [1.0, 1.0, 0.75],                       # multi_presence_factors\n        [(\"LM71\", 1.0, 1, 1, [\"Track1\"])]       # sub_load_data_list\n    ]\n)\n\n# Example 3: Moving Load Optimization, Load Model 3\nMovingLoad.Case.Eurocode(\n    id=3,\n    name=\"EC_Optimized_LM3\",\n    load_model=3,\n    use_optimization=True,\n    sub_load_items=[\n        True,                       # opt_leading\n        \"SV196\",                    # vhl_name1\n        \"\",                         # vhl_name2\n        15.0,                       # min_dist\n        \"Lane2\",                    # opt_lane\n        2,                          # loaded_lanes\n        [\"Lane1\", \"Lane2\", \"Lane3\"] # selected_lanes\n    ]\n)\n\n# Create all defined Eurocode cases in Midas Civil\nMovingLoad.Case.create()\n</code></pre>"},{"location":"Result/01_loadCombination/","title":"\u200e \u200e \u200e Load Combination","text":""},{"location":"Result/01_loadCombination/#load-combination","title":"Load Combination","text":"<p>The LoadCombination class is designed to define and manage load combinations defined in MIDAS CIVIL NX.  It supports classification-specific combinations such as Steel, Concrete, Seismic, etc., and provides functionality for creating, syncing, retrieving, and deleting these combinations.</p>"},{"location":"Result/01_loadCombination/#constructor","title":"Constructor","text":"<p><code>LoadCombination(name, case, classification=\"General\", active=\"ACTIVE\", typ=\"Add\", id=0, desc=\"\")</code></p>"},{"location":"Result/01_loadCombination/#parameters","title":"Parameters","text":"<ul> <li> <p><code>name (str)</code>: Name of the load combination.</p> </li> <li> <p><code>case (list[tuple])</code> : List of tuples with load case names and factors.  \u200e \u200e \u200e \u200e \u200e \u200e \u200e \u200e \u200e  Example: <code>[('Dead Load(CS)', 1.5), ('Live Load(ST)', 0.9)]</code></p> </li> <li> <p><code>classification (str)</code> : Category of the load combination.  \u200e \u200e \u200e \u200e \u200e \u200e \u200e \u200e \u200e Must be one of :  General \u00a0\u00a0|\u00a0\u00a0 Steel \u00a0\u00a0|\u00a0\u00a0 Concrete \u00a0\u00a0|\u00a0\u00a0 SRC \u00a0\u00a0|\u00a0\u00a0 Composite \u00a0\u00a0|\u00a0\u00a0 Steel Girder \u00a0\u00a0|\u00a0\u00a0 Seismic     \u200e \u200e \u200e \u200e \u200e \u200e \u200e \u200e \u200e Defaults to <code>General</code>.</p> </li> <li> <p><code>active (str)</code> : Activation status. ACTIVE, INACTIVE, STRENGTH, or SERVICE.</p> </li> <li> <p><code>typ (str | int)</code> : Combination type: \"Add\", \"Envelope\", \"ABS\", \"SRSS\" or corresponding integers 0\u20133.</p> </li> <li> <p><code>id (int)</code> : Unique identifier. Auto-incremented if set to 0.</p> </li> <li> <p><code>desc (str)</code> : Optional description.</p> </li> </ul>"},{"location":"Result/01_loadCombination/#object-attributes","title":"Object Attributes","text":"<p><code>NAME</code>: Name of Load Combination</p> <p><code>CASE</code>: Load Case and Scale factors in the Load Combination</p> <p><code>CLS</code>: Classification of the Load Combination (General, Steel, Concrete, SRC, Composite Steel Girder, Seismic)</p> <p><code>ACT</code>: Activation status of the Load Combination ('ACTIVE' , 'INACTIVE, 'STRENGTH', 'SERVICE')  </p> <p><code>TYPE</code>: Type of the Load Combination (Add, Envelope, ABS, SRSS)</p> <p><code>ID</code>: ID of the Load Combination</p> <p><code>DESC</code>: Description of the Load Combination</p>"},{"location":"Result/01_loadCombination/#class-attributes","title":"Class Attributes","text":"<p>LoadCombination.data -&gt; List of all Result combination data.</p> <p>NOTE :</p> <ul> <li>Load case names must include their analysis type in parentheses, e.g., <code>\"Load1(ST)\"</code>.</li> <li>Supported analysis types: <code>ST</code>, <code>CS</code>, <code>MV</code>, <code>SM</code>, <code>RS</code>, <code>TH</code>, <code>CB</code>, <code>CBC</code>, <code>CBS</code>, <code>CBR</code>, <code>CBSC</code>, <code>CBSM</code>.</li> </ul>"},{"location":"Result/01_loadCombination/#methods","title":"Methods","text":""},{"location":"Result/01_loadCombination/#json","title":"json","text":"<p>Returns a JSON dictionary of the defined load combinations.</p> <ul> <li>Filters by classification or includes all if <code>\"All\"</code> is passed.</li> </ul> <pre><code>Load_Case('USER','SelfWeight','SIDL') # Static Load cases\nLoadCombination('LCB1',[('SelfWeight(ST)',1.5),('SIDL(ST)',1.35)],'Steel') # Load Combination for Steel design\nLoadCombination('LCB2',[('SelfWeight(ST)',1.5),('SIDL(ST)',1.35)],'Concrete') # Load Combination for Concrete design\n\nprint(LoadCombination.json('Steel')) # Printing only steel design load combination\n# Output\n# {'Steel': {'Assign': {1: {'NAME': 'LCB1', 'ACTIVE': 'STRENGTH', 'iTYPE': 0, 'DESC': '', 'vCOMB': [{'ANAL': 'ST', 'LCNAME': 'SelfWeight', 'FACTOR': 1.5}, {'ANAL': 'ST', 'LCNAME': 'SIDL', 'FACTOR': 1.35}]}}}}\n</code></pre>"},{"location":"Result/01_loadCombination/#create","title":"create","text":"<p>Creates (or replaces) combinations in the MIDAS model.</p> <pre><code>Load_Case('USER','SelfWeight','SIDL')\nLoadCombination('LCB1',[('SelfWeight(ST)',1.5),('SIDL(ST)',1.35)],'Steel')\n\nLoad_Case.create()\nLoadCombination.create()\n</code></pre>"},{"location":"Result/01_loadCombination/#get","title":"get","text":"<p>Gets load combinations from the MIDAS CIVIL NX model.</p> <ul> <li>Returns combinations as a dictionary grouped by classification.</li> </ul> <pre><code>print(LoadCombination.get())\n# Output\n# {'Steel': {'LCOM-STEEL': {'1': {'NAME': 'LCB1', 'ACTIVE': 'STRENGTH', 'bES': False, 'bCB': False, 'iTYPE': 0, 'DESC': '', 'iSERV_TYPE': 0, 'nLCOMTYPE': 0, 'nSEISTYPE': 0, 'vCOMB': [{'ANAL': 'ST', 'LCNAME': 'SelfWeight', 'FACTOR': 1.5}, {'ANAL': 'ST', 'LCNAME': 'SIDL', 'FACTOR': 1.35}]}}}}\n</code></pre>"},{"location":"Result/01_loadCombination/#sync","title":"sync","text":"<p>Synchronizes internal Python data with what's present in the MIDAS CIVIL NX model.</p> <pre><code>LoadCombination.sync()\n\nfor comb in LoadCombination.data:\n    print(f'Name -&gt; {comb.NAME}  | Design -&gt; {comb.CLS}  | Cases -&gt; {comb.CASE}')\n\n# Output\n# Name -&gt; LCB1  | Design -&gt; Steel  | Cases -&gt; [{'ANAL': 'ST', 'LCNAME': 'SelfWeight', 'FACTOR': 1.5}, {'ANAL': 'ST', 'LCNAME': 'SIDL', 'FACTOR': 1.35}]\n</code></pre>"},{"location":"Result/01_loadCombination/#delete","title":"delete","text":"<p>Deletes specific combinations from the MIDAS model.</p> <pre><code>LoadCombination.delete()\n</code></pre>"},{"location":"Result/01_loadCombination/#example-usage","title":"Example Usage","text":"<pre><code># Define a new load combination\nlc = LoadCombination(\n    name=\"LCB1\",\n    case=[('Dead Load(CS)', 1.5), ('Live Load(ST)', 1.0)],\n    classification=\"General\",\n    active=\"ACTIVE\",\n    typ=\"Add\"\n)\n\n# Export combinations to JSON\nprint(LoadCombination.json())\n\n# Create combinations in the MIDAS model\nLoadCombination.create()\n</code></pre>"},{"location":"Result/02_resultTable/","title":"\u200e \u200e \u200e Result Table","text":""},{"location":"Result/02_resultTable/#result-table","title":"Result Table","text":"<p>Fetches result tables like reactions or displacements for given elements and load cases.</p>"},{"location":"Result/02_resultTable/#constructor","title":"Constructor","text":"<p>Result.ResultTable(<code>tabletype , elements=[] , loadcase=[] , cs_stage=[] , force_unit='KN' , len_unit='M'</code>)</p>"},{"location":"Result/02_resultTable/#parameters","title":"Parameters","text":"<ul> <li><code>tabletype</code> (<code>str</code>): Analysis Results Table type. </li> </ul> Result Table Table Type Reaction (Global) REACTIONG Displacement (Global) DISPLACEMENTG Truss Force TRUSSFORCE Truss Stress TRUSSSTRESS Beam Force BEAMFORCE Beam Stress BEAMSTRESS Details of all available tables can be found here. <ul> <li><code>keys</code> (<code>list[int] or str</code>): Optional. Element or Node IDs (Default : All) | list[int] -&gt; IDs or str -&gt; Group Name.</li> <li><code>loadcase</code> (<code>list[str]</code>): Optional. Load case names (Default : All).</li> <li><code>cs_stage</code> (<code>list</code> or <code>'all'</code>): Construction stages.</li> <li><code>force_unit</code> (<code>str</code>): Force unit (KN, N, KGF, TONF, LBF, KIPS).</li> <li><code>len_unit</code> (<code>str</code>): Length unit (M, CM, MM, FT, IN).</li> </ul>"},{"location":"Result/02_resultTable/#returns","title":"Returns:","text":"<ul> <li>Polars Dataframe</li> </ul> <p>Polars is a high-performance DataFrame library, designed to provide fast and efficient data processing capabilities.  Polar dataframe supports exporting the tabular data as CSV and Excel sheets.</p> <p>Write Excel : https://docs.pola.rs/api/python/dev/reference/api/polars.DataFrame.write_excel.html</p>"},{"location":"Result/02_resultTable/#example-usage","title":"Example Usage","text":""},{"location":"Result/02_resultTable/#1-printing-result-table","title":"1. Printing Result table","text":"<pre><code>rkn_res = Result.ResultTable('REACTIONG') # Reaction table for all nodes and load cases\nprint(rkn_res)\n\n# Output\n# shape: (36, 9)\n# +-------+------+------------+-----------+-------+-----------+---------+---------+---------+\n# | Index | Node |   Load     |    FX     |  ...  |    FZ     |   MX    |   MY    |   MZ    |\n# +-------+------+------------+-----------+-------+-----------+---------+---------+---------+\n# |   1   |   1  | Dead Load  |  338.647  |  ...  |  3273.412 |  0.000  |  0.000  |  0.000  |\n# |   2   |  11  | Dead Load  |    0.000  |  ...  |  3687.690 |  0.000  |  0.000  |  0.000  |\n# |   3   |  21  | Dead Load  | -338.647  |  ...  |  1463.059 |  0.000  |  0.000  |  0.000  |\n# |  ...  | ...  |    ...     |    ...    |  ...  |    ...    |   ...   |   ...   |   ...   |\n# |  35   |  21  | LCB1(all)  | -442.764  |  ...  |  2136.055 |  0.000  |  0.000  |  0.000  |\n# |  36   |  31  | LCB1(all)  |   0.000   |  ...  |  1562.554 |  0.000  |  0.000  |  0.000  |\n# +-------+------+------------+-----------+-------+-----------+---------+---------+---------+\n</code></pre>"},{"location":"Result/02_resultTable/#2-result-table-to-excel","title":"2. Result table to Excel","text":"<pre><code>rkn_res = Result.ResultTable('REACTIONG')\nrkn_res.write_excel(\"rkn.xlsx\", \"Reaction Table\", header_format={\"bold\":True}, autofit=True, table_style=\"Table Style Light 8\" )\n</code></pre>"},{"location":"Result/02_resultTable/#3-multiple-result-table-to-excel","title":"3. Multiple Result table to Excel","text":"<pre><code>rkn_res = Result.ResultTable('REACTIONG')\nbeam_res = Result.ResultTable('BEAMFORCE',loadcase=['Dead Load(ST)'])\n\nwith xlsxwriter.Workbook(\"Tabular.xlsx\") as Wb:\n    rkn_res.write_excel(Wb,\"Reaction Table\", header_format={\"bold\":True}, autofit=True, table_style=\"Table Style Light 8\")\n    beam_res.write_excel(Wb,\"Beam Force(Dead Load)\", header_format={\"bold\":True}, autofit=True, table_style=\"Table Style Light 8\")\n</code></pre> 3"},{"location":"Result/03_userResultTable/","title":"\u200e \u200e \u200e User Defined Table","text":""},{"location":"Result/03_userResultTable/#user-defined-table","title":"User Defined Table","text":"<p>Fetches User defined tables(dynamic report table) from MIDAS CIVIL NX.</p> <p></p>"},{"location":"Result/03_userResultTable/#constructor","title":"Constructor","text":"<p>Result.UserDefinedTable(<code>tableName , summary=0 , force_unit='KN', len_unit='M'</code>)</p>"},{"location":"Result/03_userResultTable/#parameters","title":"Parameters","text":"<ul> <li><code>tableName</code> (<code>str</code>): Name of User Defined Table</li> <li><code>summary</code> (<code>int</code>): Optional. Extract Summary tables of Reaction, Eigen value mass participation etc.</li> <li><code>force_unit</code> (<code>str</code>): Force unit (KN, N, KGF, TONF, LBF, KIPS).</li> <li><code>len_unit</code> (<code>str</code>): Length unit (M, CM, MM, FT, IN).</li> </ul>"},{"location":"Result/03_userResultTable/#returns","title":"Returns:","text":"<ul> <li>Polars Dataframe</li> </ul> <p>Polars is a high-performance DataFrame library, designed to provide fast and efficient data processing capabilities. Polar dataframe supports exporting the tabular data as CSV and Excel sheets.</p> <p>Write Excel : https://docs.pola.rs/api/python/dev/reference/api/polars.DataFrame.write_excel.html</p>"},{"location":"Result/03_userResultTable/#list-all-tables","title":"List all tables","text":"<pre><code>Result.UserDefinedTables_print()\n\n# Output\n# Available user-defined tables in Civil NX are : \n# ReacG , DispG\n</code></pre> Prints all user-defined table names available in the CIVIL NX model."},{"location":"Result/03_userResultTable/#example-usage","title":"Example Usage","text":""},{"location":"Result/03_userResultTable/#1-printing-result-table","title":"1. Printing Result table","text":"<pre><code>rkn_res = Result.UserDefinedTable('ReacG')\nprint(rkn_res)\n\n# Output\n# shape: (24, 9)\n# +-------+------+----------------+--------------+-----+--------------+----------+----------+----------+\n# | Index | Node |      Load      |     FX       | ... |      FZ      |    MX    |    MY    |    MZ    |\n# +-------+------+----------------+--------------+-----+--------------+----------+----------+----------+\n# | 1     | 1    | Dead Load      | 338.647706   | ... | 3273.412447  | 0.000000 | 0.000000 | 0.000000 |\n# | 2     | 11   | Dead Load      | 0.000000     | ... | 3687.690313  | 0.000000 | 0.000000 | 0.000000 |\n# | ...   | ...  | ...            | ...          | ... | ...          | ...      | ...      | ...      |\n# | 22    | 11   | MVL(all)       | 0.000000     | ... | 809.056500   | 0.000000 | 0.000000 | 0.000000 |\n# | 23    | 21   | MVL(all)       | -81.540352   | ... | 575.458313   | 0.000000 | 0.000000 | 0.000000 |\n# | 24    | 31   | MVL(all)       | 0.000000     | ... | 523.742062   | 0.000000 | 0.000000 | 0.000000 |\n# +-------+------+----------------+--------------+-----+--------------+----------+----------+----------+\n</code></pre>"},{"location":"Result/03_userResultTable/#2-result-table-to-excel","title":"2. Result table to Excel","text":"<pre><code>rkn_res = Result.UserDefinedTable('ReacG')\nrkn_res.write_excel(\"rkn.xlsx\", \"Reaction Table\", header_format={\"bold\":True}, autofit=True, table_style=\"Table Style Light 8\" )\n</code></pre>"},{"location":"Result/03_userResultTable/#3-multiple-result-table-to-excel","title":"3. Multiple Result table to Excel","text":"<pre><code>rkn_res = Result.UserDefinedTable('ReacG')\ndisp_res = Result.UserDefinedTable('DispG')\n\nwith xlsxwriter.Workbook(\"Tabular.xlsx\") as Wb:\n    rkn_res.write_excel(Wb,\"Reaction Table\", header_format={\"bold\":True}, autofit=True, table_style=\"Table Style Light 8\")\n    disp_res.write_excel(Wb,\"Nodal Displacement(Dead Load)\", header_format={\"bold\":True}, autofit=True, table_style=\"Table Style Light 8\")\n</code></pre>"},{"location":"Result/03_userResultTable/#4-summary-table","title":"4. Summary table","text":"<p>Obtain Reaction summary table</p> <p></p><pre><code>rkn_res = Result.UserDefinedTable('ReacG',summary=1)\nrkn_res.write_excel(\"summary.xlsx\", \"Reaction Table(Summary)\", header_format={\"bold\":True}, autofit=True, table_style=\"Table Style Light 8\" )\n</code></pre> <p></p>"},{"location":"Result/result/","title":"Result","text":""},{"location":"Result/result/#result","title":"Result","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Result/result/#getting-started","title":"Getting started","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Result/result/#mapi_key","title":"MAPI_Key","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Result/result/#midasapi","title":"midasAPI","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Section/","title":"Section","text":""},{"location":"Section/#section","title":"Section","text":"<p>The module provides functionality to create, manage, and synchronize various types of cross-sections (User-defined, PSC, and Composite sections) in the model.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d')\n</code></pre>"},{"location":"Section/#class-attributes","title":"Class Attributes","text":"<p>Section.sect -&gt; List of all sections.   </p>"},{"location":"Section/#methods","title":"Methods","text":""},{"location":"Section/#create","title":"create","text":"<p>Creates all defined sections (User-defined, PSC, and Composite sections) in Civil NX.</p> <pre><code>Section.create()\n</code></pre>"},{"location":"Section/#json","title":"json","text":"<p>Returns a JSON representation of all Sections defined in python.</p> <pre><code>s1 = Section.DBUSER(\"Rect1\", \"SB\", [1.0, 0.5])\ns2 = Section.PSC.I(\"PSC_I1\", True, [0,0,0,0,0,0,0,0,0], 2.0)\n\nprint(Section.json())\n\n# Output:\n# {'Assign': {1: {'SECTTYPE': 'DBUSER', 'SECT_NAME': 'Rect1', ...}, 2: {'SECTTYPE': 'PSC', 'SECT_NAME': 'PSC_I1', ...}}}\n</code></pre>"},{"location":"Section/#get","title":"get","text":"<p>Fetches sections from Civil NX and returns the JSON representation.</p> <pre><code>print(Section.get())\n# Output\n# {'SECT': {'1': {'SECTTYPE': 'DBUSER', 'SECT_NAME': 'Rect1', ...}, '2': {'SECTTYPE': 'PSC', 'SECT_NAME': 'PSC_I1', ...}}}\n</code></pre>"},{"location":"Section/#sync","title":"sync","text":"<p>Retrieves Section data from Civil NX and rebuilds the internal section list.</p> <pre><code>Section.sync()\nfor sect in Section.sect:\n    print(f'Section: {sect.NAME} | Type: {sect.TYPE}')\n</code></pre>"},{"location":"Section/#delete","title":"delete","text":"<p>Deletes all section data from both Python and Civil NX.</p> <pre><code>Section.delete()\n</code></pre>"},{"location":"Section/#offset","title":"Offset","text":""},{"location":"Section/#constructor","title":"Constructor","text":"<p>To create section offset parameters, use the Offset constructor.</p> <p><code>Offset(OffsetPoint='CC', CenterLocation=0, HOffset=0, HOffOpt=0, VOffset=0, VOffOpt=0, UsrOffOpt=0)</code></p> <p>Creates offset parameters for sections with specified reference point and offset values.</p>"},{"location":"Section/#parameters","title":"Parameters","text":"<ul> <li><code>OffsetPoint (default='CC')</code>: Offset reference point ('CC', 'CT', etc.)</li> <li><code>CenterLocation (default=0)</code>: Center location parameter</li> <li><code>HOffset (default=0)</code>: Horizontal offset value</li> <li><code>HOffOpt (default=0)</code>: Horizontal offset option</li> <li><code>VOffset (default=0)</code>: Vertical offset value</li> <li><code>VOffOpt (default=0)</code>: Vertical offset option</li> <li><code>UsrOffOpt (default=0)</code>: User offset option</li> </ul> <pre><code># Create center-center offset\noffset_cc = Offset.CC()\n\n# Create center-top offset\noffset_ct = Offset.CT()\n\n# Create custom offset\ncustom_offset = Offset('CC', 0, 2.5, 0, 1.0, 0, 0)\n</code></pre>"},{"location":"Section/#examples","title":"Examples","text":"<pre><code># Composite Steel I-Section Example\nfor i in range(2):\n    Node(i*10, 0, 0)\n    Node.create()\n\nElement.Beam(1, 2)\nElement.create()\n\n# Create composite steel I-section\nSection.Composite.SteelI_Type1(\n    Name=\"Composite_Steel_I\",\n    Bc=3, tc=0.25,  # Slab parameters\n    Hw=2, B1=2.5, tf1=0.2, # Steel I parameters\n    tw=0.2, B2=2.5, tf2=0.2,  \n    EsEc=6.39, DsDc=3.0792, Ps=0.3, Pc=0.2, TsTc=1.2,\n\n    # Offset and effects\n    Offset=Offset.CT(),\n    useShear=True,\n    use7Dof=False,\n    id=13\n)\nSection.create()\n</code></pre>"},{"location":"Section/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import *\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\")  # Paste your MAPI Key\n\n# Create nodes and elements\nfor i in range(6):\n    Node(i*10, 0, 0)\n    Node.create()\n\nfor i in range(5):\n    Element.Beam(i+1, i+2)\n    Element.create()\n\n# Create various section types\n\n# 1. User-defined rectangular section\nSection.DBUSER(\"Rect_1x0.5\", \"SB\", [1.0, 0.5])\n\n# 2. PSC 1-cell section\nSection.PSC.CEL12(\n    Name=\"PSC Box\",\n    Shape=\"1CEL\",\n    Joint=[1, 0, 0, 1, 0, 1, 0, 1],\n\n    HO1=0.2,\n    HO2=0.3,\n    HO22=0.5,\n    HO3=2.5,\n\n    BO1=1.5,\n    BO11=0.5,\n    BO2=0.5,\n    BO3=2.25,\n\n    HI1=0.24,\n    HI2=0.26,\n    HI3=2.05,\n    HI31=0.71,\n    HI4=0.2,\n    HI5=0.25,\n\n    BI1=2.2,\n    BI11=0.7,\n    BI21=2.2,\n    BI3=1.932,\n    BI31=0.7,\n\n    Offset=Offset.CT(),  # \"Center-Top\" selected\n    useShear=True,       # Shear deformation checkbox is selected\n    use7Dof=False,       # Warping effect (7th DOF) not checked\n    id=2\n)\n\n# 3. PSC I-section (symmetric)\nSection.PSC.I(\n    Name=\"PSC_I_Symmetric\",\n    Symm=True,\n    Joint=[0,0,0,0,0,0,0,0,0],\n    HL1=0.3, HL2=0.5, HL3=1.5, HL4=0.3, HL5=0.3,\n    BL1=0.3, BL2=2, BL4=2,\n     Offset=Offset.CT(),  # \"Center-Top\" selected\n    useShear=True,       # Shear deformation checkbox is selected\n    use7Dof=False,       # Warping effect (7th DOF) not checked\n    id=3\n)\n\n# 4. Composite PSC I-section\nSection.Composite.PSCI(\n    Name=\"Composite_PSC_I\",\n    Symm=True,  # Symmetrical section\n    Joint=[0, 0, 0, 0, 0, 0, 0, 0, 0],  # Joint \n\n    # slab parameters\n    Bc=3,\n    tc=0.225,\n    Hh=0,\n\n\n    # Girder parameters\n    HL1=0.15,\n    HL2=0.1,\n    HL3=1.43,\n    HL4=0.12,\n    HL5=0.3,\n\n    BL1=0.14,\n    BL2=0.425,\n    BL4=0.375,\n\n\n    # Material properties\n    EgdEsb=1.06922,     # Elastic modulus ratio (girder/slab)\n    DgdDsb=1.0,     # Density ratio\n    Pgd=0.2,        # Poisson's ratio (girder)\n    Psb=0.2,        # Poisson's ratio (slab)\n    TgdTsb=1.0,     # Thermal expansion coefficient ratio\n\n    # Time-dependent properties\n    MultiModulus=False,\n\n    # Offset and effects\n    Offset=Offset.CT(),\n    useShear=True,\n    use7Dof=False,\n    id=4\n)\nSection.create()\n\n# 5. Composite steel I-section\nSection.Composite.SteelI_Type1(\n    Name=\"Composite_Steel_I\",\n    Bc=3, tc=0.25,  # Slab parameters\n    Hw=2, B1=2.5, tf1=0.2, # Steel I parameters\n    tw=0.2, B2=2.5, tf2=0.2,  \n    EsEc=6.39, DsDc=3.0792, Ps=0.3, Pc=0.2, TsTc=1.2,\n\n    # Offset and effects\n    Offset=Offset.CT(),\n    useShear=True,\n    use7Dof=False,\n    id=5\n)\n\n# Create all sections in Civil NX\nSection.create()\n\nprint(\"Sections created successfully!\")\n</code></pre>"},{"location":"Section/01_user/","title":"\u200e \u200e \u200e Standard Section","text":""},{"location":"Section/01_user/#standard-section","title":"Standard Section","text":"<p>A nested class within Section used to create user-defined standard sections.</p> <p>Some common user defined section's Shape notation is givn below:</p> NAME SHAPE DIMENSION VALUE Angle \"L\" [H, B, tw, tf] Channel \"C\" [H, B1, tw, tf1, B2, tf2, r1, r2] H/I-Section \"H\" [H, B1, tw, tf1, B2, tf2, r1, r2] T-Section \"T\" [H, B, tw, tf] Box \"B\" [H, B, tw, tf1, C, tf2] Pipe \"P\" [D, tw] Double Angle \"2L\" [H, B, tw, tf, C] Double Channel \"2C\" [H, B, tw, tf, C] Solid Rectangle \"SB\" [H, B] Solid Round \"SR\" [D] <p>Details of all available sections can be found here.</p>"},{"location":"Section/01_user/#constructor","title":"Constructor","text":"<p><code>Section.DBUSER(Name='', Shape='', parameters:list=[], Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0)</code></p> <p>Creates user-defined sections with specified shape and parameters.</p>"},{"location":"Section/01_user/#parameters","title":"Parameters","text":"<ul> <li><code>Name</code>: Section name</li> <li><code>Shape</code>: Section shape code ('SB', 'SR', etc.)</li> <li><code>parameters</code>: List of section parameters</li> <li><code>Offset (default=Offset.CC())</code>: Section offset parameters</li> <li><code>useShear (default=True)</code>: Enable shear deformation</li> <li><code>use7Dof (default=False)</code>: Enable warping (7DOF)</li> <li><code>id (default=0)</code>: Section ID (auto-assigned if 0)</li> </ul>"},{"location":"Section/01_user/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): Section ID.</li> <li><code>NAME</code> (str): Section name.</li> <li><code>TYPE</code> (str): Type of section, defaults to 'DBUSER'.</li> <li><code>SHAPE</code> (str): Shape code for the section (e.g., 'SB', 'SR').</li> <li><code>PARAMS</code> (list): List of dimensional parameters defining the section's geometry.</li> <li><code>OFFSET</code> (Offset): An <code>Offset</code> object defining the section's offset.</li> <li><code>USESHEAR</code> (bool): Flag to indicate if shear deformation is considered (True/False).</li> <li><code>USE7DOF</code> (bool): Flag to indicate if warping effect (7th Degree of Freedom) is considered (True/False).</li> <li><code>DATATYPE</code> (int): Data type for the section, defaults to 2 for standard user-defined sections.</li> </ul>"},{"location":"Section/01_user/#examples","title":"Examples","text":"<pre><code># Rectangular Section Example\nfor i in range(2):\n    Node(i*10, 0, 0)\n    Node.create()\n\nElement.Beam(1, 2)\nElement.create()\n\n# Create rectangular section\nSection.DBUSER(\"Rect_1x0.5\", \"SB\", [1.0, 0.5])\nSection.create()\n</code></pre> <pre><code># Circular Section with Custom Offset Example\nfor i in range(2):\n    Node(i*10, 0, 0)\n    Node.create()\n\nElement.Beam(1, 2)\nElement.create()\n\n# Create circular section with center-top offset\nSection.DBUSER(\"Circle_D1\", \"SR\", [1.0], Offset.CT(), True, False, 5)\nSection.create()\n</code></pre>"},{"location":"Section/02_psc/","title":"\u200e \u200e \u200e PSC Section","text":""},{"location":"Section/02_psc/#psc-sections","title":"PSC Sections","text":"<p>A nested class within Section used to create Prestressed Concrete sections.</p>"},{"location":"Section/02_psc/#psc-box-section-1-cell-2-cell","title":"PSC Box Section (1-Cell, 2-Cell)","text":""},{"location":"Section/02_psc/#constructor","title":"Constructor","text":"<p><code>Section.PSC.CEL12(Name='', Shape='1CEL', Joint=[0,0,0,0,0,0,0,0], HO1=0, HO2=0, HO21=0, HO22=0, HO3=0, HO31=0, BO1=0, BO11=0, BO12=0, BO2=0, BO21=0, BO3=0, HI1=0, HI2=0, HI21=0, HI22=0, HI3=0, HI31=0, HI4=0, HI41=0, HI42=0, HI5=0, BI1=0, BI11=0, BI12=0, BI21=0, BI3=0, BI31=0, BI32=0, BI4=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0)</code></p> <p>Creates PSC 1-cell or 2-cell box sections.</p>"},{"location":"Section/02_psc/#parameters","title":"Parameters","text":"<ul> <li><code>Name</code>: Section name</li> <li><code>Shape (default='1CEL')</code>: Section shape ('1CEL' or '2CEL')</li> <li><code>Joint</code>: List of 8 joint connectivity values [JO1, JO2, JO3, JI1, JI2, JI3, JI4, JI5]</li> <li><code>HO1, HO2, HO21, HO22, HO3, HO31</code>: Outer cell height parameters</li> <li><code>BO1, BO11, BO12, BO2, BO21, BO3</code>: Outer cell width parameters</li> <li><code>HI1-HI5, HI21, HI22, HI31, HI41, HI42</code>: Inner cell height parameters</li> <li><code>BI1, BI11, BI12, BI21, BI3, BI31, BI32, BI4</code>: Inner cell width parameters</li> <li><code>Offset (default=Offset.CC())</code>: Section offset parameters</li> <li><code>useShear (default=True)</code>: Enable shear deformation</li> <li><code>use7Dof (default=False)</code>: Enable warping effect</li> <li><code>id (default=0)</code>: Section ID</li> </ul>"},{"location":"Section/02_psc/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): Section ID.</li> <li><code>NAME</code> (str): Section name.</li> <li><code>SHAPE</code> (str): Section shape, '1CEL' or '2CEL'.</li> <li><code>TYPE</code> (str): Type of section, defaults to 'PSC'.</li> <li><code>JO1</code> to <code>JI5</code> (bool): Joint connectivity.</li> <li><code>OFFSET</code> (Offset): An <code>Offset</code> object defining the section's offset.</li> <li><code>USESHEAR</code> (bool): Flag to indicate if shear deformation is considered.</li> <li><code>USE7DOF</code> (bool): Flag to indicate if warping effect (7th DOF) is considered.</li> <li><code>HO1, HO2, HO21, HO22, HO3, HO31</code> (float): Outer dimensions of the section.</li> <li><code>BO1, BO11, BO12, BO2, BO21, BO3</code> (float): Outer dimensions of the section.</li> <li><code>HI1, HI2, HI21, HI22, HI3, HI31, HI4, HI41, HI42, HI5</code> (float): Inner dimensions of the section.</li> <li><code>BI1, BI11, BI12, BI21, BI3, BI31, BI32, BI4</code> (float): Inner dimensions of the section.</li> </ul>"},{"location":"Section/02_psc/#examples","title":"Examples","text":""},{"location":"Section/02_psc/#psc-cell-sections-1-cell-2-cell-section","title":"PSC Cell Sections (1-Cell, 2-Cell) Section","text":"<pre><code># PSC Example\nfor i in range(2):\n    Node(i * 10, 0, 0)\n    Node.create()\n\nElement.Beam(1, 2)\nElement.create()\n\n# Create PSC Box Section\nSection.PSC.CEL12(\n    Name=\"PSC Box\",\n    Shape=\"1CEL\",\n    Joint=[1, 0, 0, 1, 0, 1, 0, 1],\n\n    HO1=0.2,\n    HO2=0.3,\n    HO22=0.5,\n    HO3=2.5,\n\n    BO1=1.5,\n    BO11=0.5,\n    BO2=0.5,\n    BO3=2.25,\n\n    HI1=0.24,\n    HI2=0.26,\n    HI3=2.05,\n    HI31=0.71,\n    HI4=0.2,\n    HI5=0.25,\n\n    BI1=2.2,\n    BI11=0.7,\n    BI21=2.2,\n    BI3=1.932,\n    BI31=0.7,\n\n    Offset=Offset.CT(),  # \"Center-Top\" selected\n    useShear=True,       # Shear deformation checkbox is selected\n    use7Dof=False,       # Warping effect (7th DOF) not checked\n    id=1\n)\nSection.create()\n</code></pre>"},{"location":"Section/02_psc/#psc-i-section","title":"PSC I-Section","text":""},{"location":"Section/02_psc/#constructor_1","title":"Constructor","text":"<p><code>Section.PSC.I(Name='', Symm=True, Joint=[0,0,0,0,0,0,0,0,0], H1=0, HL1=0, HL2=0, HL21=0, HL22=0, HL3=0, HL4=0, HL41=0, HL42=0, HL5=0, BL1=0, BL2=0, BL21=0, BL22=0, BL4=0, BL41=0, BL42=0, HR1=0, HR2=0, HR21=0, HR22=0, HR3=0, HR4=0, HR41=0, HR42=0, HR5=0, BR1=0, BR2=0, BR21=0, BR22=0, BR4=0, BR41=0, BR42=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0)</code></p> <p>Creates PSC I-sections with symmetric or asymmetric flanges.</p>"},{"location":"Section/02_psc/#parameters_1","title":"Parameters","text":"<ul> <li><code>Name</code>: Section name</li> <li><code>Symm (default=True)</code>: Symmetric section flag</li> <li><code>Joint</code>: List of 9 joint connectivity values</li> <li><code>H1</code>: Web height</li> <li><code>HL1-HL5, HL21, HL22, HL41, HL42</code>: Left flange parameters</li> <li><code>BL1-BL4, BL21, BL22, BL41, BL42</code>: Left flange width parameters</li> <li><code>HR1-HR5, HR21, HR22, HR41, HR42</code>: Right flange parameters (used when Symm=False)</li> <li><code>BR1-BR4, BR21, BR22, BR41, BR42</code>: Right flange width parameters (used when Symm=False)</li> <li><code>Offset (default=Offset.CC())</code>: Section offset parameters</li> <li><code>useShear (default=True)</code>: Enable shear deformation</li> <li><code>use7Dof (default=False)</code>: Enable warping effect</li> <li><code>id (default=0)</code>: Section ID</li> </ul>"},{"location":"Section/02_psc/#object-attributes_1","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): Section ID.</li> <li><code>NAME</code> (str): Section name.</li> <li><code>SHAPE</code> (str): Section shape, defaults to 'PSCI'.</li> <li><code>TYPE</code> (str): Type of section, defaults to 'PSC'.</li> <li><code>SYMM</code> (bool): Flag indicating if the section is symmetric.</li> <li><code>J1, JL1, JL2, JL3, JL4</code> (bool): Joint connectivity flags for the left side (and right side if symmetric).</li> <li><code>JR1, JR2, JR3, JR4</code> (bool): Joint connectivity flags for the right side (if not symmetric).</li> <li><code>OFFSET</code> (Offset): An <code>Offset</code> object defining the section's offset.</li> <li><code>USESHEAR</code> (bool): Flag to indicate if shear deformation is considered.</li> <li><code>USE7DOF</code> (bool): Flag to indicate if warping effect (7th DOF) is considered.</li> <li><code>H1</code> (float): Height parameter.</li> <li><code>HL1, HL2, HL21, HL22, HL3, HL4, HL41, HL42, HL5</code> (float): Left flange dimensional parameters.</li> <li><code>BL1, BL2, BL21, BL22, BL4, BL41, BL42</code> (float): Left flange dimensional parameters.</li> <li><code>HR1, HR2, HR21, HR22, HR3, HR4, HR41, HR42, HR5</code> (float): Right flange dimensional parameters (values are mirrored from Left if <code>SYMM</code> is True, otherwise independently set).</li> <li><code>BR1, BR2, BR21, BR22, BR4, BR41, BR42</code> (float): Right flange dimensional parameters (values are mirrored from Left if <code>SYMM</code> is True, otherwise independently set).</li> </ul>"},{"location":"Section/02_psc/#examples_1","title":"Examples","text":""},{"location":"Section/02_psc/#symmetric-psc-i-section","title":"Symmetric PSC I-Section","text":"<pre><code># Symmetric PSC I-Section Example\nfor i in range(2):\n    Node(i*10, 0, 0)\n    Node.create()\n\nElement.Beam(1, 2)\nElement.create()\n\n# Create Symmetric PSC I-section\nSection.PSC.I(\n    Name=\"PSC_I_Symmetric\",\n    Symm=True,\n    Joint=[0,0,0,0,0,0,0,0,0],\n    HL1=0.3, HL2=0.5, HL3=1.5, HL4=0.3, HL5=0.3,\n    BL1=0.3, BL2=2, BL4=2,\n     Offset=Offset.CT(),  # \"Center-Top\" selected\n    useShear=True,       # Shear deformation checkbox is selected\n    use7Dof=False,       # Warping effect (7th DOF) not checked\n    id=15\n)\nSection.create()\n</code></pre>"},{"location":"Section/02_psc/#psc-value-section","title":"PSC Value Section","text":""},{"location":"Section/02_psc/#constructor_2","title":"Constructor","text":"<p><code>Section.PSC.I(Name: str,   OuterPolygon: list,   InnerPolygon: list = [],       Offset: Offset = Offset.CC(),     useShear: bool = True,     use7Dof: bool = False,   id: int = 0):</code></p> <p>Creates PSC Value section based on section co-ordinates.</p>"},{"location":"Section/02_psc/#parameters_2","title":"Parameters","text":"<ul> <li><code>Name</code>: Section name</li> <li><code>OuterPolygon</code>: A list of (x, y) tuples defining the vertices of the outer boundary. The polygon does not need to be closed (the first and last points can be different).</li> <li><code>InnerPolygon</code>: An optional list defining the inner boundary (void). It can be either a single list of (x, y) tuples for one void or a list of lists for multiple voids.</li> <li><code>Offset (default=Offset.CC())</code>: Section offset parameters</li> <li><code>useShear (default=True)</code>: Enable shear deformation</li> <li><code>use7Dof (default=False)</code>: Enable warping effect</li> <li><code>id (default=0)</code>: Section ID</li> </ul>"},{"location":"Section/02_psc/#object-attributes_2","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): Section ID.</li> <li><code>NAME</code> (str): Section name.</li> <li><code>SHAPE</code> (str): Section shape, defaults to 'VALUE'.</li> <li><code>TYPE</code> (str): Type of section, defaults to 'PSC'.</li> <li><code>OUTER_POLYGON</code> (list): A list of (x, y) tuples defining the vertices of the outer boundary.</li> <li><code>N_INNER_POLYGON</code> (int): Number of Voids in the section</li> <li> <p><code>INNER_POLYGON</code> (list): It can be either a single list of (x, y) tuples for one void or a list of lists for multiple voids.</p> </li> <li> <p><code>J1, JL1, JL2, JL3, JL4</code> (bool): Joint connectivity flags for the left side (and right side if symmetric).</p> </li> <li> <p><code>JR1, JR2, JR3, JR4</code> (bool): Joint connectivity flags for the right side (if not symmetric).</p> </li> <li> <p><code>OFFSET</code> (Offset): An <code>Offset</code> object defining the section's offset.</p> </li> <li><code>USESHEAR</code> (bool): Flag to indicate if shear deformation is considered.</li> <li><code>USE7DOF</code> (bool): Flag to indicate if warping effect (7th DOF) is considered.</li> </ul>"},{"location":"Section/02_psc/#examples_2","title":"Examples","text":""},{"location":"Section/02_psc/#psc-value-psc-box-example","title":"PSC Value (PSC Box Example)","text":"<pre><code># PSC Value section \nElement.Beam.SDL([0,0,0],[1,0,0],10,10)\n\n# Outer polygon shape\nn_points = [\n    (0,1),(3,1),(3,0.8),(2,0.8),(1.5,0.7),(1,0),(0.9,-0.1),(0.56,-0.19),(0,-0.2),\n    (-0.56,-0.19),(-0.9,-0.1),(-1,0),(-1.5,0.7),(-2,0.8),(-3,0.8),(-3,1)\n]\n\n# Inner Hole\nholl_point = [\n    (0,0.8),(1,0.8),(1,0.5),(0.7,0.1),(0.5,0),(0,0),\n    (-0.5,0),(-0.7,0.1),(-1,0.5),(-1,0.8)\n]\n\nSection.PSC.Value('PSC BOX test',n_points,holl_point,Offset=Offset('CT'))\n\nModel.create()\n</code></pre>"},{"location":"Section/03_composite/","title":"\u200e \u200e \u200e Composite Section","text":""},{"location":"Section/03_composite/#composite-section","title":"Composite Section","text":"<p>A nested class within Section used to create composite sections.</p>"},{"location":"Section/03_composite/#composite-psc-i-section","title":"Composite PSC I-Section","text":""},{"location":"Section/03_composite/#constructor","title":"Constructor","text":"<p><code>Section.Composite.PSCI(Name='', Symm=True, Joint=[0,0,0,0,0,0,0,0,0], Bc=0, tc=0, Hh=0, H1=0, HL1=0, HL2=0, HL21=0, HL22=0, HL3=0, HL4=0, HL41=0, HL42=0, HL5=0, BL1=0, BL2=0, BL21=0, BL22=0, BL4=0, BL41=0, BL42=0, HR1=0, HR2=0, HR21=0, HR22=0, HR3=0, HR4=0, HR41=0, HR42=0, HR5=0, BR1=0, BR2=0, BR21=0, BR22=0, BR4=0, BR41=0, BR42=0, EgdEsb=0, DgdDsb=0, Pgd=0, Psb=0, TgdTsb=0, MultiModulus=False, CreepEratio=0, ShrinkEratio=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0)</code></p> <p>Creates composite PSC I-sections with concrete slab.</p>"},{"location":"Section/03_composite/#parameters","title":"Parameters","text":"<ul> <li><code>Name</code>: Section name</li> <li><code>Symm (default=True)</code>: Symmetric section flag</li> <li><code>Joint</code>: List of joint connectivity values</li> <li><code>Bc, tc, Hh</code>: Slab parameters (width, thickness, haunch height)</li> <li><code>H1</code>: Web height</li> <li><code>HL1-HL5, BL1-BL4</code>: Left flange parameters</li> <li><code>HR1-HR5, BR1-BR4</code>: Right flange parameters</li> <li><code>EgdEsb</code>: Modular ratio (Egirder/Eslab)</li> <li><code>DgdDsb</code>: Density ratio (Dgirder/Dslab)</li> <li><code>Pgd, Psb</code>: Poisson's ratios for girder and slab</li> <li><code>TgdTsb</code>: Thermal coefficient ratio</li> <li><code>MultiModulus (default=False)</code>: Enable multi-modulus analysis</li> <li><code>CreepEratio, ShrinkEratio</code>: Creep and shrinkage ratios</li> <li><code>Offset (default=Offset.CC())</code>: Section offset parameters</li> <li><code>useShear (default=True)</code>: Enable shear deformation</li> <li><code>use7Dof (default=False)</code>: Enable warping effect</li> <li><code>id (default=0)</code>: Section ID</li> </ul>"},{"location":"Section/03_composite/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): Section ID.</li> <li><code>NAME</code> (str): Section name.</li> <li><code>SHAPE</code> (str): Section shape, defaults to 'CI'.</li> <li><code>TYPE</code> (str): Type of section, defaults to 'COMPOSITE'.</li> <li><code>SYMM</code> (bool): Flag indicating if the section is symmetric.</li> <li><code>BC</code> (float): Slab width.</li> <li><code>TC</code> (float): Slab thickness.</li> <li><code>HH</code> (float): Haunch height.</li> <li><code>MATL_ELAST</code> (float): Modular ratio (Egirder/Eslab).</li> <li><code>MATL_DENS</code> (float): Density ratio (Dgirder/Dslab).</li> <li><code>MATL_POIS_S</code> (float): Poisson's ratio for girder.</li> <li><code>MATL_POIS_C</code> (float): Poisson's ratio for slab.</li> <li><code>MATL_THERMAL</code> (float): Thermal coefficient ratio.</li> <li><code>USE_MULTI_ELAST</code> (bool): Flag for multi-modulus analysis.</li> <li><code>LONGTERM_ESEC</code> (float): Creep E-ratio.</li> <li><code>SHRINK_ESEC</code> (float): Shrinkage E-ratio.</li> <li><code>J1, JL1, JL2, JL3, JL4</code> (bool): Joint connectivity flags for the left side (and right side if symmetric).</li> <li><code>JR1, JR2, JR3, JR4</code> (bool): Joint connectivity flags for the right side (if not symmetric).</li> <li><code>OFFSET</code> (Offset): An <code>Offset</code> object defining the section's offset.</li> <li><code>USESHEAR</code> (bool): Flag to indicate if shear deformation is considered.</li> <li><code>USE7DOF</code> (bool): Flag to indicate if warping effect (7th DOF) is considered.</li> <li><code>H1</code> (float): Height parameter.</li> <li><code>HL1, HL2, HL21, HL22, HL3, HL4, HL41, HL42, HL5</code> (float): Left flange dimensional parameters.</li> <li><code>BL1, BL2, BL21, BL22, BL4, BL41, BL42</code> (float): Left flange dimensional parameters.</li> <li><code>HR1, HR2, HR21, HR22, HR3, HR4, HR41, HR42, HR5</code> (float): Right flange dimensional parameters (values are mirrored from Left if <code>SYMM</code> is True, otherwise independently set).</li> <li><code>BR1, BR2, BR21, BR22, BR4, BR41, BR42</code> (float): Right flange dimensional parameters (values are mirrored from Left if <code>SYMM</code> is True, otherwise independently set).</li> </ul>"},{"location":"Section/03_composite/#examples","title":"Examples","text":"<pre><code># Composite PSC I-Section Example\nfor i in range(2):\n    Node(i * 10, 0, 0)\n    Node.create()\n\nElement.Beam(1, 2)\nElement.create()\n\n# Create composite PSC I-section \nSection.Composite.PSCI(\n    Name=\"Composite_PSC_I\",\n    Symm=True,  # Symmetrical section\n    Joint=[0, 0, 0, 0, 0, 0, 0, 0, 0],  # Joint \n\n    # slab parameters\n    Bc=3,\n    tc=0.225,\n    Hh=0,\n\n\n    # Girder parameters\n    HL1=0.15,\n    HL2=0.1,\n    HL3=1.43,\n    HL4=0.12,\n    HL5=0.3,\n\n    BL1=0.14,\n    BL2=0.425,\n    BL4=0.375,\n\n\n    # Material properties\n    EgdEsb=1.06922,     # Elastic modulus ratio (girder/slab)\n    DgdDsb=1.0,     # Density ratio\n    Pgd=0.2,        # Poisson's ratio (girder)\n    Psb=0.2,        # Poisson's ratio (slab)\n    TgdTsb=1.0,     # Thermal expansion coefficient ratio\n\n    # Time-dependent properties\n    MultiModulus=False,\n\n    # Offset and effects\n    Offset=Offset.CT(),\n    useShear=True,\n    use7Dof=False,\n    id=10\n)\nSection.create()\n</code></pre>"},{"location":"Section/03_composite/#composite-steel-i-section","title":"Composite Steel I-Section","text":""},{"location":"Section/03_composite/#constructor_1","title":"Constructor","text":"<p><code>Section.Composite.SteelI_Type1(Name='', Bc=0, tc=0, Hh=0, Hw=0, B1=0, tf1=0, tw=0, B2=0, tf2=0, EsEc=0, DsDc=0, Ps=0, Pc=0, TsTc=0, MultiModulus=False, CreepEratio=0, ShrinkEratio=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0)</code></p> <p>Creates composite steel I-sections with concrete slab.</p>"},{"location":"Section/03_composite/#parameters_1","title":"Parameters","text":"<ul> <li><code>Name</code>: Section name</li> <li><code>Bc, tc, Hh</code>: Slab parameters (width, thickness, haunch height)</li> <li><code>Hw</code>: Web height</li> <li><code>B1, tf1</code>: Top flange width and thickness</li> <li><code>tw</code>: Web thickness</li> <li><code>B2, tf2</code>: Bottom flange width and thickness</li> <li><code>EsEc</code>: Modular ratio (Esteel/Econcrete)</li> <li><code>DsDc</code>: Density ratio (Dsteel/Dconcrete)</li> <li><code>Ps, Pc</code>: Poisson's ratios for steel and concrete</li> <li><code>TsTc</code>: Thermal coefficient ratio</li> <li><code>MultiModulus (default=False)</code>: Enable multi-modulus analysis</li> <li><code>CreepEratio, ShrinkEratio</code>: Creep and shrinkage ratios</li> <li><code>Offset (default=Offset.CC())</code>: Section offset parameters</li> <li><code>useShear (default=True)</code>: Enable shear deformation</li> <li><code>use7Dof (default=False)</code>: Enable warping effect</li> <li><code>id (default=0)</code>: Section ID</li> </ul>"},{"location":"Section/03_composite/#object-attributes_1","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): Section ID.</li> <li><code>NAME</code> (str): Section name.</li> <li><code>SHAPE</code> (str): Section shape, defaults to 'I'.</li> <li><code>TYPE</code> (str): Type of section, defaults to 'COMPOSITE'.</li> <li><code>BC</code> (float): Slab width.</li> <li><code>TC</code> (float): Slab thickness.</li> <li><code>HH</code> (float): Haunch height.</li> <li><code>HW</code> (float): Steel web height.</li> <li><code>B1</code> (float): Steel top flange width.</li> <li><code>TF1</code> (float): Steel top flange thickness.</li> <li><code>TW</code> (float): Steel web thickness.</li> <li><code>B2</code> (float): Steel bottom flange width.</li> <li><code>TF2</code> (float): Steel bottom flange thickness.</li> <li><code>MATL_ELAST</code> (float): Modular ratio (E<sub>steel</sub>/E<sub>concrete</sub>).</li> <li><code>MATL_DENS</code> (float): Density ratio (D<sub>steel</sub>/D<sub>concrete</sub>).</li> <li><code>MATL_POIS_S</code> (float): Poisson's ratio for steel.</li> <li><code>MATL_POIS_C</code> (float): Poisson's ratio for concrete.</li> <li><code>MATL_THERMAL</code> (float): Thermal coefficient ratio.</li> <li><code>USE_MULTI_ELAST</code> (bool): Flag for multi-modulus analysis.</li> <li><code>LONGTERM_ESEC</code> (float): Creep E-ratio.</li> <li><code>SHRINK_ESEC</code> (float): Shrinkage E-ratio.</li> <li><code>OFFSET</code> (Offset): An <code>Offset</code> object defining the section's offset.</li> <li><code>USESHEAR</code> (bool): Flag to indicate if shear deformation is considered.</li> <li><code>USE7DOF</code> (bool): Flag to indicate if warping effect (7th DOF) is considered.</li> </ul>"},{"location":"Section/03_composite/#examples_1","title":"Examples","text":"<pre><code># Composite Steel I-Section Example\nfor i in range(2):\n    Node(i*10, 0, 0)\n    Node.create()\n\nElement.Beam(1, 2)\nElement.create()\n\n# Create composite steel I-section\nSection.Composite.SteelI_Type1(\n    Name=\"Composite_Steel_I\",\n    Bc=3, tc=0.25,  # Slab parameters\n    Hw=2, B1=2.5, tf1=0.2, # Steel I parameters\n    tw=0.2, B2=2.5, tf2=0.2,  \n    EsEc=6.39, DsDc=3.0792, Ps=0.3, Pc=0.2, TsTc=1.2,\n\n    # Offset and effects\n    Offset=Offset.CT(),\n    useShear=True,\n    use7Dof=False,\n    id=13\n)\nSection.create()\n</code></pre>"},{"location":"Section/04_taperedgroup/","title":"\u200e \u200e \u200e Tapered Group","text":""},{"location":"Section/04_taperedgroup/#tapered-group","title":"Tapered Group","text":"<p>The Tapered Group class is used to manage and synchronize tapered group data with MIDAS Civil NX. It is a nested class within the Section class.</p>"},{"location":"Section/04_taperedgroup/#constructor","title":"Constructor","text":"<p><code>Section.TaperedGroup(name, elem_list, z_var, y_var, z_exp=None, z_from=None, z_dist=None, y_exp=None, y_from=None, y_dist=None, id=\"\")</code></p> <p>Creates a tapered group with specified parameters for section shape variation.</p>"},{"location":"Section/04_taperedgroup/#parameters","title":"Parameters","text":"<ul> <li>name (str): Tapered Group Name (Required).</li> <li>elem_list (list): List of element numbers (Required).</li> <li>z_var (str): Section shape variation for Z-axis: \"LINEAR\" or \"POLY\" (Required).</li> <li>y_var (str): Section shape variation for Y-axis: \"LINEAR\" or \"POLY\" (Required).</li> <li>z_exp (float, optional): Z-axis exponent. Required if z_var is \"POLY\".</li> <li>z_from (str, optional): Z-axis symmetric plane (\"i\" or \"j\"). Defaults to \"i\" for \"POLY\".</li> <li>z_dist (float, optional): Z-axis symmetric plane distance. Defaults to 0 for \"POLY\".</li> <li>y_exp (float, optional): Y-axis exponent. Required if y_var is \"POLY\".</li> <li>y_from (str, optional): Y-axis symmetric plane (\"i\" or \"j\"). Defaults to \"i\" for \"POLY\".</li> <li>y_dist (float, optional): Y-axis symmetric plane distance. Defaults to 0 for \"POLY\".</li> <li>id (str, optional): ID for the tapered group. Auto-generated if not provided.</li> </ul>"},{"location":"Section/04_taperedgroup/#class-attributes","title":"Class Attributes","text":"<p>Section.TaperedGroup.data -&gt; List of all tapered groups defined.</p>"},{"location":"Section/04_taperedgroup/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (str): Tapered Group ID.</li> <li><code>NAME</code> (str): Tapered Group name.</li> <li><code>ELEM_LIST</code> (list): List of element numbers.</li> <li><code>Z_VAR</code> (str): Z-axis variation type (\"LINEAR\" or \"POLY\").</li> <li><code>Y_VAR</code> (str): Y-axis variation type (\"LINEAR\" or \"POLY\").</li> <li><code>Z_EXP</code> (float): Z-axis exponent (only for POLY variation).</li> <li><code>Z_FROM</code> (str): Z-axis symmetric plane (only for POLY variation).</li> <li><code>Z_DIST</code> (float): Z-axis symmetric plane distance (only for POLY variation).</li> <li><code>Y_EXP</code> (float): Y-axis exponent (only for POLY variation).</li> <li><code>Y_FROM</code> (str): Y-axis symmetric plane (only for POLY variation).</li> <li><code>Y_DIST</code> (float): Y-axis symmetric plane distance (only for POLY variation).</li> </ul>"},{"location":"Section/04_taperedgroup/#methods","title":"Methods","text":""},{"location":"Section/04_taperedgroup/#create","title":"create","text":"<p>Create all tapered groups in Civil NX. </p><pre><code>Section.TaperedGroup.create()\n</code></pre><p></p>"},{"location":"Section/04_taperedgroup/#json","title":"json","text":"<p>Returns a JSON representation of all TaperedGroups defined in python.</p> <pre><code>print(Section.TaperedGroup.json())\n</code></pre>"},{"location":"Section/04_taperedgroup/#get","title":"get","text":"<p>Fetches tapered groups from Civil NX and returns the JSON representation.</p> <pre><code>print(Section.TaperedGroup.get())\n</code></pre>"},{"location":"Section/04_taperedgroup/#sync","title":"sync","text":"<p>Retrieves TaperedGroup data from Civil NX and rebuilds the internal tapered group list.</p> <pre><code>Section.TaperedGroup.sync()\nfor tapered in Section.TaperedGroup.data:\n    print(f'ID: {tapered.ID} | Name: {tapered.NAME} | Elements: {tapered.ELEM_LIST}')\n</code></pre>"},{"location":"Section/04_taperedgroup/#delete","title":"delete","text":"<p>Deletes all TaperedGroup data from both Python and Civil NX.</p> <pre><code>Section.TaperedGroup.delete()\n</code></pre>"},{"location":"Section/04_taperedgroup/#examples","title":"Examples","text":"<pre><code># Linear Tapered Group Example\nSection.TaperedGroup(\"LinearTaper\", [1, 2, 3, 4], \"LINEAR\", \"LINEAR\")\n\n# Polynomial Z-axis Tapered Group Example\nSection.TaperedGroup(\"ZPolyTaper\", [5, 6, 7], \"POLY\", \"LINEAR\", z_exp=2.5)\n\n# Full Polynomial Tapered Group Example\nSection.TaperedGroup(\"FullPolyTaper\", [8, 9, 10], \"POLY\", \"POLY\", \n                   z_exp=2.0, z_from=\"j\", z_dist=0.5,\n                   y_exp=1.5, y_from=\"i\", y_dist=0.0)\n\n# Create all tapered groups in Civil NX\nSection.TaperedGroup.create()\n</code></pre>"},{"location":"Section/09_thickness/","title":"Thickness","text":""},{"location":"Section/09_thickness/#thickness","title":"Thickness","text":"<p>The Thickness class is used to manage and synchronize thickness data with MIDAS Civil NX.</p>"},{"location":"Section/09_thickness/#constructor","title":"Constructor","text":"<p><code>Thickness(thick=0.0,thick_out=-1,offset=0,off_type='rat',name=\"\",id=0)</code></p> <p>Creates thickness with specified parameters.</p>"},{"location":"Section/09_thickness/#parameters","title":"Parameters","text":"<ul> <li>thick (float): Thickness value</li> <li>thick_out (float): Optional Out-of plane thickness value. If set to -1, it will default to the input thickness.</li> <li>offset (float): Offset value.</li> <li>off_type (str): Type of offset. 'rat' for ratio, 'val' for value.</li> <li>name (str): Optional name of the Thickness.</li> <li>id (int): Thickness ID</li> </ul>"},{"location":"Section/09_thickness/#class-attributes","title":"Class Attributes","text":"<p>Thickness.thick -&gt; List of all thickness defined.   </p>"},{"location":"Section/09_thickness/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): Thickness ID.</li> <li><code>NAME</code> (str): Thickness name.</li> <li><code>TYPE</code> (str): Default: \"VALUE\".</li> <li><code>T_IN</code> (float): In Plane thickness.</li> <li><code>T_OUT</code> (float): Out-of Plane thickness.</li> <li><code>bINOUT</code> (bool): True if T_IN and T_OUT differ; False if same.</li> <li><code>OFFSET</code>(float): Offset amount.</li> <li><code>OFF_TYPE</code> (int): Offset type code (0: none, 1: ratio, 2: absolute).</li> </ul>"},{"location":"Section/09_thickness/#methods","title":"Methods","text":""},{"location":"Section/09_thickness/#create","title":"create","text":"<p>Create all thickness section in Civil NX . </p><pre><code>Thickness.create()\n</code></pre><p></p>"},{"location":"Section/09_thickness/#json","title":"json","text":"<p>Returns a JSON representation of all Thickness defined in python.</p> <pre><code>print(Thickness.json())\n\n# Output:\n</code></pre>"},{"location":"Section/09_thickness/#get","title":"get","text":"<p>Fetches thickness from Civil NX and returns the JSON representation.</p> <pre><code>print(Thickness.get())\n# Output\n</code></pre>"},{"location":"Section/09_thickness/#sync","title":"sync","text":"<p>Retrieves Thickness data from Civil NX and rebuilds the internal thickness list.</p> <pre><code>Thickness.sync()\nfor thick in Thickness.thick:\n    print(f'ID: {thick.ID} | Thickness: {thick.T_IN}')\n</code></pre>"},{"location":"Section/09_thickness/#delete","title":"delete","text":"<p>Deletes all Thickness data from both Python and Civil NX.</p> <pre><code>Thickness.delete()\n</code></pre>"},{"location":"Section/09_thickness/#examples","title":"Examples","text":"<pre><code># Rectangular Section Example\nfor i in range(5):\n    Thickness(i+0.1)\n\nThickness.create()\n</code></pre>"},{"location":"Settlement/","title":"Settlement","text":""},{"location":"Settlement/#settlement","title":"Settlement","text":"<p>The module provides functionality to create, manage, and synchronize settlement conditions including settlement groups and settlement load cases in the model.</p> <p>Note.</p> <p>All the codes below assumes the initial import and MAPI Key definition.</p> <pre><code>from midas_civil import *\nMAPI_KEY('eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicmciO252k81571d')\n</code></pre>"},{"location":"Settlement/#methods","title":"Methods","text":""},{"location":"Settlement/#settlementcreate","title":"Settlement.create","text":"<p>Creates all defined settlement conditions (Settlement Groups and Settlement Load Cases) in Civil NX.</p> <pre><code>Settlement.create()\n</code></pre>"},{"location":"Settlement/#settlementdelete","title":"Settlement.delete","text":"<p>Deletes all settlement conditions (Settlement Groups and Settlement Load Cases) from both Python and Civil NX.</p> <pre><code>Settlement.delete()\n</code></pre>"},{"location":"Settlement/#settlementsync","title":"Settlement.sync","text":"<p>Synchronizes all settlement conditions (Settlement Groups and Settlement Load Cases) from Civil NX to Python.</p> <pre><code>Settlement.sync()\n</code></pre>"},{"location":"Settlement/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import *\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\") # Paste your MAPI Key\n\n# Create nodes for settlement analysis\nfor i in range(10):\n    Node(i*5, 0, 0)\nNode.create()\n\nfor i in range(9):\n    Element.Beam(i+1, i+2)\nElement.create()\n\n# Create Settlement Groups\nSettlement.Group(\"Foundation_A\", 0.025, [1, 2, 3])\nSettlement.Group(\"Foundation_B\", 0.015, [4, 5, 6])\nSettlement.Group(\"Pier_Settlement\", 0.030, [7, 8, 9, 10])\n\n# Create Settlement Load Cases\nSettlement.Case(\"Uniform_Settlement\", [\"Foundation_A\"], 1.0, 1, 1, \"Uniform foundation settlement\")\nSettlement.Case(\"Maximum_Settlement\", [\"Foundation_A\", \"Foundation_B\", \"Pier_Settlement\"], 1.5, 1, 3, \"Maximum expected settlement scenario\")\n\n# Create all settlement conditions\nSettlement.create()\n\nprint(\"All settlement conditions created successfully!\")\n</code></pre>"},{"location":"Settlement/01Group/","title":"\u200e \u200e \u200e Group","text":""},{"location":"Settlement/01Group/#group","title":"Group","text":"<p>A nested class within Settlement used to create settlement groups with displacement values for specified nodes.</p>"},{"location":"Settlement/01Group/#constructor","title":"Constructor","text":"<p><code>Settlement.Group(name, displacement, node_list, id=\"\")</code></p> <p>Creates settlement groups with defined displacement values at specified nodes.</p>"},{"location":"Settlement/01Group/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: Settlement group name (string)</li> <li><code>displacement</code>: Settlement displacement value.</li> <li><code>node_list</code>: List of node IDs to include in the group (array of integers)</li> <li><code>id (default=\"\")</code>: Group ID (optional, auto-generated if not provided)</li> </ul>"},{"location":"Settlement/01Group/#class-attributes","title":"Class Attributes","text":"<p>Settlement.Group.data -&gt; List of all settlement group instances.</p>"},{"location":"Settlement/01Group/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NAME</code> (str): The name of the settlement group.</li> <li><code>SETTLE</code> (float): The settlement displacement value.</li> <li><code>ITEMS</code> (list): List of node IDs included in the settlement group.</li> <li><code>ID</code> (int): The ID of the settlement group entry.</li> </ul>"},{"location":"Settlement/01Group/#methods","title":"Methods","text":""},{"location":"Settlement/01Group/#json","title":"json","text":"<p>Returns JSON representation of all settlement groups.</p> <pre><code>group1 = Settlement.Group(\"SG1\", 25, [1, 2, 3])\nprint(Settlement.Group.json())\n</code></pre>"},{"location":"Settlement/01Group/#create","title":"create","text":"<p>Sends settlement group data to Civil NX.</p> <pre><code>Settlement.Group.create()\n</code></pre>"},{"location":"Settlement/01Group/#get","title":"get","text":"<p>Fetches settlement group data from Civil NX.</p> <pre><code>print(Settlement.Group.get())\n</code></pre>"},{"location":"Settlement/01Group/#sync","title":"sync","text":"<p>Synchronizes settlement groups from Civil NX to Python.</p> <pre><code>Settlement.Group.sync()\n</code></pre>"},{"location":"Settlement/01Group/#delete","title":"delete","text":"<p>Deletes all settlement groups from both Python and Civil NX.</p> <pre><code>Settlement.Group.delete()\n</code></pre>"},{"location":"Settlement/01Group/#examples","title":"Examples","text":"<pre><code># Create nodes\nfor i in range(10):\n    Node(i*5, 0, 0)\nNode.create()\n\n# Create basic settlement group with 25mm displacement\nSettlement.Group(\"SG1\", 0.025, [1, 2, 3])\n\n# Create settlement group for bridge pier with 15mm displacement\nSettlement.Group(\"SG2\", 0.015, [4, 5, 6])\n\n# Create all settlement groups\nSettlement.Group.create()\n\n# Sync existing groups from Civil NX\nSettlement.Group.sync()\nprint(f\"Total groups synced: {len(Settlement.Group.data)}\")\n\n# View JSON representation\nprint(Settlement.Group.json())\n</code></pre>"},{"location":"Settlement/02Case/","title":"\u200e \u200e \u200e Case","text":""},{"location":"Settlement/02Case/#case","title":"Case","text":"<p>A nested class within Settlement used to create settlement load cases that reference settlement groups with various loading parameters.</p>"},{"location":"Settlement/02Case/#constructor","title":"Constructor","text":"<p><code>Settlement.Case(name, settlement_groups=[], factor=1.0, min_groups=1, max_groups=1, desc=\"\", id=\"\")</code></p> <p>Creates settlement load cases with defined groups and loading parameters.</p>"},{"location":"Settlement/02Case/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: Settlement load case name (string)</li> <li><code>settlement_groups (default=[])</code>: List of settlement group names to include (array of strings)</li> <li><code>factor (default=1.0)</code>: Settlement scale factor (number)</li> <li><code>min_groups (default=1)</code>: Minimum number of settlement groups (integer)</li> <li><code>max_groups (default=1)</code>: Maximum number of settlement groups (integer)</li> <li><code>desc (default=\"\")</code>: Description of the settlement case (string)</li> <li><code>id (default=\"\")</code>: Case ID (optional, auto-generated if not provided)</li> </ul>"},{"location":"Settlement/02Case/#class-attributes","title":"Class Attributes","text":"<p>Settlement.Case.data -&gt; List of all settlement case instances.</p>"},{"location":"Settlement/02Case/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NAME</code> (str): The name of the settlement load case.</li> <li><code>DESC</code> (str): Description of the settlement case.</li> <li><code>FACTOR</code> (float): Settlement scale factor.</li> <li><code>MIN</code> (int): Minimum number of settlement groups.</li> <li><code>MAX</code> (int): Maximum number of settlement groups.</li> <li><code>ST_GROUPS</code> (list): List of settlement group names included in the case.</li> <li><code>ID</code> (int): The ID of the settlement case entry.</li> </ul>"},{"location":"Settlement/02Case/#methods","title":"Methods","text":""},{"location":"Settlement/02Case/#json","title":"json","text":"<p>Returns JSON representation of all settlement cases.</p> <pre><code>case1 = Settlement.Case(\"SMLC1\", [\"SG1\"], 1.2, 1, 1, \"Foundation Settlement Case\")\nprint(Settlement.Case.json())\n</code></pre>"},{"location":"Settlement/02Case/#create","title":"create","text":"<p>Sends settlement case data to Civil NX.</p> <pre><code>Settlement.Case.create()\n</code></pre>"},{"location":"Settlement/02Case/#get","title":"get","text":"<p>Fetches settlement case data from Civil NX.</p> <pre><code>print(Settlement.Case.get())\n</code></pre>"},{"location":"Settlement/02Case/#sync","title":"sync","text":"<p>Synchronizes settlement cases from Civil NX to Python.</p> <pre><code>Settlement.Case.sync()\n</code></pre>"},{"location":"Settlement/02Case/#delete","title":"delete","text":"<p>Deletes all settlement cases from both Python and Civil NX.</p> <pre><code>Settlement.Case.delete()\n</code></pre>"},{"location":"Settlement/02Case/#examples","title":"Examples","text":"<pre><code># First create settlement groups\nSettlement.Group(\"SG1\", 0.025, [1, 2, 3])\nSettlement.Group(\"SG2\", 0.015, [4, 5, 6])\nSettlement.Group.create()\n\n# Basic settlement load case with single group\nSettlement.Case(\"SMLC1\", [\"SG1\"], 1.2, 1, 1)\n\n# Settlement case with multiple groups\nSettlement.Case(\"SMLC2\", [\"SG1\", \"SG2\"], 1.0, 1, 2, \"Combined Settlement\")\n\n# Create all settlement cases\nSettlement.Case.create()\n\n# Sync existing cases from Civil NX\nSettlement.Case.sync()\nprint(f\"Total cases synced: {len(Settlement.Case.data)}\")\n\n# View JSON representation\nprint(Settlement.Case.json())\n</code></pre>"},{"location":"Temperature/","title":"Temperature Load","text":""},{"location":"Temperature/#temperature","title":"Temperature","text":"<p>The Temperature class provides a unified interface to create different types of temperature loads and includes nested classes for specific temperature load types.</p>"},{"location":"Temperature/#nested-classes","title":"Nested Classes","text":"<ul> <li>Temperature.System: Creates system temperature Loads</li> <li>Temperature.Element: Creates element-specific temperature loads</li> <li>Temperature.Gradient: Creates temperature gradient loads for beam and plate elements</li> <li>Temperature.Nodal: Creates temperature loads applied to specific nodes</li> <li>Temperature.BeamSection: Creates temperature loads with cross-sectional variations for beam elements</li> </ul>"},{"location":"Temperature/#methods","title":"Methods","text":""},{"location":"Temperature/#create","title":"create","text":"<p>Creates all defined temperature loads (System, Element, Gradient, Nodal, and BeamSection temperatures) in Civil NX.</p> <pre><code>Temperature.create()\n</code></pre>"},{"location":"Temperature/#delete","title":"delete","text":"<p>Deletes all temperature loads from both Civil NX and Python.</p> <pre><code>Temperature.delete()\n</code></pre>"},{"location":"Temperature/#sync","title":"sync","text":"<p>Synchronizes all temperature loads from Civil NX to Python.</p> <pre><code>Temperature.sync()\n</code></pre>"},{"location":"Temperature/#complete-example","title":"Complete Example","text":"<pre><code>from midas_civil import*\n\nMAPI_KEY(\"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\") #Paste your Mapi Key\n\n# Create nodes and elements\nfor j in range(6):\n    for i in range(2):\n        Node(i*10,j*2,0)\n        Node.create()\n\nj = 0\nfor k in range(6):   \n    for i in range(1,2):\n        Element.Beam(i +j,i+1 +j)\n        Element.create()\n    j = j + 2\n\n# Load Cases\nLoad_Case(\"T\",\"Temperature Rise\")\nLoad_Case(\"T\",\"Temperature Fall\")\nLoad_Case(\"TPG\",\"Temperature Gradient\")\nLoad_Case(\"T\",\"Nodal Temperature\")\nLoad_Case(\"T\",\"Beam Section Temperature\")\nLoad_Case.create()\n\n# Load Groups\nGroup.Load(\"Temperature Loads\")\nGroup.Load.create()\n\n# System Temperature (Uniform temperature change)\nTemperature.System(25.0, \"Temperature Rise\", \"Temperature Loads\", 1)\nTemperature.System(-15.0, \"Temperature Fall\", \"Temperature Loads\", 2)\n\n# Element Temperature (Element-specific temperature)\nTemperature.Element(1, 35.0, \"Temperature Rise\", \"Temperature Loads\", 1)\nTemperature.Element(2, 30.0, \"Temperature Rise\", \"Temperature Loads\", 2)\nTemperature.Element(3, -20.0, \"Temperature Fall\", \"Temperature Loads\", 3)\n\n# Temperature Gradient for Beam elements\nTemperature.Gradient(1, 'Beam', \"Temperature Gradient\", tz=15, ty=-10, hz=1.2, hy=0.8)\nTemperature.Gradient(2, 'Beam', \"Temperature Gradient\", tz=20, ty=-15)  # Using section defaults\n\n\n# Nodal Temperature (Node-specific temperature)\nTemperature.Nodal(1, 10.0, \"Nodal Temperature\", \"Temperature Loads\", 1)\nTemperature.Nodal(2, 15.0, \"Nodal Temperature\", \"Temperature Loads\", 2)\nTemperature.Nodal(3, -12.0, \"Nodal Temperature\", \"Temperature Loads\", 3)\n\n# Beam Section Temperature (Cross-sectional temperature variations)\nTemperature.BeamSection(\n    element=1,\n    lcname=\"Beam Section Temperature\",\n    section_type='General',\n    type='Element',\n    group=\"Temperature Loads\",\n    dir='LZ',\n    ref_pos='Centroid',\n    val_b=10.0,\n    val_h1=15.0,\n    val_h2=20.0,\n    val_t1=5.0,\n    val_t2=8.0\n)\n\n# Create All temperature loads in Civil NX\nTemperature.create()\n</code></pre>"},{"location":"Temperature/001System/","title":"\u200e \u200e \u200e System","text":""},{"location":"Temperature/001System/#system-temperature","title":"System Temperature","text":"<p>A nested class within Temperature used to create system-wide uniform temperature changes.</p>"},{"location":"Temperature/001System/#constructor","title":"Constructor","text":"<p><code>Temperature.System(temperature, lcname, group=\"\", id=None)</code></p> <p>Creates system temperature loads that apply uniform temperature changes to the entire structure.</p>"},{"location":"Temperature/001System/#parameters","title":"Parameters","text":"<ul> <li><code>temperature</code>: Temperature value (Required)</li> <li><code>lcname</code>: Load case name (Required)</li> <li><code>group (default=\"\")</code>: Load group name</li> <li><code>id (default=None)</code>: System ID (auto-generated if None)</li> </ul>"},{"location":"Temperature/001System/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>TEMPER</code> (float): The temperature value to be applied.</li> <li><code>LCNAME</code> (str): The name of the load case.</li> <li><code>GROUP_NAME</code> (str): The name of the load group.</li> <li><code>ID</code> (int): The ID of the system temperature entry.</li> </ul>"},{"location":"Temperature/001System/#methods","title":"Methods","text":""},{"location":"Temperature/001System/#json","title":"json","text":"<p>Returns JSON representation of all system temperature loads.</p> <pre><code>st1 = Temperature.System(12.5, \"Temp(+)\", \"LoadGroup1\", 1)\nprint(Temperature.System.json())\n</code></pre>"},{"location":"Temperature/001System/#create","title":"create","text":"<p>Sends system temperature loads to Civil NX.</p> <pre><code>Temperature.System.create()\n</code></pre>"},{"location":"Temperature/001System/#get","title":"get","text":"<p>Fetches system temperature loads from Civil NX.</p> <pre><code>print(Temperature.System.get())\n</code></pre>"},{"location":"Temperature/001System/#sync","title":"sync","text":"<p>Synchronizes system temperature loads from Civil NX.</p> <pre><code>Temperature.System.sync()\n</code></pre>"},{"location":"Temperature/001System/#delete","title":"delete","text":"<p>Deletes all system temperature loads from both Python and Civil NX.</p> <pre><code>Temperature.System.delete()\n</code></pre>"},{"location":"Temperature/001System/#examples","title":"Examples","text":"<pre><code># System Temperature Example\n# Create load cases first\nLoad_Case(\"T\", \"Temperature Rise\")\nLoad_Case(\"T\", \"Temperature fall\")\nLoad_Case.create()\n\n# Create load group \nGroup.Load(\"Temperature Loads\")\nGroup.Load.create()\n\n# Define System Temperature - Heating\nTemperature.System(25.0, \"Temperature Rise\", \"Temperature Loads\", 1)\nTemperature.System.create()\n\n# Define System Temperature - fall\nTemperature.System(-15.0, \"Temperature fall\", \"Temperature Loads\", 2)\nTemperature.System.create()\n\n# Multiple temperature conditions\nTemperature.System(30.0, \"Temperature Rise\", \"Temperature Loads\")\nTemperature.System(-10.0, \"Temperature fall\", \"Temperature Loads\")\nTemperature.System.create()\n</code></pre>"},{"location":"Temperature/002Element/","title":"\u200e \u200e \u200e Element","text":""},{"location":"Temperature/002Element/#element-temperature","title":"Element Temperature","text":"<p>A nested class within Temperature used to create element-specific temperature loads.</p>"},{"location":"Temperature/002Element/#constructor","title":"Constructor","text":"<p><code>Temperature.Element(element, temperature, lcname, group=\"\", id=None)</code></p> <p>Creates element temperature loads that apply temperature changes to specific elements.</p>"},{"location":"Temperature/002Element/#parameters","title":"Parameters","text":"<ul> <li><code>element</code>: Element ID (Required)</li> <li><code>temperature</code>: Temperature value (Required)</li> <li><code>lcname</code>: Load case name (Required)</li> <li><code>group (default=\"\")</code>: Load group name</li> <li><code>id (default=None)</code>: Temperature ID (auto-generated if None)</li> </ul>"},{"location":"Temperature/002Element/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ELEMENT</code> (int): The element ID where temperature is applied.</li> <li><code>TEMP</code> (float): The temperature value to be applied.</li> <li><code>LCNAME</code> (str): The name of the load case.</li> <li><code>GROUP_NAME</code> (str): The name of the load group.</li> <li><code>ID</code> (int): The ID of the element temperature entry.</li> <li><code>ITEMS</code> (list): List of temperature items for the element.</li> </ul>"},{"location":"Temperature/002Element/#methods","title":"Methods","text":""},{"location":"Temperature/002Element/#json","title":"json","text":"<p>Returns JSON representation of all element temperature loads.</p> <pre><code>et1 = Temperature.Element(1, 35, \"Temp(+)\", \"\", 1)\nprint(Temperature.Element.json())\n</code></pre>"},{"location":"Temperature/002Element/#create","title":"create","text":"<p>Sends element temperature loads to Civil NX.</p> <pre><code>Temperature.Element.create()\n</code></pre>"},{"location":"Temperature/002Element/#get","title":"get","text":"<p>Fetches element temperature loads from Civil NX.</p> <pre><code>print(Temperature.Element.get())\n</code></pre>"},{"location":"Temperature/002Element/#sync","title":"sync","text":"<p>Synchronizes element temperature loads from Civil NX.</p> <pre><code>Temperature.Element.sync()\n</code></pre>"},{"location":"Temperature/002Element/#delete","title":"delete","text":"<p>Deletes all element temperature loads from both Python and Civil NX.</p> <pre><code>Temperature.Element.delete()\n</code></pre>"},{"location":"Temperature/002Element/#examples","title":"Examples","text":"<pre><code># Element Temperature Example\n# Create elements first\nfor i in range(1, 6):\n    Element.Beam(i, i+1)\nElement.create()\n\n# Create load cases\nLoad_Case(\"T\", \"Temperature High\")\nLoad_Case(\"T\", \"Temperature Low\")\nLoad_Case.create()\n\n# Create load group \nGroup.Load(\"Temp\")\nGroup.Load.create()\n\n# Define Element Temperature \nTemperature.Element(1, 35.0, \"Temperature High\", \"Temp\", 1)\nTemperature.Element(2, 42.0, \"Temperature High\", \"Temp\", 2)\nTemperature.Element(3, -18.0, \"Temperature Low\", \"Temp\", 3)\nTemperature.Element.create()\n</code></pre>"},{"location":"Temperature/003Gradient/","title":"\u200e \u200e \u200e Gradient","text":""},{"location":"Temperature/003Gradient/#temperature-gradient","title":"Temperature Gradient","text":"<p>A nested class within Temperature used to create temperature gradient loads for Beam and Plate elements.</p>"},{"location":"Temperature/003Gradient/#constructor","title":"Constructor","text":"<p><code>Temperature.Gradient(element, type, lcname, tz, group=\"\", id=None, hz=None, ty=0, hy=None)</code></p> <p>Creates temperature gradient loads that apply temperature differences across element cross-sections.</p>"},{"location":"Temperature/003Gradient/#parameters","title":"Parameters","text":"<ul> <li><code>element</code>: Element ID to apply the gradient (Required)</li> <li><code>type</code>: Element type, either 'Beam' or 'Plate' (Required)</li> <li><code>lcname</code>: Load Case Name (Required)</li> <li><code>tz</code>: Temperature difference in the local z-direction (T2z - T1z) (Required)</li> <li><code>group (default=\"\")</code>: Load group name</li> <li><code>id (default=None)</code>: Gradient ID (auto-generated if None)</li> <li><code>hz (default=None)</code>: Gradient value for local z-dir (uses section default if None)</li> <li><code>ty (default=0)</code>: Temperature difference in local y-dir (T2y - T1y) - Required for 'Beam' type</li> <li><code>hy (default=None)</code>: Gradient value for local y-dir (uses section default if None)</li> </ul>"},{"location":"Temperature/003Gradient/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ELEMENT</code> (int): The element ID where gradient is applied.</li> <li><code>ID</code> (int): The ID of the temperature gradient entry.</li> <li><code>ITEMS</code> (list): List of gradient items containing temperature parameters.</li> </ul>"},{"location":"Temperature/003Gradient/#methods","title":"Methods","text":""},{"location":"Temperature/003Gradient/#json","title":"json","text":"<p>Returns JSON representation of all temperature gradient loads.</p> <pre><code>tg1 = Temperature.Gradient(2, 'Beam', 'Temp(-)', tz=10, ty=-10, hz=1.2, hy=0.5)\nprint(Temperature.Gradient.json())\n</code></pre>"},{"location":"Temperature/003Gradient/#create","title":"create","text":"<p>Sends temperature gradient loads to Civil NX.</p> <pre><code>Temperature.Gradient.create()\n</code></pre>"},{"location":"Temperature/003Gradient/#get","title":"get","text":"<p>Fetches temperature gradient loads from Civil NX.</p> <pre><code>print(Temperature.Gradient.get())\n</code></pre>"},{"location":"Temperature/003Gradient/#sync","title":"sync","text":"<p>Synchronizes temperature gradient loads from Civil NX.</p> <pre><code>Temperature.Gradient.sync()\n</code></pre>"},{"location":"Temperature/003Gradient/#delete","title":"delete","text":"<p>Deletes all temperature gradient loads from both Python and Civil NX.</p> <pre><code>Temperature.Gradient.delete()\n</code></pre>"},{"location":"Temperature/003Gradient/#examples","title":"Examples","text":"<pre><code># Temperature Gradient Example\n\n# Create load cases\nLoad_Case(\"TPG\", \"Temperature Gradient\")\nLoad_Case(\"TPG\", \"Temperature Gradient Negative\")\nLoad_Case.create()\n\n# Create load group (optional)\nGroup.Load(\"Gradient Loads\")\nGroup.Load.create()\n\n# Define Temperature Gradient for Beam - With custom gradient values\nTemperature.Gradient(element=1, type='Beam', lcname='Temperature Gradient', \n                    tz=15, ty=-10, hz=1.2, hy=0.8, group=\"Gradient Loads\")\nTemperature.Gradient.create()\n\n# Define Temperature Gradient for Beam - Using section defaults\nTemperature.Gradient(element=2, type='Beam', lcname='Temperature Gradient', \n                    tz=20, ty=-15, group=\"Gradient Loads\")\nTemperature.Gradient.create()\n\n# Define Temperature Gradient for Plate - With custom gradient value\nTemperature.Gradient(element=10, type='Plate', lcname='Temperature Gradient', \n                    tz=12, hz=0.25, group=\"Gradient Loads\")\nTemperature.Gradient.create()\n\n# Define Temperature Gradient for Plate - Using section default\nTemperature.Gradient(element=11, type='Plate', lcname='Temperature Gradient', \n                    tz=18, group=\"Gradient Loads\")\nTemperature.Gradient.create()\n\n# Multiple gradients on same element\nTemperature.Gradient(element=3, type='Beam', lcname='Temperature Gradient', \n                    tz=10, ty=-8)\nTemperature.Gradient(element=3, type='Beam', lcname='Temperature Gradient Negative', \n                    tz=-12, ty=6)\nTemperature.Gradient.create()\n</code></pre>"},{"location":"Temperature/004Nodal/","title":"\u200e \u200e \u200e Nodal","text":""},{"location":"Temperature/004Nodal/#nodal-temperature","title":"Nodal Temperature","text":"<p>A nested class within Temperature used to create nodal temperature loads that apply temperature changes to specific nodes.</p>"},{"location":"Temperature/004Nodal/#constructor","title":"Constructor","text":"<p><code>Temperature.Nodal(node, temperature, lcname, group=\"\", id=None)</code></p> <p>Creates nodal temperature loads that apply temperature changes to specific nodes in the structure.</p>"},{"location":"Temperature/004Nodal/#parameters","title":"Parameters","text":"<ul> <li><code>node</code>: Node ID (Required)</li> <li><code>temperature</code>: Temperature value (Required)</li> <li><code>lcname</code>: Load case name (Required)</li> <li><code>group (default=\"\")</code>: Load group name</li> <li><code>id (default=None)</code>: Temperature ID (auto-generated if None)</li> </ul>"},{"location":"Temperature/004Nodal/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>NODE</code> (int): The node ID where temperature is applied.</li> <li><code>TEMPER</code> (float): The temperature value to be applied.</li> <li><code>LCNAME</code> (str): The name of the load case.</li> <li><code>GROUP_NAME</code> (str): The name of the load group.</li> <li><code>ID</code> (int): The ID of the nodal temperature entry.</li> <li><code>ITEMS</code> (list): List containing temperature load data for the node.</li> </ul>"},{"location":"Temperature/004Nodal/#methods","title":"Methods","text":""},{"location":"Temperature/004Nodal/#json","title":"json","text":"<p>Returns JSON representation of all nodal temperature loads.</p> <pre><code>nt1 = Temperature.Nodal(6, 10, \"Temp(+)\", \"LoadGroup1\", 1)\nprint(Temperature.Nodal.json())\n</code></pre>"},{"location":"Temperature/004Nodal/#create","title":"create","text":"<p>Sends nodal temperature loads to Civil NX.</p> <pre><code>Temperature.Nodal.create()\n</code></pre>"},{"location":"Temperature/004Nodal/#get","title":"get","text":"<p>Fetches nodal temperature loads from Civil NX.</p> <pre><code>print(Temperature.Nodal.get())\n</code></pre>"},{"location":"Temperature/004Nodal/#sync","title":"sync","text":"<p>Synchronizes nodal temperature loads from Civil NX.</p> <pre><code>Temperature.Nodal.sync()\n</code></pre>"},{"location":"Temperature/004Nodal/#delete","title":"delete","text":"<p>Deletes all nodal temperature loads from both Python and Civil NX.</p> <pre><code>Temperature.Nodal.delete()\n</code></pre>"},{"location":"Temperature/004Nodal/#examples","title":"Examples","text":"<pre><code># Nodal Temperature Example\n# Create load cases first\nLoad_Case(\"T\", \"Temperature Rise\")\nLoad_Case(\"T\", \"Temperature Fall\")\nLoad_Case.create()\n\n# Create load group \nGroup.Load(\"Temperature Loads\")\nGroup.Load.create()\n\n# Define Nodal Temperature - Single node\nTemperature.Nodal(6, 10.0, \"Temperature Rise\", \"Temperature Loads\", 1)\nTemperature.Nodal.create()\n\n# Define Nodal Temperature - Multiple nodes\nTemperature.Nodal(1, 25.0, \"Temperature Rise\", \"Temperature Loads\")\nTemperature.Nodal(2, -15.0, \"Temperature Fall\", \"Temperature Loads\")\nTemperature.Nodal(3, 30.0, \"Temperature Rise\", \"Temperature Loads\")\nTemperature.Nodal.create()\n\n# Multiple temperature conditions for same node\nTemperature.Nodal(5, 20.0, \"Temperature Rise\", \"Temperature Loads\")\nTemperature.Nodal(5, -10.0, \"Temperature Fall\", \"Temperature Loads\")\nTemperature.Nodal.create()\n</code></pre>"},{"location":"Temperature/005Beamsection/","title":"\u200e \u200e \u200e Beam Section","text":""},{"location":"Temperature/005Beamsection/#beam-section-temperature","title":"Beam Section Temperature","text":"<p>A nested class within Temperature used to create beam section temperature loads that apply temperature gradients and variations across beam cross-sections.</p>"},{"location":"Temperature/005Beamsection/#constructor","title":"Constructor","text":"<p><code>Temperature.BeamSection(element, lcname, section_type='General', type='Element', group=\"\", id=None, dir='LZ', ref_pos='Centroid', val_b=0, val_h1=0, val_h2=0, val_t1=0, val_t2=0, elast=None, thermal=None, psc_ref=0, psc_opt_b=1, psc_opt_h1=3, psc_opt_h2=3)</code></p> <p>Creates beam section temperature loads that apply temperature variations across beam cross-sections.</p>"},{"location":"Temperature/005Beamsection/#parameters","title":"Parameters","text":"<ul> <li><code>element</code>: Element ID to apply the load (Required)</li> <li><code>lcname</code>: Load case name (Required)</li> <li><code>section_type (default='General')</code>: 'General' or 'PSC'</li> <li><code>type (default='Element')</code>: 'Element' or 'Input'</li> <li><code>group (default=\"\")</code>: Load group name</li> <li><code>id (default=None)</code>: Load ID (auto-generated if None)</li> <li><code>dir (default='LZ')</code>: Direction, 'LY' or 'LZ'</li> <li><code>ref_pos (default='Centroid')</code>: Reference Position, 'Centroid', 'Top', or 'Bot'</li> <li><code>val_b (default=0)</code>: B Value</li> <li><code>val_h1 (default=0)</code>: H1 Value</li> <li><code>val_h2 (default=0)</code>: H2 Value</li> <li><code>val_t1 (default=0)</code>: T1 Value</li> <li><code>val_t2 (default=0)</code>: T2 Value</li> <li><code>elast (default=None)</code>: Modulus of Elasticity (required for 'Input' type)</li> <li><code>thermal (default=None)</code>: Thermal Coefficient (required for 'Input' type)</li> <li><code>psc_ref (default=0)</code>: Reference for PSC, 0 for Top, 1 for Bottom</li> <li><code>psc_opt_b (default=1)</code>: B-Type option for PSC (0 for Section type)</li> <li><code>psc_opt_h1 (default=3)</code>: H1-Type option for PSC (0-Z1, 1-Z2, 2-Z2)</li> <li><code>psc_opt_h2 (default=3)</code>: H2-Type option for PSC (0-Z1, 1-Z2, 2-Z2)</li> </ul>"},{"location":"Temperature/005Beamsection/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ELEMENT</code> (int): The element ID where temperature is applied.</li> <li><code>ID</code> (int): The ID of the beam section temperature entry.</li> <li><code>ITEMS</code> (list): List containing temperature load data for the element.</li> </ul>"},{"location":"Temperature/005Beamsection/#methods","title":"Methods","text":""},{"location":"Temperature/005Beamsection/#json","title":"json","text":"<p>Returns JSON representation of all beam section temperature loads.</p> <pre><code>bst1 = Temperature.BeamSection(1, \"Temp Gradient\", \"General\", \"Element\", \"LoadGroup1\")\nprint(Temperature.BeamSection.json())\n</code></pre>"},{"location":"Temperature/005Beamsection/#create","title":"create","text":"<p>Sends beam section temperature loads to Civil NX.</p> <pre><code>Temperature.BeamSection.create()\n</code></pre>"},{"location":"Temperature/005Beamsection/#get","title":"get","text":"<p>Fetches beam section temperature loads from Civil NX.</p> <pre><code>print(Temperature.BeamSection.get())\n</code></pre>"},{"location":"Temperature/005Beamsection/#sync","title":"sync","text":"<p>Synchronizes beam section temperature loads from Civil NX.</p> <pre><code>Temperature.BeamSection.sync()\n</code></pre>"},{"location":"Temperature/005Beamsection/#delete","title":"delete","text":"<p>Deletes all beam section temperature loads from both Python and Civil NX.</p> <pre><code>Temperature.BeamSection.delete()\n</code></pre>"},{"location":"Temperature/005Beamsection/#examples","title":"Examples","text":"<pre><code># Beam Section Temperature Example\n# Create load cases first\nLoad_Case(\"T\", \"Temperature Case 1\")\nLoad_Case(\"T\", \"Temperature Case 2\")\nLoad_Case.create()\n\n# Create load group \nGroup.Load(\"Temperature Loads\")\nGroup.Load.create()\n\n# Define Beam Section Temperature - General Section with Element type\nTemperature.BeamSection(\n    element=1, \n    lcname=\"Temperature Case 1\", \n    section_type='General',\n    type='Element',\n    group=\"Temperature Loads\",\n    dir='LZ',\n    ref_pos='Centroid',\n    val_b=10.0,\n    val_h1=15.0,\n    val_h2=20.0,\n    val_t1=5.0,\n    val_t2=8.0\n)\n\n# Define Beam Section Temperature - Input type with material properties\nTemperature.BeamSection(\n    element=2,\n    lcname=\"Temperature Case 2\",\n    section_type='General',\n    type='Input',\n    group=\"Temperature Loads\",\n    val_b=12.0,\n    val_h1=18.0,\n    val_t1=6.0,\n    elast=30000000,  # Required for Input type\n    thermal=0.0011  # Required for Input type\n)\n\n\n# Create all beam section temperature loads\nTemperature.BeamSection.create()\n</code></pre>"},{"location":"Tendon/001Property/","title":"\u200e \u200e \u200e Tendon Property","text":""},{"location":"Tendon/001Property/#tendon-property","title":"Tendon Property","text":"<p>Manages tendon properties and integrates relaxation models.</p> <p></p> <p>Property highlighted in the box is defined through Relaxation defintion.</p>"},{"location":"Tendon/001Property/#constructor","title":"Constructor","text":"<p><code>Tendon.Property(name, type, matID: int, tdn_area, duct_dia, relaxation, ext_mom_mag=0, anch_slip_begin=0, anch_slip_end=0, bond_type: bool=True, id=0)</code></p> <p>Creates a tendon property</p>"},{"location":"Tendon/001Property/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str): Name for the tendon property.</li> <li><code>type</code> (int): 1=Internal (Pre-tension) |  2=Internal (Post-tension) |  3=External.</li> <li><code>matID</code> (int): Steel Material ID.</li> <li><code>tdn_area</code> (float): Area of tendon.</li> <li><code>duct_dia</code> (float): Duct diameter.</li> <li><code>relaxation</code>: Relaxation definition.</li> <li><code>ext_mom_mag</code> (float, default=0): External moment magnifier.</li> <li><code>anch_slip_begin</code> (float, default=0): Anchorage slip at begin.</li> <li><code>anch_slip_end</code> (float, default=0): Anchorage slip at end.</li> <li><code>bond_type</code> (bool, default=True): Whether the tendon is bonded or unbonded.</li> <li><code>id</code> (int, default=0): Optional ID for tendon property.</li> </ul>"},{"location":"Tendon/001Property/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code>: Unique identifier (auto-generated)</li> <li><code>NAME</code>: Tendon name</li> <li><code>TYPE</code>: Tendon type (INTERNAL or EXTERNAL)</li> <li><code>TENS</code>: Tension type (PRE or POST)</li> <li><code>MAT</code>: Material ID</li> <li><code>TDN_AREA</code>: Tendon area</li> <li><code>DUCT_DIA</code>: Duct diameter</li> <li><code>RELAX</code>: Relaxation object</li> <li><code>EXT_MOM_MAG</code>: External moment magnitude</li> <li><code>ANC_SLIP_B</code>: Anchor slip at beginning</li> <li><code>ANC_SLIP_E</code>: Anchor slip at end</li> <li><code>BOND_TYP</code>: Bonded (True) or unbonded (False)</li> </ul>"},{"location":"Tendon/001Property/#class-attributes","title":"Class Attributes","text":"<p>Tendon.Property.properties -&gt; List of all tendon properties defined.</p> <pre><code>Tendon.Property('TD_Prop',2,1,1700,100,Tendon.Relaxation.Null(1800,1500))\nTendon.Property('TD_Prop 2',1,1,1700,100,Tendon.Relaxation.CEBFIP_2010(0,2,1800,1500))\n\nfor prop in Tendon.Property.properties:\n    print(f'NAME : {prop.NAME}  | TYPE: {prop.TYPE} {prop.TENS} TENSION ')\n\n# Output:\n# NAME : TD_Prop  | TYPE: INTERNAL POST TENSION\n# NAME : TD_Prop 2  | TYPE: INTERNAL PRE TENSION\n</code></pre>"},{"location":"Tendon/001Property/#methods","title":"Methods","text":""},{"location":"Tendon/001Property/#json","title":"json","text":"<p>Returns a JSON representation of all Tendon Properties defined in python.</p> <pre><code>Tendon.Property('TD_Prop',2,1,1700,100,Tendon.Relaxation.Null(1800,1500))\nprint(Tendon.Property.json())\n\n# Output:\n# {'Assign': {1: {'NAME': 'TD_Prop', 'TYPE': 'INTERNAL', 'LT': 'POST', 'MATL': 1, 'AREA': 1700, 'D_AREA': 100, 'ASB': 0, 'ASE': 0, 'bBONDED': True, 'ALPHA': 0, 'RM': 0, 'RV': 0, 'US': 1800, 'YS': 1500, 'FF': 0, 'WF': 0, 'bRELAX': False}}}\n</code></pre>"},{"location":"Tendon/001Property/#create","title":"create","text":"<p>Sends the current tendon properties defined to the Civil NX using a PUT request.  New properties are created and existing property(same ID) in Civil NX will be updated.</p> <pre><code>Tendon.Property('TD_Prop',2,1,1700,100,Tendon.Relaxation.Null(1800,1500)) # Assumes Material with ID=1\nTendon.Property.create()\n</code></pre>"},{"location":"Tendon/001Property/#get","title":"get","text":"<p>Fetches tendon properties from the Civil NX and return the JSON representation.</p> <pre><code>print(Tendon.Property.get())\n# Output:\n# {'TDNT': {'1': {'NAME': 'TD_Prop', 'TYPE': 'INTERNAL', 'MATL': 1, 'AREA': 1700, 'D_AREA': 100, 'RM': 0, 'RV': 0, 'US': 1800, 'YS': 1500, 'LT': 'POST', 'ASB': 0, 'ASE': 0, 'bBONDED': True, 'ALPHA': 0, 'bRELAX': False, 'TDMFK': 0, 'FF': 0, 'WF': 0}}}\n</code></pre>"},{"location":"Tendon/001Property/#sync","title":"sync","text":"<p>Retrieves Tendon property data from the Civil NX and rebuilds the internal tendon property list.</p> <pre><code>Tendon.Property.sync()\n</code></pre>"},{"location":"Tendon/001Property/#delete","title":"delete","text":"<p>Deletes all tendon properties from both Python and Civil NX.</p> <pre><code>Tendon.Property.delete()\n</code></pre> <p></p>"},{"location":"Tendon/001Property/#relaxation","title":"Relaxation","text":"<p>The Relaxation class contains several code-specific inner classes to define tendon relaxation properties.  Each standard/code has its own constructor parameters and object attributes.</p> <p>If no relaxation is required, Tendon.Relaxation.Null( ) should be used.</p> Null - No Relaxation CEB-FIP Code (2010) CEB-FIP Code (1978) CEB-FIP Code (1990) European IRC 18 - 2000 IRC 112 - 2020 Magura et al. 1964 <p></p>"},{"location":"Tendon/001Property/#null","title":"Null","text":""},{"location":"Tendon/001Property/#constructor_1","title":"Constructor","text":"<p><code>Tendon.Relaxation.Null(    ult_st,    yield_st,    curv_fric_fac=0,    wob_fric_fac=0)</code></p>"},{"location":"Tendon/001Property/#parameters_1","title":"Parameters","text":"<ul> <li><code>ult_st</code> (float): Ultimate strength.  </li> <li><code>yield_st</code> (float): Yield strength.  </li> <li><code>curv_fric_fac</code> (float, optional): Curvature friction factor (default is 0).  </li> <li><code>wob_fric_fac</code> (float, optional): Wobble friction factor (default is 0).  </li> </ul>"},{"location":"Tendon/001Property/#object-attributes_1","title":"Object Attributes","text":"<ul> <li><code>CODE</code> (str): 'No Relaxation'  </li> <li><code>ULT_ST</code> (float): Ultimate strength.  </li> <li><code>YIELD_ST</code> (float): Yield strength.  </li> <li><code>CURV_FF</code> (float): Curvature friction factor.  </li> <li><code>WOBBLE_FF</code> (float): Wobble friction factor.  </li> </ul>"},{"location":"Tendon/001Property/#cebfip_2010","title":"CEBFIP_2010","text":""},{"location":"Tendon/001Property/#constructor_2","title":"Constructor","text":"<p><code>Tendon.Relaxation.CEBFIP_2010(    rho,    rel_class,    ult_st,    yield_st,    curv_fric_fac=0,    wob_fric_fac=0,    unint_ang_disp=0)</code></p>"},{"location":"Tendon/001Property/#parameters_2","title":"Parameters","text":"<ul> <li><code>rho</code> (float): Relative relaxation loss after 1000 hours.   </li> <li><code>rel_class</code> (int): Relaxation class (1: Slow, 2: Mean, 3: Rapid).   </li> <li><code>ult_st</code> (float): Ultimate strength .   </li> <li><code>yield_st</code> (float): Yield strength.   </li> <li><code>curv_fric_fac</code> (float, optional): Curvature friction factor (default: 0).   </li> <li><code>wob_fric_fac</code> (float, optional): Wobble friction factor (default: 0).   </li> <li><code>unint_ang_disp</code> (float, optional): Unintentional angular displacement (default: 0).   </li> </ul>"},{"location":"Tendon/001Property/#object-attributes_2","title":"Object Attributes","text":"<ul> <li><code>CODE</code> (str): 'CEB FIP-2010'   </li> <li><code>RHO</code> (float): Relative relaxation value.   </li> <li><code>CLASS</code> (int): Relaxation class.   </li> <li><code>ULT_ST</code> (float): Ultimate strength.   </li> <li><code>YIELD_ST</code> (float): Yield strength.   </li> <li><code>CURV_FF</code> (float): Curvature friction factor.   </li> <li><code>WOBBLE_FF</code> (float): Wobble friction factor.   </li> <li><code>UNINT_AD</code> (float): Unintentional angular displacement.   </li> </ul>"},{"location":"Tendon/001Property/#cebfip_1978","title":"CEBFIP_1978","text":""},{"location":"Tendon/001Property/#constructor_3","title":"Constructor","text":"<p><code>Tendon.Relaxation.CEBFIP_1978(    rho,    ult_st,    yield_st,    curv_fric_fac=0,    wob_fric_fac=0,    unint_ang_disp=0)</code></p>"},{"location":"Tendon/001Property/#parameters_3","title":"Parameters","text":"<ul> <li><code>rho</code> (float): Relative relaxation value.  </li> <li><code>ult_st</code> (float): Ultimate strength.  </li> <li><code>yield_st</code> (float): Yield strength.  </li> <li><code>curv_fric_fac</code> (float, optional): Curvature friction factor (default: 0).  </li> <li><code>wob_fric_fac</code> (float, optional): Wobble friction factor (default: 0).  </li> <li><code>unint_ang_disp</code> (float, optional): Unintentional angular displacement (default: 0).  </li> </ul>"},{"location":"Tendon/001Property/#object-attributes_3","title":"Object Attributes","text":"<ul> <li><code>CODE</code> (str): 'CEB FIP-1978'  </li> <li><code>RHO</code> (float): Relative relaxation value.  </li> <li><code>ULT_ST</code> (float): Ultimate strength.  </li> <li><code>YIELD_ST</code> (float): Yield strength.  </li> <li><code>CURV_FF</code> (float): Curvature friction factor.  </li> <li><code>WOBBLE_FF</code> (float): Wobble friction factor.  </li> <li><code>UNINT_AD</code> (float): Unintentional angular displacement.  </li> </ul>"},{"location":"Tendon/001Property/#cebfip_1990","title":"CEBFIP_1990","text":""},{"location":"Tendon/001Property/#constructor_4","title":"Constructor","text":"<p><code>Tendon.Relaxation.CEBFIP_1990(    rho,    ult_st,    yield_st,    curv_fric_fac=0,    wob_fric_fac=0,    unint_ang_disp=0)</code></p>"},{"location":"Tendon/001Property/#parameters_4","title":"Parameters","text":"<ul> <li><code>rho</code> (float): Relative relaxation value.  </li> <li><code>ult_st</code> (float): Ultimate strength.  </li> <li><code>yield_st</code> (float): Yield strength.  </li> <li><code>curv_fric_fac</code> (float, optional): Curvature friction factor (default: 0).  </li> <li><code>wob_fric_fac</code> (float, optional): Wobble friction factor (default: 0).  </li> <li><code>unint_ang_disp</code> (float, optional): Unintentional angular displacement (default: 0).  </li> </ul>"},{"location":"Tendon/001Property/#object-attributes_4","title":"Object Attributes","text":"<ul> <li><code>CODE</code> (str): 'CEB FIP-1990'  </li> <li><code>RHO</code> (float): Relative relaxation value.  </li> <li><code>ULT_ST</code> (float): Ultimate strength.  </li> <li><code>YIELD_ST</code> (float): Yield strength.  </li> <li><code>CURV_FF</code> (float): Curvature friction factor.  </li> <li><code>WOBBLE_FF</code> (float): Wobble friction factor.  </li> <li><code>UNINT_AD</code> (float): Unintentional angular displacement.  </li> </ul>"},{"location":"Tendon/001Property/#european","title":"European","text":""},{"location":"Tendon/001Property/#constructor_5","title":"Constructor","text":"<p><code>Tendon.Relaxation.European(    rel_class,    ult_st,    yield_st,    curv_fric_fac=0,    wob_fric_fac=0,    unint_ang_disp=0)</code></p>"},{"location":"Tendon/001Property/#parameters_5","title":"Parameters","text":"<ul> <li><code>rel_class</code> (int): Relaxation class (1: Ordinary, 2: Low, 3: HotRolled).  </li> <li><code>ult_st</code> (float): Ultimate strength.  </li> <li><code>yield_st</code> (float): Yield strength.  </li> <li><code>curv_fric_fac</code> (float, optional): Curvature friction factor (default: 0).  </li> <li><code>wob_fric_fac</code> (float, optional): Wobble friction factor (default: 0).  </li> <li><code>unint_ang_disp</code> (float, optional): Unintentional angular displacement (default: 0).  </li> </ul>"},{"location":"Tendon/001Property/#object-attributes_5","title":"Object Attributes","text":"<ul> <li><code>CODE</code> (str): 'European'  </li> <li><code>CLASS</code> (int): Relaxation class.  </li> <li><code>ULT_ST</code> (float): Ultimate strength.  </li> <li><code>YIELD_ST</code> (float): Yield strength.  </li> <li><code>CURV_FF</code> (float): Curvature friction factor.  </li> <li><code>WOBBLE_FF</code> (float): Wobble friction factor.  </li> <li><code>UNINT_AD</code> (float): Unintentional angular displacement.  </li> </ul>"},{"location":"Tendon/001Property/#irc_18","title":"IRC_18","text":""},{"location":"Tendon/001Property/#constructor_6","title":"Constructor","text":"<p><code>Tendon.Relaxation.IRC_18(    factor,    ult_st,    yield_st,    curv_fric_fac=0,    wob_fric_fac=0)</code></p>"},{"location":"Tendon/001Property/#parameters_6","title":"Parameters","text":"<ul> <li><code>factor</code> (float): Relaxation factor.  </li> <li><code>ult_st</code> (float): Ultimate strength.  </li> <li><code>yield_st</code> (float): Yield strength.  </li> <li><code>curv_fric_fac</code> (float, optional): Curvature friction factor (default: 0).  </li> <li><code>wob_fric_fac</code> (float, optional): Wobble friction factor (default: 0).  </li> </ul>"},{"location":"Tendon/001Property/#object-attributes_6","title":"Object Attributes","text":"<ul> <li><code>CODE</code> (str): 'IRC:18-2000'  </li> <li><code>FACTOR</code> (float): Relaxation factor.  </li> <li><code>ULT_ST</code> (float): Ultimate strength.  </li> <li><code>YIELD_ST</code> (float): Yield strength.  </li> <li><code>CURV_FF</code> (float): Curvature friction factor.  </li> <li><code>WOBBLE_FF</code> (float): Wobble friction factor.  </li> </ul>"},{"location":"Tendon/001Property/#irc_112","title":"IRC_112","text":""},{"location":"Tendon/001Property/#constructor_7","title":"Constructor","text":"<p><code>Tendon.Relaxation.IRC_112(    factor,    ult_st,    yield_st,    curv_fric_fac=0,    wob_fric_fac=0)</code></p>"},{"location":"Tendon/001Property/#parameters_7","title":"Parameters","text":"<ul> <li><code>factor</code> (float): Relaxation factor (code-specific parameter).  </li> <li><code>ult_st</code> (float): Ultimate strength.  </li> <li><code>yield_st</code> (float): Yield strength.  </li> <li><code>curv_fric_fac</code> (float, optional): Curvature friction factor (default is 0).  </li> <li><code>wob_fric_fac</code> (float, optional): Wobble friction factor (default is 0).  </li> </ul>"},{"location":"Tendon/001Property/#object-attributes_7","title":"Object Attributes","text":"<ul> <li><code>CODE</code> (str): 'IRC:112-2011'  </li> <li><code>FACTOR</code> (float): Relaxation factor.  </li> <li><code>ULT_ST</code> (float): Ultimate strength.  </li> <li><code>YIELD_ST</code> (float): Yield strength.  </li> <li><code>CURV_FF</code> (float): Curvature friction factor.  </li> <li><code>WOBBLE_FF</code> (float): Wobble friction factor.  </li> </ul>"},{"location":"Tendon/001Property/#magura","title":"Magura","text":""},{"location":"Tendon/001Property/#constructor_8","title":"Constructor","text":"<p><code>Tendon.Relaxation.Magura(    factor,    ult_st,    yield_st,    curv_fric_fac=0,    wob_fric_fac=0)</code></p>"},{"location":"Tendon/001Property/#parameters_8","title":"Parameters","text":"<ul> <li><code>factor</code> (int): Relaxation factor; must be either 10 or 45. If not, defaults to 45.  </li> <li><code>ult_st</code> (float): Ultimate strength.  </li> <li><code>yield_st</code> (float): Yield strength.  </li> <li><code>curv_fric_fac</code> (float, optional): Curvature friction factor (default is 0).  </li> <li><code>wob_fric_fac</code> (float, optional): Wobble friction factor (default is 0).  </li> </ul>"},{"location":"Tendon/001Property/#object-attributes_8","title":"Object Attributes","text":"<ul> <li><code>CODE</code> (str): 'Magura'  </li> <li><code>FACTOR</code> (int): Relaxation factor (either 10 or 45).  </li> <li><code>ULT_ST</code> (float): Ultimate strength.  </li> <li><code>YIELD_ST</code> (float): Yield strength.  </li> <li><code>CURV_FF</code> (float): Curvature friction factor.  </li> <li><code>WOBBLE_FF</code> (float): Wobble friction factor.</li> </ul>"},{"location":"Tendon/001Property/#examples","title":"Examples","text":"<pre><code>from midas_civil import *\n\nMaterial.STEEL('TD_steel','IS(S)','E450')\nTendon.Property('TD_Prop',2,1,1700,100,Tendon.Relaxation.Null(1800,1500))\nTendon.Property('TD_Prop 2',1,1,1700,100,Tendon.Relaxation.CEBFIP_2010(0,2,1800,1500))\n\nModel.create()\n</code></pre>"},{"location":"Tendon/002Profile/","title":"\u200e \u200e \u200e Tendon Profile","text":""},{"location":"Tendon/002Profile/#tendon-profile","title":"Tendon Profile","text":"<p>The Profile class define and manage tendon profiles in CIVIL NX.  It handles the geometric definition of 2D and 3D tendon profiles and their assignment to structural elements.</p>"},{"location":"Tendon/002Profile/#constructor","title":"Constructor","text":"<p><code>Tendon.Profile(name,tdn_prop,tdn_group=0,elem=[],inp_type='3D',curve_type = 'SPLINE',st_len_begin = 0 , st_len_end = 0,n_typical_tendon=0,                 trans_len_opt='USER', trans_len_begin = 0 , trans_len_end = 0, debon_len_begin=0 , debon_len_end=0,                 ref_axis = 'ELEMENT',                 prof_xyz = [], prof_xy =[],prof_xz=[],                 prof_ins_point_end = 'END-I', prof_ins_point_elem = 0, x_axis_dir_element = 'I-J', x_axis_rot_ang = 0 , projection = True, offset_y = 0 , offset_z = 0,                 prof_ins_point =[0,0,0], x_axis_dir_straight = 'X' , x_axis_dir_vec = [0,0], grad_rot_axis = 'X', grad_rot_ang=0,                 radius_cen = [0,0], offset = 0, dir = 'CW',                 id=0):</code></p> <p>Creates a tendon profile</p>"},{"location":"Tendon/002Profile/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str): The name of the tendon profile.</li> <li><code>tdn_prop</code> (int): The property ID or object associated with the tendon.</li> <li><code>tdn_group</code> (int, default=0): The group ID for the tendon.</li> <li><code>elem</code> (list): A list of element IDs to which the tendon is assigned.</li> <li><code>inp_type</code> (str, default='3D'): Input type for the profile. Accepts <code>'2D'</code> or <code>'3D'</code>.</li> <li><code>curve_type</code> (str, default='SPLINE'): The curve type for the profile. Accepts <code>'SPLINE'</code> or <code>'ROUND'</code>.</li> <li><code>st_len_begin</code> (float, default=0): Straight length at the beginning of the tendon.</li> <li><code>st_len_end</code> (float, default=0): Straight length at the end of the tendon.</li> <li><code>n_typical_tendon</code> (int, default=0): Number of typical tendons. </li> <li><code>trans_len_opt</code> (str, default='USER'): Transfer length option. Accepts <code>'USER'</code> or <code>'AUTO'</code>.</li> <li><code>trans_len_begin</code> (float, default=0): Transfer length at the beginning.</li> <li><code>trans_len_end</code> (float, default=0): Transfer length at the end.</li> <li><code>debon_len_begin</code> (float, default=0): Debonding length at the beginning.</li> <li><code>debon_len_end</code> (float, default=0): Debonding length at the end.</li> <li><code>ref_axis</code> (str, default='ELEMENT'): Reference axis for the profile shape. Accepts <code>'ELEMENT'</code>, <code>'STRAIGHT'</code>, or <code>'CURVE'</code>.</li> </ul>"},{"location":"Tendon/002Profile/#tendon-co-ordinates-input-when-inp_type-3d-or-2d","title":"Tendon Co-ordinates Input (when <code>inp_type = '3D' or '2D'</code>)","text":"<ul> <li><code>prof_xyz</code> (list): List of coordinate points <code>[[x1, y1, z1],[x2, y2, z2]...]</code> for a 3D profile.</li> <li><code>prof_xy</code> (list): List of coordinate points <code>[[x1, y1],[x2, y2]...]</code> for a 2D profile in the XY-plane.</li> <li><code>prof_xz</code> (list): List of coordinate points <code>[[x1, z1],[x2, z2]...]</code> for a 2D profile in the XZ-plane.</li> </ul>"},{"location":"Tendon/002Profile/#element-shape-parameters-when-ref_axis-element","title":"Element Shape Parameters (when <code>ref_axis = 'ELEMENT'</code>)","text":"<ul> <li><code>prof_ins_point_end</code> (str, default='END-I'): Insertion point end reference. Accepts <code>'END-I'</code> or <code>'END-J'</code>.</li> <li><code>prof_ins_point_elem</code> (int): Insertion element ID. Defaults to the first element in the <code>elem</code> list.</li> <li><code>x_axis_dir_element</code> (str, default='I-J'): Element's local x-axis direction. Accepts <code>'I-J'</code> or <code>'J-I'</code>.</li> <li><code>offset_y</code> (float, default=0): Offset in the local y-direction.</li> <li><code>offset_z</code> (float, default=0): Offset in the local z-direction.</li> </ul>"},{"location":"Tendon/002Profile/#straight-shape-parameters-when-ref_axis-straight","title":"Straight Shape Parameters (when <code>ref_axis = 'STRAIGHT'</code>)","text":"<ul> <li><code>prof_ins_point</code> (list, default=[]): Insertion point coordinates <code>[x, y, z]</code>.</li> <li><code>x_axis_dir_straight</code> (str, default='X'): Direction of the x-axis. Accepts <code>'X'</code>, <code>'Y'</code>, or <code>'VECTOR'</code>.</li> <li><code>x_axis_dir_vec</code> (list, default=[]): Vector components if <code>x_axis_dir_straight</code> is <code>'VECTOR'</code>.</li> <li><code>grad_rot_axis</code> (str, default='X'): Gradient rotation axis. Accepts <code>'X'</code> or <code>'Y'</code>.</li> <li><code>grad_rot_ang</code> (float, default=0): Gradient rotation angle.</li> </ul>"},{"location":"Tendon/002Profile/#curve-shape-parameters-when-ref_axis-curve","title":"Curve Shape Parameters (when <code>ref_axis = 'CURVE'</code>)","text":"<ul> <li><code>prof_ins_point</code> (list, default=[]): Insertion point coordinates <code>[x, y, z]</code>.</li> <li><code>radius_cen</code> (list, default=[]): Center coordinates for the curve radius <code>[x, y]</code>.</li> <li><code>offset</code> (float, default=0): Offset from the reference curve.</li> <li><code>dir</code> (str, default='CW'): Direction of the curve. Accepts <code>'CW'</code> (Clockwise) or <code>'CCW'</code> (Counter-Clockwise).  </li> </ul> <ul> <li><code>x_axis_rot_ang</code> (float, default=0): Rotation angle of the x-axis.</li> <li><code>projection</code> (bool, default=True): Whether to project or rotate the tendon profile.</li> <li><code>id</code> (int, default=0): ID of tendon profile. If 0, an ID is automatically generated.</li> </ul>"},{"location":"Tendon/002Profile/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> : Unique identifier for the profile.</li> <li><code>NAME</code> : Name of the tendon profile.</li> <li><code>PROP</code> : Tendon property ID.</li> <li><code>GROUP</code> : Tendon group ID.</li> <li><code>ELEM</code> : List of assigned element IDs.</li> <li><code>INPUT</code> : Profile input type (<code>'2D'</code> or <code>'3D'</code>).</li> <li><code>CURVE</code> : Profile curve type (<code>'SPLINE'</code> or <code>'ROUND'</code>).</li> <li><code>BELENG</code> : Straight length at the beginning.</li> <li><code>ELENG</code> : Straight length at the end.</li> <li><code>bTP</code> : True if the profile is a typical tendon, otherwise False.</li> <li><code>CNT</code> : Number of typical tendons.</li> <li><code>LENG_OPT</code> : Transition length option (<code>'USER'</code> or <code>'AUTO'</code>).</li> <li><code>BLEN</code> : Transition length at the beginning.</li> <li><code>ELEN</code> : Transition length at the end.</li> <li><code>DeBondBLEN</code> : Debonding length at the beginning.</li> <li><code>DeBondELEN</code> : Debonding length at the end.</li> <li><code>SHAPE</code> : Reference axis shape (<code>'ELEMENT'</code>, <code>'STRAIGHT'</code>, <code>'CURVE'</code>).</li> <li><code>P_XYZ</code> (list): For 3D profiles, a list of <code>POINT</code> objects representing coordinates.  point.X = X-coordinate \u00a0\u00a0|\u00a0\u00a0 point.Y = Y-coordinate \u00a0\u00a0|\u00a0\u00a0 point.Z = Z-coordinate </li> <li><code>P_XY</code> (list): For 2D profiles, a list of <code>POINT</code> objects for the XY-plane projection. point.X = X-coordinate \u00a0\u00a0|\u00a0\u00a0 point.Y = Y-coordinate </li> <li><code>P_XZ</code> (list): For 2D profiles, a list of <code>POINT</code> objects for the XZ-plane projection. point.X = X-coordinate \u00a0\u00a0|\u00a0\u00a0 point.Z = Z-coordinate </li> </ul>"},{"location":"Tendon/002Profile/#class-attributes","title":"Class Attributes","text":"<p>Tendon.Profile.profiles -&gt; List of all tendon profiles defined.</p> <pre><code>prof_xyz = [[0,0,0],[1000,0,-250],[5000,0,0]]\n\nTendon.Profile('TDN_Profile1',1,0,elemsInGroup('Span1'),'3D','SPLINE',ref_axis='CURVE',prof_xyz=prof_xyz,radius_cen=[0,-50000])\nTendon.Profile('TDN_Profile2',1,0,elemsInGroup('Span1'),'3D','SPLINE',ref_axis='ELEMENT',prof_xyz=prof_xyz)\nTendon.Profile('TDN_Profile3',1,0,elemsInGroup('Span1'),'3D','SPLINE',ref_axis='STRAIGHT',prof_xyz=prof_xyz)\n\nfor profile in Tendon.Profile.profiles:\n    print(f' NAME =&gt; {profile.NAME}   |   TYPE =&gt;  {profile.CURVE}   |   REF =&gt; {profile.INPUT}  |    REF =&gt; {profile.SHAPE}  |')\n</code></pre>"},{"location":"Tendon/002Profile/#methods","title":"Methods","text":""},{"location":"Tendon/002Profile/#json","title":"json","text":"<p>Returns a JSON representation of all Tendon Profiles defined in python.</p> <pre><code>prof_xyz = [[0,0,0],[1000,0,-250],[5000,0,0]]\nTendon.Profile('Tendon_Profile',1,0,elemsInGroup('Span'),'3D','SPLINE',ref_axis='ELEMENT',prof_xyz=prof_xyz)\nprint(Tendon.Profile.json())\n</code></pre>"},{"location":"Tendon/002Profile/#create","title":"create","text":"<p>Sends the current tendon profiles defined to the Civil NX using a PUT request.  New profiles are created and existing profiles(same ID) in Civil NX will be updated.</p> <pre><code>prof_xyz = [[0,0,0],[1000,0,-250],[5000,0,0]]\nTendon.Profile('Tendon_Profile',1,0,elemsInGroup('Span'),'3D','SPLINE',ref_axis='ELEMENT',prof_xyz=prof_xyz)\nTendon.Profile.create()\n</code></pre>"},{"location":"Tendon/002Profile/#get","title":"get","text":"<p>Fetches tendon profiles from the Civil NX and return the JSON representation.</p> <pre><code>print(Tendon.Profile.get())\n</code></pre>"},{"location":"Tendon/002Profile/#sync","title":"sync","text":"<p>Retrieves Tendon profile data from the Civil NX and rebuilds the internal tendon profile list.</p> <pre><code>Tendon.Profile.sync()\n</code></pre>"},{"location":"Tendon/002Profile/#delete","title":"delete","text":"<p>Deletes all tendon profiles from both Python and Civil NX.</p> <pre><code>Tendon.Profile.delete()\n</code></pre> <p></p>"},{"location":"Tendon/002Profile/#examples","title":"Examples","text":"<pre><code>from midas_civil import *\n\nMaterial.STEEL('Tendon_Material','IS(S)','Fe490')\nElement.Beam.SDL([0,0,0],[1,0,0],5000,10,group='Span1')\n\n\nTendon.Property('TD1',2,1,1200,150,Tendon.Relaxation.Null(1880,1580))\n\n\nprof_xy=[[0,0],[1000,100],[5000,0]]\nprof_xz=[[0,0],[2000,-500],[5000,0]]\n\nprof_xyz = [[0,0,0],[1000,0,-250],[5000,0,0]]\n\nTendon.Profile('TDN_Profile1',1,0,elemsInGroup('Span1'),'3D','SPLINE',ref_axis='CURVE',prof_xyz=prof_xyz,radius_cen=[0,-50000])\nTendon.Profile('TDN_Profile2',1,0,elemsInGroup('Span1'),'3D','SPLINE',ref_axis='ELEMENT',prof_xyz=prof_xyz)\nTendon.Profile('TDN_Profile3',1,0,elemsInGroup('Span1'),'3D','SPLINE',ref_axis='STRAIGHT',prof_xyz=prof_xyz)\n\nTendon.Profile('TDN_Profile4',1,0,elemsInGroup('Span1'),'2D','SPLINE',ref_axis='ELEMENT',prof_xy=prof_xy,prof_xz=prof_xz)\n\n\nModel.create()\n</code></pre>"},{"location":"Tendon/003Prestress/","title":"\u200e \u200e \u200e Tendon Prestress","text":""},{"location":"Tendon/003Prestress/#tendon-prestress","title":"Tendon Prestress","text":"<p>Defines a prestress load to be applied to a tendon profile.</p>"},{"location":"Tendon/003Prestress/#constructor","title":"Constructor","text":"<p><code>Tendon.Prestress(profile_name, load_case, load_group = \"\", prestress_type = \"STRESS\", jack_step = \"BEGIN\", jack_begin = 0, jack_end=0, grouting_stage = 0, id = 0):</code></p> <p>Creates a tendon prestress loading</p>"},{"location":"Tendon/003Prestress/#parameters","title":"Parameters","text":"<ul> <li><code>profile_name</code> (str) : The name of the target tendon profile to which the load will be applied.   -</li> <li><code>load_case</code>(str) : The name of the load case for this prestress load.  \u2003\u2003\u2003\u2003If a Load_Case with this name doesn't exist, a new one of type \"PS\" (Prestress) will be created automatically.</li> <li><code>load_group</code>  (str, optional) : The name of the load group.  \u2003\u2003\u2003\u2003If a non-empty string is provided and the group doesn't exist, it will be created automatically.</li> <li><code>prestress_type</code>  (str , default = 'STRESS') : The type of the jacking value. Accepted values are:  \u2003\u2003\u2003\u2003 1 : 'STRESS' \u00a0\u00a0|\u00a0\u00a0  2 : 'FORCE'   </li> <li><code>jack_step</code> (str, default = 'BEGIN') : Defines the location of the jacking application. Accepted values are:  \u2003\u2003\u2003\u2003 1 : 'BEGIN' \u00a0\u00a0|\u00a0\u00a0  2 : 'END'  \u00a0\u00a0|\u00a0\u00a0  2 : 'BOTH'    </li> <li><code>jack_begin</code> (float) : The stress or force value applied at the beginning of the tendon.</li> <li><code>jack_end</code> (float) :  The stress or force value applied at the end of the tendon.</li> <li><code>grouting_stage</code> (int) : The construction stage number after which grouting is applied. A value of 0 signifies that grouting is applied in same stage.</li> <li><code>id</code> (int, default=0): ID of tendon prestress load. If 0, an ID is automatically generated.</li> </ul>"},{"location":"Tendon/003Prestress/#object-attributes","title":"Object Attributes","text":"<ul> <li><code>ID</code> (int): The unique ID of this specific prestress load.</li> <li><code>TDN_ID</code> (int): The ID of the tendon.</li> <li><code>TDN_NAME</code> (str): The name of the tendon profile.</li> <li><code>LCNAME</code> (str): The name of the load case.</li> <li><code>LDGR</code> (str): The name of the load group.</li> <li><code>TYPE</code> (str): The prestress type ('STRESS' or 'FORCE').</li> <li><code>ORDER</code> (str): The jacking order ('BEGIN', 'END', or 'BOTH').</li> <li><code>JACK_BEGIN</code> (float): The jacking value at the beginning.</li> <li><code>JACK_END</code> (float): The jacking value at the end.</li> <li><code>GROUTING</code> (int): The grouting stage.</li> </ul>"},{"location":"Tendon/003Prestress/#class-attributes","title":"Class Attributes","text":"<p>Tendon.Prestress.loads -&gt; List of all tendon prestress load defined.</p> <pre><code>Tendon.Prestress('TendonProfile_2','TEST',jack_begin=150)\nTendon.Prestress('TendonProfile_2','PresLoadCase','PrestressGroup','STRESS','BOTH',1200,1400,1)\nTendon.Prestress('TendonProfile_3','PresLoadCase','PrestressGroup','STRESS','BOTH',1200,1400,1)\n\nfor load in Tendon.Prestress.loads:\n    print(f' TENDON NAME =&gt; {load.TDN_NAME}   |   LOADING TYPE =&gt;  {load.TYPE}   | ')\n\n# OUTPUT :\n#  TENDON NAME =&gt; TendonProfile_2   |   LOADING TYPE =&gt;  STRESS   |\n#  TENDON NAME =&gt; TendonProfile_2   |   LOADING TYPE =&gt;  STRESS   |\n#  TENDON NAME =&gt; TendonProfile_3   |   LOADING TYPE =&gt;  STRESS   |\n</code></pre>"},{"location":"Tendon/003Prestress/#methods","title":"Methods","text":""},{"location":"Tendon/003Prestress/#json","title":"json","text":"<p>Returns a JSON representation of all Tendon Prestress loads defined in python.</p> <pre><code>Tendon.Prestress('TendonProfile_2','PresLoadCase','PrestressGroup','STRESS','BOTH',1200,1400,1)\nprint(Tendon.Profile.json())\n</code></pre>"},{"location":"Tendon/003Prestress/#create","title":"create","text":"<p>Sends the current tendon prestress load defined to the Civil NX using a PUT request.   </p> <pre><code>Tendon.Prestress('TendonProfile_2','PresLoadCase','PrestressGroup','STRESS','BOTH',1200,1400,1)\nTendon.Prestress.create()\n</code></pre>"},{"location":"Tendon/003Prestress/#get","title":"get","text":"<p>Fetches tendon prestress load data from the Civil NX and return the JSON representation.</p> <pre><code>print(Tendon.Prestress.get())\n</code></pre>"},{"location":"Tendon/003Prestress/#sync","title":"sync","text":"<p>Retrieves Tendon prestress load data from the Civil NX and rebuilds the internal tendon prestress loads list.</p> <pre><code>Tendon.Prestress.sync()\n</code></pre>"},{"location":"Tendon/003Prestress/#delete","title":"delete","text":"<p>Deletes all tendon prestress loading from both Python and Civil NX.</p> <pre><code>Tendon.Prestress.delete()\n</code></pre> <p></p>"},{"location":"Tendon/003Prestress/#examples","title":"Examples","text":"<pre><code>from midas_civil import *\nimport math\n\nMaterial.STEEL('Tendon_Material','IS(S)','Fe490',50)\ntdn_relax = Tendon.Relaxation.Null(1880,1580)\nTendon.Property('TD1',2,50,120,150,tdn_relax)\n\nElement.Beam.SDL([0,0,0],[1,0,0],10000,20)\n\nfor i in range(6):\n    prof_xyz = []\n    for j in range(21):\n        q = i+j\n        prof_xyz.append([10000*j/20,500*math.sin(q),500*math.cos(q)])\n    Tendon.Profile(f'TendonProfile_{i+1}',1,0,list(range(1,21)),'3D','SPLINE',prof_xyz=prof_xyz)\n\n\nTendon.Prestress('TendonProfile_2','TEST',jack_begin=150)\nTendon.Prestress('TendonProfile_2','PresLoadCase','PrestressGroup','STRESS','BOTH',1200,1400,1)\nTendon.Prestress('TendonProfile_3','PresLoadCase','PrestressGroup','STRESS','BOTH',1200,1400,1)\n\nModel.create()\n</code></pre>"}]}